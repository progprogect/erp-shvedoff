// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—Ç–≥—Ä—É–∑–∫–∞—Ö
const axios = require('axios');

const API_BASE_URL = 'http://localhost:5001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  username: 'director',
  password: '123456'
};

async function testShipmentOrders() {
  try {
    console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—Ç–≥—Ä—É–∑–∫–∞—Ö...\n');

    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, testData);
    const token = loginResponse.data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞\n');

    const headers = { Authorization: `Bearer ${token}` };

    // 2. –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...');
    const readyOrdersResponse = await axios.get(`${API_BASE_URL}/shipments/ready-orders`, { headers });
    const readyOrders = readyOrdersResponse.data.data;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${readyOrders.length} –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤`);
    
    if (readyOrders.length > 0) {
      console.log('–ì–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:');
      readyOrders.forEach(order => {
        console.log(`  - ${order.orderNumber}: ${order.customerName}`);
      });
    }
    console.log('');

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (readyOrders.length < 2) {
      console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...');
      
      const testOrders = [
        {
          customerName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç 1',
          customerContact: '+7 999 123 45 67',
          priority: 'normal',
          items: [
            { productId: 1, quantity: 5, price: 1000 }
          ]
        },
        {
          customerName: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç 2', 
          customerContact: '+7 999 765 43 21',
          priority: 'high',
          items: [
            { productId: 2, quantity: 3, price: 1500 }
          ]
        }
      ];

      for (const orderData of testOrders) {
        try {
          const createOrderResponse = await axios.post(`${API_BASE_URL}/orders`, orderData, { headers });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑: ${createOrderResponse.data.data.orderNumber}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error.response?.data?.message || error.message}`);
        }
      }
      console.log('');
    }

    // 4. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    console.log('4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
    const updatedReadyOrdersResponse = await axios.get(`${API_BASE_URL}/shipments/ready-orders`, { headers });
    const updatedReadyOrders = updatedReadyOrdersResponse.data.data;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${updatedReadyOrders.length} –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n`);

    if (updatedReadyOrders.length >= 2) {
      // 5. –°–æ–∑–¥–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
      console.log('5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏...');
      const orderIds = updatedReadyOrders.slice(0, 2).map(order => order.id);
      
      const shipmentData = {
        orderIds: orderIds,
        plannedDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –∑–∞–≤—Ç—Ä–∞
        transportInfo: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏'
      };

      const createShipmentResponse = await axios.post(`${API_BASE_URL}/shipments`, shipmentData, { headers });
      const newShipment = createShipmentResponse.data.data;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ—Ç–≥—Ä—É–∑–∫–∞: ${newShipment.shipmentNumber}`);
      console.log(`   –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${orderIds.join(', ')}\n`);

      // 6. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≥—Ä—É–∑–∫–∏
      console.log('6Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≥—Ä—É–∑–∫–∏...');
      const shipmentDetailsResponse = await axios.get(`${API_BASE_URL}/shipments/${newShipment.id}`, { headers });
      const shipmentDetails = shipmentDetailsResponse.data.data;
      
      console.log(`‚úÖ –û—Ç–≥—Ä—É–∑–∫–∞ ${shipmentDetails.shipmentNumber}:`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${shipmentDetails.status}`);
      console.log(`   –°–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${shipmentDetails.relatedOrders?.length || 0}`);
      
      if (shipmentDetails.relatedOrders && shipmentDetails.relatedOrders.length > 0) {
        shipmentDetails.relatedOrders.forEach(order => {
          console.log(`     - ${order.orderNumber}: ${order.customerName}`);
        });
      }
      console.log('');

      // 7. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≥—Ä—É–∑–æ–∫
      console.log('7Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≥—Ä—É–∑–æ–∫...');
      const shipmentsResponse = await axios.get(`${API_BASE_URL}/shipments`, { headers });
      const shipments = shipmentsResponse.data.data;
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${shipments.length} –æ—Ç–≥—Ä—É–∑–æ–∫:`);
      shipments.forEach(shipment => {
        const orders = shipment.orders?.map(so => so.order) || shipment.relatedOrders || [];
        console.log(`   - ${shipment.shipmentNumber}: ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
        if (orders.length > 0) {
          orders.forEach(order => {
            console.log(`     * ${order.orderNumber}: ${order.customerName}`);
          });
        }
      });
      console.log('');

      // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É —Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
      console.log('8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É —Å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏)...');
      try {
        const duplicateShipmentData = {
          orderIds: orderIds, // —Ç–µ –∂–µ –∑–∞–∫–∞–∑—ã
          plannedDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),
          transportInfo: '–î—É–±–ª–∏—Ä—É—é—â–∞—è –æ—Ç–≥—Ä—É–∑–∫–∞'
        };
        
        await axios.post(`${API_BASE_URL}/shipments`, duplicateShipmentData, { headers });
        console.log('‚ùå –û—à–∏–±–∫–∞: –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
      } catch (error) {
        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${error.response?.data?.message}`);
      }
      console.log('');

    } else {
      console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≥—Ä—É–∑–æ–∫');
    }

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.response?.data?.message || error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error.response?.data || error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testShipmentOrders();
