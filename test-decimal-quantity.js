// –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–î–ï–†–ñ–ö–ò –î–†–û–ë–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô –ö–û–õ–ò–ß–ï–°–¢–í–ê –ö–û–í–†–û–í
// –î–∞—Ç–∞: 2025-01-20

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–î–ï–†–ñ–ö–ò –î–†–û–ë–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô –ö–û–õ–ò–ß–ï–°–¢–í–ê –ö–û–í–†–û–í\n');

// –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function normalizeDecimalInput(value) {
  if (value === null || value === undefined || value === '') {
    return 0;
  }

  const stringValue = String(value);
  const normalizedString = stringValue.replace(',', '.');
  const parsedValue = parseFloat(normalizedString);
  
  if (isNaN(parsedValue) || parsedValue < 0) {
    return 0;
  }
  
  return Math.round(parsedValue * 100) / 100;
}

function formatQuantityDisplay(value) {
  if (value === null || value === undefined || value === 0) {
    return '0';
  }

  const rounded = Math.round(value * 100) / 100;
  
  if (rounded % 1 === 0) {
    return rounded.toString();
  }
  
  return rounded.toFixed(2).replace(/\.?0+$/, '');
}

function formatQuantityForArticle(value) {
  if (value === 0) return '0';
  
  const rounded = Math.round(value * 100) / 100;
  
  if (rounded % 1 === 0) {
    return rounded.toString();
  }
  
  return rounded.toFixed(2).replace(/\.?0+$/, '');
}

function formatRollComposition(composition) {
  if (!composition || composition.length === 0) return '';
  
  const totalQuantity = composition.reduce((sum, item) => sum + item.quantity, 0);
  
  return totalQuantity > 0 ? `${formatQuantityForArticle(totalQuantity)}–ö–æ–≤—Ä` : '';
}

function validateQuantity(value) {
  if (isNaN(value) || value < 0.01) {
    return {
      isValid: false,
      error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.01'
    };
  }

  if (value > 9999999.99) {
    return {
      isValid: false,
      error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 9999999.99'
    };
  }

  const decimals = (value.toString().split('.')[1] || '').length;
  if (decimals > 2) {
    return {
      isValid: false,
      error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π'
    };
  }

  return { isValid: true };
}

// –¢–ï–°–¢–û–í–´–ï –°–õ–£–ß–ê–ò
console.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–¢–ò–õ–ò–¢:\n');

// 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–≤–æ–¥–∞
console.log('1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞:');
const inputTests = [
  { input: '1,5', expected: 1.5, description: '–ó–∞–ø—è—Ç–∞—è ‚Üí —Ç–æ—á–∫–∞' },
  { input: '2.75', expected: 2.75, description: '–¢–æ—á–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è' },
  { input: '3', expected: 3, description: '–¶–µ–ª–æ–µ —á–∏—Å–ª–æ' },
  { input: '0,01', expected: 0.01, description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ' },
  { input: '', expected: 0, description: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞' },
  { input: null, expected: 0, description: 'Null –∑–Ω–∞—á–µ–Ω–∏–µ' },
  { input: 'abc', expected: 0, description: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç' }
];

inputTests.forEach(test => {
  const result = normalizeDecimalInput(test.input);
  const status = result === test.expected ? '‚úÖ' : '‚ùå';
  console.log(`   ${status} ${test.description}: "${test.input}" ‚Üí ${result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected})`);
});

// 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
console.log('\n2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
const displayTests = [
  { input: 1, expected: '1', description: '–¶–µ–ª–æ–µ –±–µ–∑ .00' },
  { input: 1.5, expected: '1.5', description: '–î—Ä–æ–±–Ω–æ–µ —Å .5' },
  { input: 2.50, expected: '2.5', description: '–£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π 0' },
  { input: 3.25, expected: '3.25', description: '–î—Ä–æ–±–Ω–æ–µ —Å .25' },
  { input: 0, expected: '0', description: '–ù–æ–ª—å' },
  { input: null, expected: '0', description: 'Null ‚Üí 0' }
];

displayTests.forEach(test => {
  const result = formatQuantityDisplay(test.input);
  const status = result === test.expected ? '‚úÖ' : '‚ùå';
  console.log(`   ${status} ${test.description}: ${test.input} ‚Üí "${result}" (–æ–∂–∏–¥–∞–ª–æ—Å—å: "${test.expected}")`);
});

// 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
console.log('\n3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π:');
const validationTests = [
  { input: 0.01, expected: true, description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ' },
  { input: 1.5, expected: true, description: '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥—Ä–æ–±–Ω–æ–µ' },
  { input: 999.99, expected: true, description: '–ë–æ–ª—å—à–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ' },
  { input: 0, expected: false, description: '–ù–æ–ª—å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω' },
  { input: 0.001, expected: false, description: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤' },
  { input: 10000000, expected: false, description: '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ' }
];

validationTests.forEach(test => {
  const result = validateQuantity(test.input);
  const status = result.isValid === test.expected ? '‚úÖ' : '‚ùå';
  console.log(`   ${status} ${test.description}: ${test.input} ‚Üí ${result.isValid ? '–≤–∞–ª–∏–¥–Ω–æ' : result.error}`);
});

// 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞
console.log('\n4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞:');
const articleTests = [
  { composition: [{ quantity: 1 }, { quantity: 2 }], expected: '3–ö–æ–≤—Ä', description: '–¶–µ–ª—ã–µ —á–∏—Å–ª–∞' },
  { composition: [{ quantity: 1.5 }, { quantity: 2.5 }], expected: '4–ö–æ–≤—Ä', description: '–î—Ä–æ–±–Ω—ã–µ ‚Üí —Ü–µ–ª–æ–µ' },
  { composition: [{ quantity: 1.25 }, { quantity: 1.75 }], expected: '3–ö–æ–≤—Ä', description: '–î—Ä–æ–±–Ω—ã–µ ‚Üí —Ü–µ–ª–æ–µ' },
  { composition: [{ quantity: 1.5 }, { quantity: 1 }], expected: '2.5–ö–æ–≤—Ä', description: '–°–º–µ—à–∞–Ω–Ω—ã–µ ‚Üí –¥—Ä–æ–±–Ω–æ–µ' },
  { composition: [], expected: '', description: '–ü—É—Å—Ç–æ–π —Å–æ—Å—Ç–∞–≤' }
];

articleTests.forEach(test => {
  const result = formatRollComposition(test.composition);
  const status = result === test.expected ? '‚úÖ' : '‚ùå';
  console.log(`   ${status} ${test.description}: ${JSON.stringify(test.composition.map(c => c.quantity))} ‚Üí "${result}" (–æ–∂–∏–¥–∞–ª–æ—Å—å: "${test.expected}")`);
});

console.log('\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û\n');

// –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
console.log('üé® –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:\n');

console.log('‚úÖ CreateProductModal.tsx:');
console.log('   ‚Ä¢ InputNumber: min={0.01}, step={0.01}, precision={2}');
console.log('   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å normalizeDecimalInput()');
console.log('   ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å formatQuantityDisplay()');

console.log('\n‚úÖ ProductDetail.tsx:');
console.log('   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: √ó{formatQuantityDisplay(item.quantity)}');
console.log('   ‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π');

console.log('\n‚úÖ articleGenerator.ts:');
console.log('   ‚Ä¢ formatRollComposition() —Å formatQuantityForArticle()');
console.log('   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –≤ –∞—Ä—Ç–∏–∫—É–ª–µ (1.5–ö–æ–≤—Ä vs 2–ö–æ–≤—Ä)');

console.log('\n‚úÖ backend/src/db/schema.ts:');
console.log('   ‚Ä¢ quantity: decimal("quantity", { precision: 10, scale: 2 })');

console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (staging):');
console.log('   ‚Ä¢ –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏: numeric(10,2)');
console.log('   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: quantity >= 0.01');
console.log('   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');

console.log('\nüß™ –°–¶–ï–ù–ê–†–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
console.log('1. –°–æ–∑–¥–∞—Ç—å —Ä—É–ª–æ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1,5 (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)');
console.log('2. –°–æ–∑–¥–∞—Ç—å —Ä—É–ª–æ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 2.25 (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)');
console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞');
console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Ä—Ç–∏–∫—É–ª–∞');
console.log('5. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ 0.001 (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)');
console.log('6. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ 0 (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)');

console.log('\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
console.log('‚Ä¢ –í–≤–æ–¥: 1,5 ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: 1.50 ‚Üí –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: 1.5 ‚Üí –ê—Ä—Ç–∏–∫—É–ª: 1.5–ö–æ–≤—Ä');
console.log('‚Ä¢ –í–≤–æ–¥: 2 ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: 2.00 ‚Üí –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: 2 ‚Üí –ê—Ä—Ç–∏–∫—É–ª: 2–ö–æ–≤—Ä');
console.log('‚Ä¢ –í–≤–æ–¥: 1.25 + 2.75 ‚Üí –ê—Ä—Ç–∏–∫—É–ª: 4–ö–æ–≤—Ä (—Ü–µ–ª–æ–µ)');
console.log('‚Ä¢ –í–≤–æ–¥: 1.5 + 1 ‚Üí –ê—Ä—Ç–∏–∫—É–ª: 2.5–ö–æ–≤—Ä (–¥—Ä–æ–±–Ω–æ–µ)');

console.log('\nüöÄ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!');
