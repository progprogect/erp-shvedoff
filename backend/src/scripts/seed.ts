import bcrypt from 'bcryptjs';
import { db, schema } from '../db';

const seedUsers = async () => {
  console.log('üå± Seeding users...');
  
  const users = [
    {
      username: 'director',
      passwordHash: await bcrypt.hash('123456', 10),
      role: 'director' as const,
      fullName: '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
      phone: '+7-999-123-45-67',
      email: 'director@shvedoff.ru'
    },
    {
      username: 'manager1',
      passwordHash: await bcrypt.hash('123456', 10),
      role: 'manager' as const,
      fullName: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º #1',
      phone: '+7-999-123-45-68',
      email: 'manager1@shvedoff.ru'
    },
    {
      username: 'production1',
      passwordHash: await bcrypt.hash('123456', 10),
      role: 'production' as const,
      fullName: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ #1',
      phone: '+7-999-123-45-69',
      email: 'production1@shvedoff.ru'
    },
    {
      username: 'warehouse1',
      passwordHash: await bcrypt.hash('123456', 10),
      role: 'warehouse' as const,
      fullName: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–ª–∞–¥–∞/–û—Ö—Ä–∞–Ω–∞ #1',
      phone: '+7-999-123-45-70',
      email: 'warehouse1@shvedoff.ru'
    }
  ];

  await db.insert(schema.users).values(users).onConflictDoNothing();
  console.log('‚úÖ Users seeded successfully');
};

const seedSurfaces = async () => {
  console.log('üå± Seeding product surfaces...');
  
  const surfaces = [
    {
      name: '–ß–µ—Ä—Ç–æ—á–∫–∏',
      description: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å —Ä–∏—Å—É–Ω–∫–æ–º –≤ –≤–∏–¥–µ —á–µ—Ä—Ç–æ—á–µ–∫',
      isSystem: true
    },
    {
      name: '–ß–µ—à—É–π–∫–∏',
      description: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å —Ä–∏—Å—É–Ω–∫–æ–º –≤ –≤–∏–¥–µ —á–µ—à—É–µ–∫',
      isSystem: true
    },
    {
      name: '–ì–ª–∞–¥–∫–∞—è',
      description: '–ì–ª–∞–¥–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–∏—Å—É–Ω–∫–∞',
      isSystem: true
    },
    {
      name: '1 –∫–æ—Ä–æ–≤–∫–∞',
      description: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å –æ–¥–Ω–∏–º –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫–æ—Ä–æ–≤–∫–∏',
      isSystem: true
    },
    {
      name: '3 –∫–æ—Ä–æ–≤–∫–∏',
      description: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å —Ç—Ä–µ–º—è –ª–æ–≥–æ—Ç–∏–ø–∞–º–∏ –∫–æ—Ä–æ–≤–æ–∫',
      isSystem: true
    },
    {
      name: '–ß–µ—à—É–π–∫–∞ —Å –ª–æ–≥–æ',
      description: '–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Å —á–µ—à—É–π–∫–∞–º–∏ –∏ –ª–æ–≥–æ—Ç–∏–ø–æ–º',
      isSystem: true
    }
  ];

  await db.insert(schema.productSurfaces).values(surfaces).onConflictDoNothing();
  console.log('‚úÖ Product surfaces seeded successfully');
};

const seedLogos = async () => {
  console.log('üå± Seeding product logos...');
  
  const logos = [
    {
      name: 'GEA',
      description: '–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ GEA',
      isSystem: true
    },
    {
      name: 'Maximilk',
      description: '–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ Maximilk',
      isSystem: true
    },
    {
      name: 'VELES',
      description: '–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ VELES',
      isSystem: true
    },
    {
      name: '–ê–≥—Ä–æ—Ç–µ–∫',
      description: '–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ –ê–≥—Ä–æ—Ç–µ–∫',
      isSystem: true
    },
    {
      name: '–ê—Ä–Ω—Ç—å–µ–Ω',
      description: '–õ–æ–≥–æ—Ç–∏–ø –±—Ä–µ–Ω–¥–∞ –ê—Ä–Ω—Ç—å–µ–Ω',
      isSystem: true
    }
  ];

  await db.insert(schema.productLogos).values(logos).onConflictDoNothing();
  console.log('‚úÖ Product logos seeded successfully');
};

const seedMaterials = async () => {
  console.log('üå± Seeding product materials...');
  
  const materials = [
    {
      name: '–ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä',
      description: '–ú–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–µ–∑–∏–Ω–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π',
      isSystem: true
    },
    {
      name: '–î—Ä–æ–±–ª–µ–Ω–∫–∞',
      description: '–ú–∞—Ç–µ—Ä–∏–∞–ª –¥—Ä–æ–±–ª–µ–Ω–∫–∞ –¥–ª—è —Ä–µ–∑–∏–Ω–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π',
      isSystem: true
    }
  ];

  await db.insert(schema.productMaterials).values(materials).onConflictDoNothing();
  console.log('‚úÖ Product materials seeded successfully');
};

const seedCategories = async () => {
  console.log('üå± Seeding categories...');

  const categories = [
    { id: 1, name: '–õ–µ–∂–∞–∫–∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ', parentId: null, path: '1' },
    { id: 2, name: '–ß–µ—à—Å–∫–∏–µ (0 –ß–µ—à)', parentId: 1, path: '1.2' },
    { id: 3, name: '3-–ö–æ—Ä–æ–Ω—á–∞—Ç—ã–µ (3–ö–æ—Ä)', parentId: 1, path: '1.3' },
    { id: 4, name: '–ë—Ä–µ–Ω–¥–æ–≤—ã–µ', parentId: 1, path: '1.4' },
    { id: 5, name: 'GEA', parentId: 4, path: '1.4.5' },
    { id: 6, name: 'Agrotek', parentId: 4, path: '1.4.6' },
    { id: 7, name: '–í–µ—Ä–±–ª—é–¥', parentId: 4, path: '1.4.7' },
    { id: 8, name: '–ö–æ–≤—Ä–∏–∫–∏', parentId: null, path: '8' },
    { id: 9, name: '–ö–æ–ª—å—Ü–µ–≤—ã–µ', parentId: 8, path: '8.9' },
    { id: 10, name: '–ü—Ä–∏–¥–≤–µ—Ä–Ω—ã–µ', parentId: 8, path: '8.10' },
    { id: 11, name: '–†—É–ª–æ–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è', parentId: null, path: '11' },
    { id: 12, name: '–ö—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', parentId: null, path: '12' },
    { id: 13, name: '–î—é–±–µ–ª–∏', parentId: 12, path: '12.13' }
  ];

  for (const category of categories) {
    await db.insert(schema.categories).values(category).onConflictDoNothing();
  }

  console.log('‚úÖ Categories seeded successfully');
};

const seedProducts = async () => {
  console.log('üå± Seeding products...');

  const products = [
    {
      name: '–õ–µ–∂–∞–∫ 0 –ß–µ—à 1800√ó1200√ó30',
      article: 'LCH-1800-1200-30',
      categoryId: 2,
      dimensions: { length: 1800, width: 1200, height: 30 },
      characteristics: { surface: '—á–µ—Ä—Ç—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', type: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
      tags: ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '—á–µ—à—Å–∫–∏–π', '1800√ó1200', '30–º–º', '—á–µ—Ä—Ç—ë–Ω—ã–π'],
      price: '15430.00',
      costPrice: '12450.00',
      normStock: 100,
      notes: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –ª–µ—Ç–æ–º. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ 2-3 –¥–Ω—è.'
    },
    {
      name: '–õ–µ–∂–∞–∫ 0 –ß–µ—à 1800√ó1200√ó35',
      article: 'LCH-1800-1200-35',
      categoryId: 2,
      dimensions: { length: 1800, width: 1200, height: 35 },
      characteristics: { surface: '—á–µ—Ä—Ç—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', type: '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' },
      tags: ['—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '—á–µ—à—Å–∫–∏–π', '1800√ó1200', '35–º–º', '—á–µ—Ä—Ç—ë–Ω—ã–π'],
      price: '16780.00',
      costPrice: '13560.00',
      normStock: 50
    },
    {
      name: '–õ–µ–∂–∞–∫ GEA 1800√ó1200√ó30',
      article: 'GEA-1800-1200-30',
      categoryId: 5,
      dimensions: { length: 1800, width: 1200, height: 30 },
      characteristics: { surface: '–±—Ä–µ–Ω–¥–æ–≤–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', brand: 'GEA' },
      tags: ['GEA', '–±—Ä–µ–Ω–¥–æ–≤—ã–π', '1800√ó1200', '30–º–º'],
      price: '18920.00',
      costPrice: '15340.00',
      normStock: 30
    },
    {
      name: '–ö–æ–≤—Ä–∏–∫ –∫–æ–ª—å—Ü–µ–≤–æ–π 600√ó400',
      article: 'KK-600-400',
      categoryId: 9,
      dimensions: { length: 600, width: 400, height: 15 },
      characteristics: { surface: '–∫–æ–ª—å—Ü–µ–≤–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', type: '–±–µ–∑ –æ—Ç–≤–µ—Ä—Å—Ç–∏–π' },
      tags: ['–∫–æ–≤—Ä–∏–∫', '–∫–æ–ª—å—Ü–µ–≤–æ–π', '600√ó400'],
      price: '2850.00',
      costPrice: '2280.00',
      normStock: 200
    },
    {
      name: '–î—é–±–µ–ª—å 10√ó100–º–º',
      article: 'DUB-10-100',
      categoryId: 13,
      dimensions: { diameter: 10, length: 100 },
      characteristics: { material: '–ø–ª–∞—Å—Ç–∏–∫', type: '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π' },
      tags: ['–¥—é–±–µ–ª—å', '–∫—Ä–µ–ø–µ–∂', '10√ó100'],
      price: '12.50',
      costPrice: '8.90',
      normStock: 5000
    }
  ];

  for (const product of products) {
    const [newProduct] = await db.insert(schema.products).values(product).returning().onConflictDoNothing();
    
    if (newProduct) {
      // Create stock record
      await db.insert(schema.stock).values({
        productId: newProduct.id,
        currentStock: Math.floor(Math.random() * 200) + 50, // Random stock 50-250
        reservedStock: Math.floor(Math.random() * 20) // Random reserved 0-20
      }).onConflictDoNothing();
    }
  }

  console.log('‚úÖ Products seeded successfully');
};

const main = async () => {
  try {
    console.log('üöÄ Starting database seeding...');
    
    await seedUsers();
    await seedSurfaces();
    await seedLogos();
    await seedMaterials();
    await seedCategories(); 
    await seedProducts();
    
    console.log('‚úÖ Database seeding completed successfully!');
    console.log('');
    console.log('üîë Test users created:');
    console.log('  director/123456  - –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º');
    console.log('  manager1/123456  - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º');
    console.log('  production1/123456 - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞');
    console.log('  warehouse1/123456  - –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–ª–∞–¥–∞');
    console.log('');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  }
};

main(); 