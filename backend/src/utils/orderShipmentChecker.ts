import { db, schema } from '../db';
import { eq, and, sql } from 'drizzle-orm';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –æ—Ç–≥—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑
 * @param orderId - ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns Promise<boolean> - true –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≥—Ä—É–∂–µ–Ω
 */
export async function isOrderFullyShipped(orderId: number): Promise<boolean> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –µ–≥–æ —Ç–æ–≤–∞—Ä–∞–º–∏
    const order = await db.query.orders.findFirst({
      where: eq(schema.orders.id, orderId),
      with: {
        items: {
          with: {
            product: true
          }
        }
      }
    });

    if (!order || order.status === 'completed') {
      return true; // –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ shipment_orders
    const completedShipments = await db.query.shipments.findMany({
      where: and(
        eq(schema.shipments.status, 'completed'),
        sql`EXISTS (
          SELECT 1 FROM shipment_orders so 
          WHERE so.shipment_id = ${schema.shipments.id} 
          AND so.order_id = ${orderId}
        )`
      ),
      with: {
        items: {
          with: {
            product: true
          }
        }
      }
    });

    // –°—á–∏—Ç–∞–µ–º –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
    const shippedQuantities: Record<number, number> = {};
    
    for (const shipment of completedShipments) {
      for (const item of shipment.items || []) {
        const productId = item.productId;
        const shippedQty = item.actualQuantity || item.plannedQuantity || 0;
        shippedQuantities[productId] = (shippedQuantities[productId] || 0) + shippedQty;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º - –æ—Ç–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    for (const orderItem of order.items || []) {
      const requiredQty = orderItem.quantity;
      const shippedQty = shippedQuantities[orderItem.productId] || 0;
      
      if (shippedQty < requiredQty) {
        return false; // –ù–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã
      }
    }

    return true; // –í—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
    return false;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–û—Ç–≥—Ä—É–∂–µ–Ω" –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≥—Ä—É–∂–µ–Ω
 * @param orderId - ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise<boolean> - true –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω
 */
export async function updateOrderStatusIfFullyShipped(orderId: number, userId: number): Promise<boolean> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –æ—Ç–≥—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑
    const isFullyShipped = await isOrderFullyShipped(orderId);
    
    if (!isFullyShipped) {
      return false; // –ó–∞–∫–∞–∑ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≥—Ä—É–∂–µ–Ω
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const order = await db.query.orders.findFirst({
      where: eq(schema.orders.id, orderId)
    });

    if (!order || order.status === 'completed') {
      return false; // –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–û—Ç–≥—Ä—É–∂–µ–Ω"
    await db.update(schema.orders)
      .set({
        status: 'completed',
        updatedAt: new Date()
      })
      .where(eq(schema.orders.id, orderId));

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    await db.insert(schema.auditLog).values({
      tableName: 'orders',
      recordId: orderId,
      operation: 'UPDATE',
      oldValues: { status: order.status },
      newValues: { 
        status: 'completed',
        reason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã'
      },
      userId
    });

    console.log(`üì¶ –ó–∞–∫–∞–∑ ${order.orderNumber} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–û—Ç–≥—Ä—É–∂–µ–Ω" - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã`);
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≥—Ä—É–∂–µ–Ω—ã
 * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns Promise<number> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
 */
export async function updateAllFullyShippedOrders(userId: number): Promise<number> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'ready'
    const readyOrders = await db.query.orders.findMany({
      where: eq(schema.orders.status, 'ready'),
      columns: { id: true, orderNumber: true }
    });

    let updatedCount = 0;
    
    for (const order of readyOrders) {
      const wasUpdated = await updateOrderStatusIfFullyShipped(order.id, userId);
      if (wasUpdated) {
        updatedCount++;
      }
    }

    console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤: ${updatedCount}`);
    return updatedCount;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:', error);
    return 0;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –∑–∞–∫–∞–∑ –∫ –ª—é–±–æ–π –æ—Ç–≥—Ä—É–∑–∫–µ (–ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
 * @param orderId - ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns Promise<boolean> - true –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ—Ç–≥—Ä—É–∑–∫–µ
 */
export async function isOrderLinkedToShipment(orderId: number): Promise<boolean> {
  try {
    const shipmentOrder = await db.query.shipmentOrders.findFirst({
      where: eq(schema.shipmentOrders.orderId, orderId)
    });

    return !!shipmentOrder;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∏ –∑–∞–∫–∞–∑-–æ—Ç–≥—Ä—É–∑–∫–∞:', error);
    return false;
  }
}