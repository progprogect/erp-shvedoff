/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
 * –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–≤—Ä–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π: [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–†–∞–∑–º–µ—Ä—ã] - [–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏] - [–õ–æ–≥–æ] - [–ù–∏–∑] - [–ö—Ä–∞—è] - [–î–æ–ø.—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏] - [–°–æ—Ä—Ç]
 * –ü—Ä–∏–º–µ—Ä: "–õ–µ–∂–∞–∫ - 1200x800x12 - –ß–µ—à - GEA - 3–ö–æ—Ä - –ö—Ä–∞–π4—Å—Ç - –°–ë–æ—Ä—Ç,–ù–µ–£—Å–∏–ª - 1–°"
 */

export interface ProductData {
  name: string;
  dimensions: {
    length?: number;
    width?: number;
    thickness?: number;
  };
  material?: {
    name: string;
  };
  pressType?: 'not_selected' | 'ukrainian' | 'chinese';
  logo?: {
    name: string;
  };
  surfaces?: Array<{
    name: string;
  }>;
  borderType?: 'with_border' | 'without_border';
  carpetEdgeType?: string;
  carpetEdgeSides?: number;
  carpetEdgeStrength?: string;
  puzzleType?: {
    name?: string;
  };
  bottomType?: {
    code?: string;
  };
  grade?: 'usual' | 'grade_2' | 'telyatnik' | 'liber';
}

export interface RollCoveringData {
  name: string;
  dimensions?: {
    length?: number;
    width?: number;
    thickness?: number;
  };
  surfaces?: Array<{
    name: string;
  }>;
  logo?: {
    name: string;
  };
  bottomType?: {
    code?: string;
  };
  composition?: Array<{
    carpetId: number;
    quantity: number;
    sortOrder: number;
  }>;
  grade?: string; // üî• –ù–û–í–û–ï: —Å–æ—Ä—Ç —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ–≤—Ä–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π
 * –§–æ—Ä–º–∞—Ç: [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–†–∞–∑–º–µ—Ä—ã] - [–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏] - [–õ–æ–≥–æ] - [–ù–∏–∑] - [–ö—Ä–∞—è] - [–î–æ–ø.—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏] - [–°–æ—Ä—Ç]
 */
export function generateArticle(product: ProductData): string {
  const parts: string[] = [];

  // 1. –ù–ê–ó–í–ê–ù–ò–ï (–∫—Ä–∞—Ç–∫–æ–µ)
  const namePart = formatName(product.name);
  if (namePart) parts.push(namePart);

  // 2. –†–ê–ó–ú–ï–†–´ (–¥–ª–∏–Ω–∞ x —à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞)
  const dimensionsPart = formatDimensions(product.dimensions);
  if (dimensionsPart) parts.push(dimensionsPart);

  // 3. –ü–û–í–ï–†–•–ù–û–°–¢–ò (–∫—Ä–∞—Ç–∫–∏–µ –∫–æ–¥—ã —á–µ—Ä–µ–∑ +)
  const surfacesPart = formatSurfaces(product.surfaces);
  if (surfacesPart) parts.push(surfacesPart);

  // 4. –õ–û–ì–û–¢–ò–ü (–∫—Ä–∞—Ç–∫–∏–π –∫–æ–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
  const logoPart = formatLogo(product.logo?.name);
  if (logoPart) parts.push(logoPart);

  // 5. –ù–ò–ó –ö–û–í–†–ê (–∫—Ä–∞—Ç–∫–∏–π –∫–æ–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
  const bottomPart = formatBottom(product.bottomType?.code);
  if (bottomPart) parts.push(bottomPart);

  // 6. –ö–†–ê–Ø (—Ç–∏–ø + —Å—Ç–æ—Ä–æ–Ω—ã + –ø–∞–∑–ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ª–∏—Ç–æ–π)
  const edgePart = formatEdge(
    product.carpetEdgeType,
    product.carpetEdgeSides,
    product.carpetEdgeStrength,
    product.puzzleType
  );
  if (edgePart) parts.push(edgePart);

  // 7. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (–±–æ—Ä—Ç, —É—Å–∏–ª–µ–Ω–∏–µ, –ø—Ä–µ—Å—Å, –º–∞—Ç–µ—Ä–∏–∞–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
  const additionalPart = formatAdditionalCharacteristics(
    product.borderType,
    product.carpetEdgeStrength,
    product.pressType,
    product.material?.name
  );
  if (additionalPart) parts.push(additionalPart);

  // 8. –°–û–†–¢ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–±—ã—á–Ω—ã–π)
  const gradePart = formatGrade(product.grade);
  if (gradePart) parts.push(gradePart);

  return parts.join(' - ');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
 */
function formatName(name: string): string {
  if (!name) return '';

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è "–∫–æ—Ä–æ–≤–∫–∞"
  const lowerName = name.toLowerCase();
  
  // "–∫–æ—Ä–æ–≤–∫–∞" ‚Üí "1–ö–û–†"
  if (lowerName.includes('–∫–æ—Ä–æ–≤–∫–∞') && !lowerName.match(/\d/)) {
    return '1–ö–û–†';
  }
  
  // "1 –∫–æ—Ä–æ–≤–∫–∞" ‚Üí "1–ö–û–†"
  const match1 = lowerName.match(/(\d+)\s*–∫–æ—Ä–æ–≤–∫[–∞-—è]*/);
  if (match1) {
    return `${match1[1]}–ö–û–†`;
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
  const firstWord = name.split(' ')[0];
  return firstWord.charAt(0).toUpperCase() + firstWord.slice(1).toLowerCase();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã: LENGTH x WIDTH x HEIGHT
 */
function formatDimensions(dimensions: { length?: number; width?: number; thickness?: number; height?: number }): string {
  if (!dimensions) return '';

  const { length, width, thickness, height } = dimensions;
  const parts = [];

  if (length) parts.push(length.toString());
  if (width) parts.push(width.toString());
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º height –∏–ª–∏ thickness (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const heightValue = height || thickness;
  if (heightValue) parts.push(heightValue.toString());

  return parts.length > 0 ? parts.join('x') : '';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª (—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)
 */
function formatMaterial(material?: string): string {
  if (!material) return '';

  // –ú–∞–ø–∏–Ω–≥ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
  const materialMap: Record<string, string> = {
    '—Ä–µ–∑–∏–Ω–∞': '–†–ï–ó',
    '–∫–∞—É—á—É–∫': '–ö–ê–£',
    'gea': 'GEA',
    '–¥—Ä–æ–±–ª–µ–Ω–∫–∞': '–î–†–û–ë',
    '–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä': '–ü–†–û–¢',
    // –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };

  const normalizedMaterial = material.toLowerCase();
  return materialMap[normalizedMaterial] || material.toUpperCase();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –ø—Ä–µ—Å—Å–∞
 */
function formatPress(pressType?: string): string {
  const pressMap: Record<string, string> = {
    'ukrainian': '–£–ö–†',
    'chinese': '–ö–ò–¢',
    'not_selected': '' // –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∞—Ä—Ç–∏–∫—É–ª
  };

  return pressMap[pressType || 'not_selected'] || '';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ +)
 */
function formatSurfaces(surfaces?: Array<{ name: string }>): string {
  if (!surfaces || surfaces.length === 0) return '';

  const surfaceMap: Record<string, string> = {
    '—á–µ—à—É–π–∫–∏': '–ß–µ—à',
    '—á–µ—Ä—Ç–æ—á–∫–∏': '–ß–µ—Ä—Ç',
    '–≥–ª–∞–¥–∫–∞—è': '–ì–ª–∞–¥',
    '1 –∫–æ—Ä–æ–≤–∫–∞': '1–ö–æ—Ä',
    '3 –∫–æ—Ä–æ–≤–∫–∏': '3–ö–æ—Ä',
    '—á–µ—à—É–π–∫–∞ —Å –ª–æ–≥–æ': '–ß–µ—à–õ–æ–≥–æ'
  };

  const formattedSurfaces = surfaces.map(surface => {
    const normalized = surface.name.toLowerCase();
    return surfaceMap[normalized] || surface.name;
  });

  return formattedSurfaces.join('+');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–æ—Ç–∏–ø
 */
function formatLogo(logoName?: string): string {
  if (!logoName) return '';

  const logoMap: Record<string, string> = {
    'gea': 'GEA',
    'maximilk': 'Max', 
    'veles': 'VEL',
    '–∞–≥—Ä–æ—Ç–µ–∫': '–ê–≥—Ä',
    '–∞—Ä–Ω—Ç—å–µ–Ω': '–ê—Ä–Ω'
  };

  const normalized = logoName.toLowerCase().trim();
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (logoMap[normalized]) {
    return logoMap[normalized];
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç)
  for (const [key, value] of Object.entries(logoMap)) {
    if (normalized.includes(key) || key.includes(normalized)) {
      return value;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  // –î–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞, –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö - –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ
  if (/[–∞-—è—ë]/i.test(logoName)) {
    return logoName.slice(0, 3).toUpperCase();
  } else {
    return logoName.length <= 4 ? logoName.toUpperCase() : logoName.slice(0, 4).toUpperCase();
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ—Ä—Ç
 */
function formatBorder(borderType?: string): string {
  return borderType === 'with_border' ? '–°–ë–æ—Ä—Ç' : '';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–±–æ—Ä—Ç, —É—Å–∏–ª–µ–Ω–∏–µ, –ø—Ä–µ—Å—Å, –º–∞—Ç–µ—Ä–∏–∞–ª)
 */
function formatAdditionalCharacteristics(
  borderType?: string,
  edgeStrength?: string,
  pressType?: string,
  material?: string
): string {
  const characteristics: string[] = [];

  // –ë–æ—Ä—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å –±–æ—Ä—Ç–æ–º)
  if (borderType === 'with_border') {
    characteristics.push('–°–ë–æ—Ä—Ç');
  }

  // –£—Å–∏–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —É—Å–∏–ª–µ–Ω–Ω—ã–π)
  if (edgeStrength === 'weak') {
    characteristics.push('–ù–µ–£—Å–∏–ª');
  }

  // –ü—Ä–µ—Å—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
  if (pressType && pressType !== 'not_selected') {
    const pressMap: Record<string, string> = {
      'ukrainian': '–£–∫—Ä–ü—Ä–µ—Å—Å',
      'chinese': '–ö–∏—Ç–ü—Ä–µ—Å—Å'
    };
    const pressCode = pressMap[pressType];
    if (pressCode) characteristics.push(pressCode);
  }

  // –ú–∞—Ç–µ—Ä–∏–∞–ª (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
  if (material) {
    const materialMap: Record<string, string> = {
      '–¥—Ä–æ–±–ª–µ–Ω–∫–∞': '–î—Ä–æ–±',
      '–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä': '–ü—Ä–æ—Ç'
    };
    const normalizedMaterial = material.toLowerCase();
    const materialCode = materialMap[normalizedMaterial] || material;
    characteristics.push(materialCode);
  }

  return characteristics.length > 0 ? characteristics.join(',') : '';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞–π –∫–æ–≤—Ä–∞
 */
function formatEdge(
  edgeType?: string,
  sides?: number,
  strength?: string,
  puzzleType?: { name?: string }
): string {
  if (!edgeType || edgeType === 'straight_cut') {
    // –õ–∏—Ç–æ–π –∫—Ä–∞–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∞—Ä—Ç–∏–∫—É–ª–µ
    return '';
  }

  const parts = [];

  // –¢–∏–ø –∫—Ä–∞—è
  const edgeMap: Record<string, string> = {
    'straight_cut': '', // –õ–∏—Ç–æ–π - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    'direct_cut': '–ü—Ä—è–º–†–µ–∑',
    'puzzle': '–ü–∞–∑–ª',
    'sub_puzzle': '–ü–æ–¥–ø–∞–∑–ª',
    'cast_puzzle': '–õ–∏—Ç–ü–∞–∑–ª',
    // Backward compatibility for old enum values
    'podpuzzle': '–ü–æ–¥–ø–∞–∑–ª',
    'litoy_puzzle': '–õ–∏—Ç–ü–∞–∑–ª'
  };

  const edgePrefix = edgeMap[edgeType] || edgeType;
  if (edgePrefix) parts.push(edgePrefix);

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω (–¥–ª—è –≤—Å–µ—Ö –∫—Ä–∞–µ–≤ –∫—Ä–æ–º–µ –ª–∏—Ç–æ–≥–æ)
  if (sides && edgeType !== 'straight_cut') {
    parts.push(`${sides}—Å—Ç`);
  }

  // –î–ª—è —Ç–∏–ø–∞ "–ü–∞–∑–ª" –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –ø–∞–∑–ª–∞
  if (edgeType === 'puzzle' && puzzleType?.name) {
    const puzzleMap: Record<string, string> = {
      '—Å—Ç–∞—Ä—ã–π': '–°—Ç–∞—Ä',
      '–Ω–æ–≤—ã–π': '–ù–æ–≤'
    };
    const puzzleName = puzzleType.name.toLowerCase();
    const puzzleSuffix = puzzleMap[puzzleName] || puzzleType.name;
    parts.push(puzzleSuffix);
  }

  return parts.join('');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∏–∑ –∫–æ–≤—Ä–∞
 */
function formatBottom(bottomCode?: string): string {
  if (!bottomCode || bottomCode.trim() === '') return '';
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥—ã –≤ –∫—Ä–∞—Ç–∫–∏–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
  const codeMap: Record<string, string> = {
    'not_selected': '', // –ù–µ –≤—ã–±—Ä–∞–Ω–æ - –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∞—Ä—Ç–∏–∫—É–ª–µ
    'spike_0': '–®–∏–ø0', // –®–∏–ø-0 - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ –®–∏–ø0
    'spike_1': '–®–∏–ø1',
    'spike_2': '–®–∏–ø2',
    'spike_3': '–®–∏–ø3',
    'spike_4': '–®–∏–ø4',
    'spike_5': '–®–∏–ø5',
    'spike_7': '–®–∏–ø7',
    'spike_11': '–®–∏–ø11'
  };
  
  const normalizedCode = bottomCode.toLowerCase().trim();
  return codeMap[normalizedCode] || '';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Ä—Ç —Ç–æ–≤–∞—Ä–∞
 */
function formatGrade(grade?: string): string {
  const gradeMap: Record<string, string> = {
    'usual': '', // –û–±—ã—á–Ω—ã–π –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –∞—Ä—Ç–∏–∫—É–ª–µ
    'grade_2': '2–°–û–†–¢',
    'telyatnik': '–¢–µ–ª—è—Ç',
    'liber': '–õ–∏–±–µ—Ä'
  };

  return gradeMap[grade || 'usual'] || '';
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ä—Ç–∏–∫—É–ª–∞
 */
export function validateProductData(product: ProductData): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];

  if (!product.name?.trim()) {
    errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
  }

  if (!product.dimensions?.length || !product.dimensions?.width) {
    errors.push('–î–ª–∏–Ω–∞ –∏ —à–∏—Ä–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
  }

  return {
    isValid: errors.length === 0,
    errors
  };
}

/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ç–∏–∫—É–ª–∞ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)
 */
export function previewArticle(product: Partial<ProductData>): string {
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const defaultProduct: ProductData = {
    name: product.name || '–¢–û–í–ê–†',
    dimensions: product.dimensions || { length: 0, width: 0, thickness: 0 },
    material: product.material,
    pressType: product.pressType || 'not_selected',
    surfaces: product.surfaces || [],
    borderType: product.borderType || 'without_border',
    carpetEdgeType: product.carpetEdgeType || 'straight_cut',
    carpetEdgeSides: product.carpetEdgeSides || 1,
    carpetEdgeStrength: product.carpetEdgeStrength || 'normal',
    puzzleType: product.puzzleType,
    bottomType: product.bottomType,
    grade: product.grade || 'usual'
  };

  return generateArticle(defaultProduct);
}

// ==================== –†–£–õ–û–ù–ù–´–ï –ü–û–ö–†–´–¢–ò–Ø ====================

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
 * –§–æ—Ä–º–∞—Ç: [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–†–∞–∑–º–µ—Ä—ã] - [–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏] - [–õ–æ–≥–æ—Ç–∏–ø] - [–ù–∏–∑] - [–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≤—Ä–æ–≤] - [–°–æ—Ä—Ç]
 * –ü—Ä–∏–º–µ—Ä: "–ü–æ–∫—Ä—ã—Ç–∏–µ - 1500x10000x3 - –ì–ª–∞–¥ - GEA - 0–®–∏–ø - 2–ö–æ–≤—Ä - 2–°–û–†–¢"
 */
export function generateRollCoveringArticle(productData: RollCoveringData): string {
  const parts: string[] = [];
  
  // 1. –ù–∞–∑–≤–∞–Ω–∏–µ (–∫—Ä–∞—Ç–∫–æ–µ)
  const namePart = formatRollName(productData.name);
  if (namePart) parts.push(namePart);
  
  // 2. –†–∞–∑–º–µ—Ä—ã: {—à–∏—Ä–∏–Ω–∞}x{–¥–ª–∏–Ω–∞}x{—Ç–æ–ª—â–∏–Ω–∞}
  const dimensionsPart = formatRollDimensions(productData.dimensions);
  if (dimensionsPart) parts.push(dimensionsPart);
  
  // 3. –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (–∫—Ä–∞—Ç–∫–∏–µ –∫–æ–¥—ã —á–µ—Ä–µ–∑ +)
  const surfaceCode = formatRollSurfaces(productData.surfaces);
  if (surfaceCode) parts.push(surfaceCode);
  
  // 4. –õ–û–ì–û–¢–ò–ü (–∫—Ä–∞—Ç–∫–∏–π –∫–æ–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
  const logoPart = formatLogo(productData.logo?.name);
  if (logoPart) parts.push(logoPart);
  
  // 5. –ù–∏–∑ –∫–æ–≤—Ä–∞ (–∫—Ä–∞—Ç–∫–∏–µ –∫–æ–¥—ã)
  const bottomCode = formatRollBottom(productData.bottomType);
  if (bottomCode) parts.push(bottomCode);
  
  // 6. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≤—Ä–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ
  const compositionCode = formatRollComposition(productData.composition);
  if (compositionCode) parts.push(compositionCode);
  
  // 7. –°–û–†–¢ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–±—ã—á–Ω—ã–π) - üî• –ù–û–í–û–ï
  const gradePart = formatGrade(productData.grade);
  if (gradePart) parts.push(gradePart);
  
  return parts.join(' - ');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
 */
function formatRollName(name: string): string {
  if (!name) return '';

  // –î–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  const firstWord = name.split(' ')[0];
  
  // –°–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
  const rollMappings: Record<string, string> = {
    '—Ä—É–ª–æ–Ω–Ω–æ–µ': '–ü–æ–∫—Ä—ã—Ç–∏–µ',
    '–ø–æ–∫—Ä—ã—Ç–∏–µ': '–ü–æ–∫—Ä—ã—Ç–∏–µ',
    '–ª–∏–Ω–æ–ª–µ—É–º': '–õ–∏–Ω–æ–ª–µ—É–º',
    '–∫–æ–≤—Ä–æ–ª–∏–Ω': '–ö–æ–≤—Ä–æ–ª–∏–Ω',
    '–ø–∞—Ä–∫–µ—Ç': '–ü–∞—Ä–∫–µ—Ç',
    '–ª–∞–º–∏–Ω–∞—Ç': '–õ–∞–º–∏–Ω–∞—Ç',
    '–∞–Ω—Ç–∏—Å–∫–æ–ª—å–∑': '–ê–Ω—Ç–∏—Å–∫–æ–ª—å–∑',
    '—Ä–µ–∑–∏–Ω–æ–≤–æ–µ': '–†–µ–∑–∏–Ω–æ–≤–æ–µ'
  };

  const normalized = firstWord.toLowerCase();
  return rollMappings[normalized] || firstWord.charAt(0).toUpperCase() + firstWord.slice(1).toLowerCase();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
 */
function formatRollDimensions(dimensions?: { length?: number; width?: number; thickness?: number }): string {
  if (!dimensions) return '';
  
  const { length = 0, width = 0, thickness = 0 } = dimensions;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –±–æ–ª—å—à–µ 0
  if (length > 0 || width > 0 || thickness > 0) {
    return `${length}x${width}x${thickness}`;
  }
  
  return '';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ–¥—ã —á—Ç–æ –∏ –¥–ª—è –∫–æ–≤—Ä–æ–≤)
 */
function formatRollSurfaces(surfaces?: Array<{ name: string }>): string {
  if (!surfaces || surfaces.length === 0) return '';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫—Ä–∞—Ç–∫–∏–µ –∫–æ–¥—ã —á—Ç–æ –∏ –¥–ª—è –∫–æ–≤—Ä–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π
  const surfaceMappings: { [key: string]: string } = {
    '—á–µ—à—É–π–∫–∏': '–ß–µ—à',
    '—á–µ—Ä—Ç–æ—á–∫–∏': '–ß–µ—Ä—Ç',
    '–≥–ª–∞–¥–∫–∞—è': '–ì–ª–∞–¥',
    '1 –∫–æ—Ä–æ–≤–∫–∞': '1–ö–æ—Ä',
    '3 –∫–æ—Ä–æ–≤–∫–∏': '3–ö–æ—Ä',
    '—á–µ—à—É–π–∫–∞ —Å –ª–æ–≥–æ': '–ß–µ—à–õ–æ–≥–æ'
  };
  
  const formattedSurfaces = surfaces.map(surface => {
    const normalized = surface.name.toLowerCase().trim();
    return surfaceMappings[normalized] || surface.name;
  });
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ + (–∫–∞–∫ —É –∫–æ–≤—Ä–æ–≤)
  return formattedSurfaces.join('+');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∏–∑ –∫–æ–≤—Ä–∞ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–≤—Ä–æ–≤—ã–º –∏–∑–¥–µ–ª–∏—è–º)
 */
function formatRollBottom(bottomType?: { code?: string }): string {
  if (!bottomType?.code) return '';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –¥–ª—è –∫–æ–≤—Ä–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π
  return formatBottom(bottomType.code);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞—Ä—Ç–∏–∫—É–ª–µ
 * –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ .00, –¥—Ä–æ–±–Ω—ã–µ —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
 */
function formatQuantityForArticle(value: number): string {
  if (value === 0) return '0';
  
  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const rounded = Math.round(value * 100) / 100;
  
  // –ï—Å–ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
  if (rounded % 1 === 0) {
    return rounded.toString();
  }
  
  // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏)
  return rounded.toFixed(2).replace(/\.?0+$/, '');
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–∞–≤ —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≤—Ä–æ–≤)
 * üî• –û–ë–ù–û–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
function formatRollComposition(composition?: Array<{ carpetId: number; quantity: number; sortOrder: number }>): string {
  if (!composition || composition.length === 0) return '';
  
  // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≤—Ä–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ
  const totalQuantity = composition.reduce((sum, item) => sum + item.quantity, 0);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≤—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "5–ö–æ–≤—Ä" –∏–ª–∏ "1.5–ö–æ–≤—Ä"
  return totalQuantity > 0 ? `${formatQuantityForArticle(totalQuantity)}–ö–æ–≤—Ä` : '';
}



/**
 * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
 */
export function previewRollCoveringArticle(productData: Partial<RollCoveringData>): string {
  const defaultData: RollCoveringData = {
    name: productData.name || '',
    dimensions: {
      width: productData.dimensions?.width || 0,
      length: productData.dimensions?.length || 0,
      thickness: productData.dimensions?.thickness || 0
    },
    surfaces: productData.surfaces,
    logo: productData.logo, // üî• –ù–û–í–û–ï: –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
    bottomType: productData.bottomType,
    composition: productData.composition || []
  };
  
  return generateRollCoveringArticle(defaultData);
}
