import { db } from '../db/index';
import { stock, productionTasks, productionQueue, orderItems, orders } from '../db/schema';
import { eq, and, inArray, sql } from 'drizzle-orm';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export type OrderStatus = 'new' | 'confirmed' | 'in_production' | 'ready' | 'completed' | 'cancelled';

export interface OrderItemAvailability {
  product_id: number;
  required_quantity: number;
  available_quantity: number;
  in_production_quantity: number;
  shortage: number;
  status: 'available' | 'partially_available' | 'needs_production';
}

export interface OrderAvailabilityAnalysis {
  order_id: number;
  status: OrderStatus;
  items: OrderItemAvailability[];
  total_items: number;
  available_items: number;
  partially_available_items: number;
  needs_production_items: number;
  can_be_fulfilled: boolean;
  should_suggest_production: boolean;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
 */
export async function analyzeOrderAvailability(orderId: number): Promise<OrderAvailabilityAnalysis> {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
  const orderItemsData = await db
    .select({
      product_id: orderItems.productId,
      quantity: orderItems.quantity,
      reserved_quantity: orderItems.reservedQuantity
    })
    .from(orderItems)
    .where(eq(orderItems.orderId, orderId));

  if (orderItemsData.length === 0) {
    throw new Error('–ó–∞–∫–∞–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤');
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const currentOrder = await db.query.orders.findFirst({
    where: eq(orders.id, orderId),
    columns: { status: true }
  });

  const currentStatus = currentOrder?.status || 'new';

  const productIds = orderItemsData.map(item => item.product_id);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
  const stockData = await db
    .select({
      product_id: stock.productId,
      current_stock: stock.currentStock
    })
    .from(stock)
    .where(inArray(stock.productId, productIds));

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑)
  const reservedData = await db
    .select({
      product_id: orderItems.productId,
      total_reserved: sql<number>`COALESCE(SUM(${orderItems.reservedQuantity}), 0)`.as('total_reserved')
    })
    .from(orderItems)
    .innerJoin(orders, eq(orderItems.orderId, orders.id))
    .where(
      and(
        inArray(orderItems.productId, productIds),
        inArray(orders.status, ['new', 'confirmed', 'in_production']),
        sql`${orders.id} != ${orderId}` // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      )
    )
    .groupBy(orderItems.productId);

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ (—Ç–æ–ª—å–∫–æ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π)
  const productionTasksData = await db
    .select({
      product_id: productionTasks.productId,
      total_in_production: sql<number>`
        COALESCE(SUM(
          CASE 
            WHEN ${productionTasks.status} IN ('pending', 'in_progress', 'paused') 
            THEN ${productionTasks.requestedQuantity}
            ELSE 0
          END
        ), 0)
      `.as('total_in_production')
    })
    .from(productionTasks)
    .where(
      and(
        inArray(productionTasks.productId, productIds),
        inArray(productionTasks.status, ['pending', 'in_progress', 'paused'])
      )
    )
    .groupBy(productionTasks.productId);

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const stockMap = new Map(stockData.map(s => [s.product_id, { 
    currentStock: s.current_stock
  }]));
  const reservedMap = new Map(reservedData.map(r => [r.product_id, r.total_reserved]));
  const productionTasksMap = new Map(productionTasksData.map(p => [p.product_id, p.total_in_production]));

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
  const itemsAnalysis: OrderItemAvailability[] = orderItemsData.map(orderItem => {
    const stockInfo = stockMap.get(orderItem.product_id);
    const currentStock = stockInfo?.currentStock || 0;
    const totalReserved = reservedMap.get(orderItem.product_id) || 0; // –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    const reservedForThisOrder = orderItem.reserved_quantity || 0;
    const totalInProduction = productionTasksMap.get(orderItem.product_id) || 0;
    const needed = orderItem.quantity;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: —Ä–µ–∑–µ—Ä–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
    if (reservedForThisOrder > needed) {
      console.warn(`‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ä–µ–∑–µ—Ä–≤ (${reservedForThisOrder}) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (${needed}) –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${orderItem.product_id} –≤ –∑–∞–∫–∞–∑–µ ${orderId}`);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
    const free_stock = currentStock - totalReserved; // –°–≤–æ–±–æ–¥–Ω—ã–π (–Ω–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –æ—Å—Ç–∞—Ç–æ–∫
    
    let itemStatus: 'available' | 'partially_available' | 'needs_production';
    let shortage: number;
    let available_quantity: number;
    
    if (reservedForThisOrder >= needed) {
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
      itemStatus = 'available';
      shortage = 0;
      available_quantity = needed;
    } else if (reservedForThisOrder + Math.max(0, free_stock) >= needed) {
      // –†–µ–∑–µ—Ä–≤ + —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–π "–≤–ø—Ä–∏—Ç—ã–∫")
      itemStatus = 'available';
      shortage = 0;
      available_quantity = needed;
    } else {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–∂–µ —Å —É—á–µ—Ç–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
      itemStatus = 'needs_production';
      shortage = needed - (reservedForThisOrder + Math.max(0, free_stock));
      available_quantity = reservedForThisOrder + Math.max(0, free_stock);
    }

    return {
      product_id: orderItem.product_id,
      required_quantity: needed,
      available_quantity,
      in_production_quantity: totalInProduction,
      shortage,
      status: itemStatus
    };
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  const availableItems = itemsAnalysis.filter(item => item.status === 'available').length;
  const partiallyAvailableItems = itemsAnalysis.filter(item => item.status === 'partially_available').length;
  const needsProductionItems = itemsAnalysis.filter(item => item.status === 'needs_production').length;

  let orderStatus: OrderStatus;
  const hasProduction = itemsAnalysis.some(item => item.in_production_quantity > 0);
  const allItemsFullyAvailable = availableItems === itemsAnalysis.length;
  const hasUnavailableItems = needsProductionItems > 0 || partiallyAvailableItems > 0;

  // –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:
  // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ï—Å–ª–∏ –í–°–ï —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã - –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)
  if (allItemsFullyAvailable) {
    // –í–°–ï —Ç–æ–≤–∞—Ä—ã –≤ –ü–û–õ–ù–û–ú –æ–±—ä–µ–º–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏
    if (currentStatus === 'confirmed' || currentStatus === 'in_production') {
      // –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ
      orderStatus = 'ready';
    } else if (currentStatus === 'ready') {
      // –ó–∞–∫–∞–∑ —É–∂–µ –≥–æ—Ç–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      orderStatus = 'ready';
    } else {
      // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
      orderStatus = 'confirmed';
    }
  } 
  // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –ù–ï–î–û—Å—Ç—É–ø–Ω—ã –ò –µ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ - –≤ —Ä–∞–±–æ—Ç–µ
  else if (hasUnavailableItems && hasProduction) {
    orderStatus = 'in_production';
  } 
  // –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –ù–ï–î–û—Å—Ç—É–ø–Ω—ã –ò –ù–ï–¢ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ - –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å
  else if (hasUnavailableItems && !hasProduction) {
    if (currentStatus === 'confirmed') {
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
      orderStatus = 'in_production';
    } else {
      // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
      orderStatus = 'new';
    }
  } 
  // –ü–†–ò–û–†–ò–¢–ï–¢ 4: –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
  else {
    orderStatus = currentStatus;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
  if (orderStatus !== currentStatus) {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderId} –∏–∑–º–µ–Ω–µ–Ω: ${getStatusLabel(currentStatus)} ‚Üí ${getStatusLabel(orderStatus)}`);
  }

  const canBeFulfilled = itemsAnalysis.every(item => 
    (item.available_quantity + item.in_production_quantity) >= item.required_quantity
  );

  const shouldSuggestProduction = hasUnavailableItems && !hasProduction;

  return {
    order_id: orderId,
    status: orderStatus,
    items: itemsAnalysis,
    total_items: itemsAnalysis.length,
    available_items: availableItems,
    partially_available_items: partiallyAvailableItems,
    needs_production_items: needsProductionItems,
    can_be_fulfilled: canBeFulfilled,
    should_suggest_production: shouldSuggestProduction
  };
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
 */
export async function updateOrderStatus(orderId: number): Promise<OrderStatus> {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const currentOrder = await db.query.orders.findFirst({
    where: eq(orders.id, orderId),
    columns: { status: true, orderNumber: true }
  });
  
  const currentStatus = currentOrder?.status || 'new';
  const orderNumber = currentOrder?.orderNumber || `#${orderId}`;
  
  const analysis = await analyzeOrderAvailability(orderId);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
  if (currentStatus !== analysis.status) {
    console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${orderNumber} –∏–∑–º–µ–Ω–µ–Ω: ${getStatusLabel(currentStatus)} ‚Üí ${getStatusLabel(analysis.status)}`);
    console.log(`   üì¶ –¢–æ–≤–∞—Ä—ã: ${analysis.available_items} –¥–æ—Å—Ç—É–ø–Ω—ã, ${analysis.needs_production_items} —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞`);
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    analysis.items.forEach(item => {
      const statusText = item.status === 'available' ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : 
                       item.status === 'needs_production' ? '—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' : '—á–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω';
      console.log(`   üéØ –¢–æ–≤–∞—Ä ${item.product_id}: ${item.required_quantity} –Ω—É–∂–Ω–æ, ${item.available_quantity} –¥–æ—Å—Ç—É–ø–Ω–æ, ${item.shortage} –¥–µ—Ñ–∏—Ü–∏—Ç - ${statusText}`);
    });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Drizzle ORM
  await db
    .update(orders)
    .set({ status: analysis.status })
    .where(eq(orders.id, orderId));

  return analysis.status;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function getStatusLabel(status: OrderStatus): string {
  const labels: Record<OrderStatus, string> = {
    'new': '–ù–æ–≤—ã–π',
    'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
    'in_production': '–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ',
    'ready': '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ',
    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
  };
  return labels[status] || status;
}

/**
 * –û—Ç–º–µ–Ω—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
 * –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω—è—é—Ç—Å—è
 */
export async function cancelUnnecessaryProductionTasks(orderId: number): Promise<{
  cancelled: number;
  tasks: any[];
}> {
  try {
    const analysis = await analyzeOrderAvailability(orderId);
    
    // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã, –æ—Ç–º–µ–Ω—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    if (analysis.status === 'ready' || analysis.status === 'confirmed') {
      const unnecessaryTasks = await db
        .select({
          id: productionTasks.id,
          productId: productionTasks.productId,
          requestedQuantity: productionTasks.requestedQuantity,
          status: productionTasks.status
        })
        .from(productionTasks)
        .where(
          and(
            eq(productionTasks.orderId, orderId),
            inArray(productionTasks.status, ['pending', 'in_progress', 'paused'])
          )
        );

      if (unnecessaryTasks.length > 0) {
        // –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        await db
          .update(productionTasks)
          .set({
            status: 'cancelled',
            notes: sql`COALESCE(${productionTasks.notes}, '') || ' | –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ: —Ç–æ–≤–∞—Ä—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã'`,
            updatedAt: new Date()
          })
          .where(
            and(
              eq(productionTasks.orderId, orderId),
              inArray(productionTasks.status, ['pending', 'in_progress', 'paused'])
            )
          );

        console.log(`üö´ –û—Ç–º–µ–Ω–µ–Ω–æ ${unnecessaryTasks.length} –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}`);
        
        return {
          cancelled: unnecessaryTasks.length,
          tasks: unnecessaryTasks
        };
      }
    }

    return { cancelled: 0, tasks: [] };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
    return { cancelled: 0, tasks: [] };
  }
}

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—á–∏—â–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
 */
export async function recalculateAllOrderStatuses(): Promise<void> {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
  const ordersData = await db
    .select({ id: orders.id })
    .from(orders)
    .where(sql`${orders.status} NOT IN ('completed', 'cancelled')`);

  for (const order of ordersData) {
    try {
      await updateOrderStatus(order.id);
      
      // –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      await cancelUnnecessaryProductionTasks(order.id);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${order.id}:`, error);
    }
  }
} 