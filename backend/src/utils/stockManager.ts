import { db, schema } from '../db';
import { eq, sql, and } from 'drizzle-orm';

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */

export interface StockInfo {
  productId: number;
  currentStock: number;
  reservedStock: number;
  availableStock: number;
  isValid: boolean;
  errors?: string[];
}

export interface StockOperation {
  productId: number;
  type: 'adjustment' | 'reservation' | 'release' | 'outgoing' | 'incoming';
  quantity: number;
  orderId?: number;
  userId: number;
  comment?: string;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function getStockInfo(productId: number): Promise<StockInfo> {
  const stockRecord = await db.query.stock.findFirst({
    where: eq(schema.stock.productId, productId),
    with: {
      product: true
    }
  });

  if (!stockRecord) {
    return {
      productId,
      currentStock: 0,
      reservedStock: 0,
      availableStock: 0,
      isValid: false,
      errors: ['Stock record not found']
    };
  }

  const availableStock = stockRecord.currentStock - stockRecord.reservedStock;
  const errors: string[] = [];

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  if (stockRecord.currentStock < 0) {
    errors.push('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫');
  }
  
  if (stockRecord.reservedStock < 0) {
    errors.push('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤');
  }
  
  if (stockRecord.reservedStock > stockRecord.currentStock) {
    errors.push('–†–µ–∑–µ—Ä–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫');
  }

  return {
    productId,
    currentStock: stockRecord.currentStock,
    reservedStock: stockRecord.reservedStock,
    availableStock,
    isValid: errors.length === 0,
    errors: errors.length > 0 ? errors : undefined
  };
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function performStockOperation(operation: StockOperation): Promise<{ success: boolean; message: string; stockInfo?: StockInfo }> {
  const { productId, type, quantity, orderId, userId, comment } = operation;

  // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
  return await db.transaction(async (tx) => {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è race conditions
    const currentStock = await tx.query.stock.findFirst({
      where: eq(schema.stock.productId, productId)
    });

    if (!currentStock) {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      await tx.insert(schema.stock).values({
        productId,
        currentStock: 0,
        reservedStock: 0,
        updatedAt: new Date()
      });
      
      return performStockOperation(operation); // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    }

    let newCurrentStock = currentStock.currentStock;
    let newReservedStock = currentStock.reservedStock;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    switch (type) {
      case 'adjustment':
        newCurrentStock = currentStock.currentStock + quantity;
        break;
        
      case 'reservation':
        if (quantity > 0) {
          const availableStock = currentStock.currentStock - currentStock.reservedStock;
          if (quantity > availableStock) {
            return {
              success: false,
              message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableStock}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è: ${quantity}`
            };
          }
          newReservedStock = currentStock.reservedStock + quantity;
        } else {
          return { success: false, message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º' };
        }
        break;
        
      case 'release':
        if (quantity > 0) {
          if (quantity > currentStock.reservedStock) {
            return {
              success: false,
              message: `–ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Ä–µ–∑–µ—Ä–≤ –±–æ–ª—å—à–µ —á–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ. –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: ${currentStock.reservedStock}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è: ${quantity}`
            };
          }
          newReservedStock = currentStock.reservedStock - quantity;
        } else {
          return { success: false, message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º' };
        }
        break;
        
      case 'outgoing':
        if (quantity > 0) {
          // –ü—Ä–∏ –æ—Ç–≥—Ä—É–∑–∫–µ —É–º–µ–Ω—å—à–∞–µ–º –∏ –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ —Ä–µ–∑–µ—Ä–≤
          if (quantity > currentStock.reservedStock) {
            return {
              success: false,
              message: `–ù–µ–ª—å–∑—è –æ—Ç–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ. –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: ${currentStock.reservedStock}, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è: ${quantity}`
            };
          }
          newCurrentStock = currentStock.currentStock - quantity;
          newReservedStock = currentStock.reservedStock - quantity;
        } else {
          return { success: false, message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º' };
        }
        break;
        
      case 'incoming':
        if (quantity > 0) {
          newCurrentStock = currentStock.currentStock + quantity;
        } else {
          return { success: false, message: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º' };
        }
        break;
        
      default:
        return { success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏' };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if (newCurrentStock < 0 && type !== 'adjustment') {
      return {
        success: false,
        message: `–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –æ—Å—Ç–∞—Ç–∫—É: ${newCurrentStock}`
      };
    }

    if (newReservedStock < 0) {
      return {
        success: false,
        message: `–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É —Ä–µ–∑–µ—Ä–≤—É: ${newReservedStock}`
      };
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ - –ü–ï–†–ï–ú–ï–©–ï–ù–û –°–Æ–î–ê!
    if (type === 'adjustment' && newReservedStock > newCurrentStock) {
      // –ü—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –æ—Å—Ç–∞—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
      const excessReserve = newReservedStock - newCurrentStock;
      newReservedStock = newCurrentStock;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ä–µ–∑–µ—Ä–≤–∞
      await tx.insert(schema.stockMovements).values({
        productId,
        movementType: 'release_reservation',
        quantity: -excessReserve,
        comment: `–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞: —Å–Ω—è—Ç–æ ${excessReserve} —à—Ç.`,
        userId
      });
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞ (–¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—Ä–æ–º–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫)
    if (newReservedStock > newCurrentStock && type !== 'adjustment') {
      return {
        success: false,
        message: `–†–µ–∑–µ—Ä–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫. –û—Å—Ç–∞—Ç–æ–∫: ${newCurrentStock}, —Ä–µ–∑–µ—Ä–≤: ${newReservedStock}`
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    await tx.update(schema.stock)
      .set({
        currentStock: newCurrentStock,
        reservedStock: newReservedStock,
        updatedAt: new Date()
      })
      .where(eq(schema.stock.productId, productId));

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    const movementType = getMovementType(type);
    const logQuantity = type === 'outgoing' ? -quantity : quantity;
    
    await tx.insert(schema.stockMovements).values({
      productId,
      movementType,
      quantity: logQuantity,
      referenceId: orderId || null,
      referenceType: orderId ? 'order' : null,
      comment: comment || `${type} operation`,
      userId
    });

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const stockInfo = await getStockInfo(productId);

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    try {
      const { recalculateOrdersForProduct } = await import('./stockDistribution');
      await recalculateOrdersForProduct(productId);
      console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId} –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
    }

    return {
      success: true,
      message: `–û–ø–µ—Ä–∞—Ü–∏—è ${type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`,
      stockInfo
    };
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
export async function validateAllStock(): Promise<{ valid: number; invalid: StockInfo[] }> {
  const allStock = await db.query.stock.findMany({
    with: {
      product: true
    }
  });

  const invalidStock: StockInfo[] = [];
  let validCount = 0;

  for (const stock of allStock) {
    const stockInfo = await getStockInfo(stock.productId);
    if (!stockInfo.isValid) {
      invalidStock.push(stockInfo);
    } else {
      validCount++;
    }
  }

  return {
    valid: validCount,
    invalid: invalidStock
  };
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
 */
export async function fixStockInconsistencies(userId: number): Promise<{ fixed: number; errors: string[] }> {
  const validation = await validateAllStock();
  const errors: string[] = [];
  let fixedCount = 0;

  for (const invalidStock of validation.invalid) {
    try {
      const { productId, currentStock, reservedStock } = invalidStock;

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      let newCurrentStock = Math.max(0, currentStock);
      let newReservedStock = Math.max(0, reservedStock);

      // –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤ –±–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤
      if (newReservedStock > newCurrentStock) {
        newReservedStock = newCurrentStock;
      }

      await db.update(schema.stock)
        .set({
          currentStock: newCurrentStock,
          reservedStock: newReservedStock,
          updatedAt: new Date()
        })
        .where(eq(schema.stock.productId, productId));

      // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      await db.insert(schema.stockMovements).values({
        productId,
        movementType: 'adjustment',
        quantity: newCurrentStock - currentStock,
        comment: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`,
        userId
      });

      if (newReservedStock !== reservedStock) {
        await db.insert(schema.stockMovements).values({
          productId,
          movementType: 'release_reservation',
          quantity: newReservedStock - reservedStock,
          comment: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞`,
          userId
        });
      }

      fixedCount++;
    } catch (error) {
      errors.push(`–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${invalidStock.productId}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  return { fixed: fixedCount, errors };
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
 */
export async function syncReservationsWithOrders(userId: number): Promise<{ synced: number; errors: string[] }> {
  const errors: string[] = [];
  let syncedCount = 0;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∑–∞–∫–∞–∑–æ–≤
    const actualReservations = await db
      .select({
        productId: schema.orderItems.productId,
        totalReserved: sql<number>`SUM(COALESCE(${schema.orderItems.reservedQuantity}, 0))`.as('totalReserved')
      })
      .from(schema.orderItems)
      .innerJoin(schema.orders, eq(schema.orderItems.orderId, schema.orders.id))
      .where(sql`${schema.orders.status} IN ('new', 'confirmed', 'in_production', 'ready')`)
      .groupBy(schema.orderItems.productId);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤—ã –≤ stock
    const currentStock = await db.query.stock.findMany();

    for (const stock of currentStock) {
      const actualReservation = actualReservations.find(r => r.productId === stock.productId);
      const shouldBeReserved = actualReservation?.totalReserved || 0;

      if (stock.reservedStock !== shouldBeReserved) {
        await db.update(schema.stock)
          .set({
            reservedStock: shouldBeReserved,
            updatedAt: new Date()
          })
          .where(eq(schema.stock.productId, stock.productId));

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        await db.insert(schema.stockMovements).values({
          productId: stock.productId,
          movementType: 'release_reservation',
          quantity: shouldBeReserved - stock.reservedStock,
          comment: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏: –±—ã–ª–æ ${stock.reservedStock}, —Å—Ç–∞–ª–æ ${shouldBeReserved}`,
          userId
        });

        syncedCount++;
      }
    }
  } catch (error) {
    errors.push(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : String(error)}`);
  }

  return { synced: syncedCount, errors };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function getMovementType(operationType: string): 'incoming' | 'outgoing' | 'cutting_out' | 'cutting_in' | 'reservation' | 'release_reservation' | 'adjustment' {
  const mapping: Record<string, 'incoming' | 'outgoing' | 'cutting_out' | 'cutting_in' | 'reservation' | 'release_reservation' | 'adjustment'> = {
    'adjustment': 'adjustment',
    'reservation': 'reservation',
    'release': 'release_reservation',
    'outgoing': 'outgoing',
    'incoming': 'incoming'
  };
  
  return mapping[operationType] || 'adjustment';
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
 */
export async function getStockStatistics(): Promise<{
  total: number;
  critical: number;
  negative: number;
  low: number;
  normal: number;
  invalidData: number;
}> {
  const validation = await validateAllStock();
  
  const stats = await db
    .select({
      total: sql<number>`COUNT(*)`.as('total'),
      critical: sql<number>`COUNT(*) FILTER (WHERE (current_stock - reserved_stock) <= 0)`.as('critical'),
      negative: sql<number>`COUNT(*) FILTER (WHERE (current_stock - reserved_stock) < 0)`.as('negative'),
      low: sql<number>`COUNT(*) FILTER (WHERE (current_stock - reserved_stock) > 0 AND (current_stock - reserved_stock) <= COALESCE((SELECT norm_stock FROM products WHERE id = stock.product_id), 0) * 0.5)`.as('low'),
      normal: sql<number>`COUNT(*) FILTER (WHERE (current_stock - reserved_stock) > COALESCE((SELECT norm_stock FROM products WHERE id = stock.product_id), 0) * 0.5)`.as('normal')
    })
    .from(schema.stock)
    .innerJoin(schema.products, eq(schema.stock.productId, schema.products.id))
    .where(eq(schema.products.isActive, true));

  return {
    total: Number(stats[0]?.total || 0),
    critical: Number(stats[0]?.critical || 0),
    negative: Number(stats[0]?.negative || 0),
    low: Number(stats[0]?.low || 0),
    normal: Number(stats[0]?.normal || 0),
    invalidData: validation.invalid.length
  };
} 