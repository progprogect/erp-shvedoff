import { db, schema } from '../db';
import { eq, and, sql, inArray, desc, asc } from 'drizzle-orm';
import { updateOrderStatus } from './orderStatusCalculator';

/**
 * –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ –¥–∞—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
 */
export async function distributeNewStockToOrders(productId: number, newStock: number): Promise<{
  distributed: number;
  remaining: number;
  ordersUpdated: number[];
}> {
  try {
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${newStock} —à—Ç —Ç–æ–≤–∞—Ä–∞ ${productId}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    const waitingOrders = await db.query.orderItems.findMany({
      where: and(
        eq(schema.orderItems.productId, productId),
        sql`${schema.orderItems.quantity} > ${schema.orderItems.reservedQuantity}` // –ï—Å—Ç—å –Ω–µ–¥–æ–±–æ—Ä
      ),
      with: {
        order: {
          columns: {
            id: true,
            orderNumber: true,
            deliveryDate: true,
            priority: true,
            createdAt: true
          }
        }
      }
    });

    if (waitingOrders.length === 0) {
      console.log(`‚ÑπÔ∏è –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä ${productId}`);
      return { distributed: 0, remaining: newStock, ordersUpdated: [] };
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å—Ç–∞–≤–∫–∏ (–±–ª–∏–∂–∞–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏), –∑–∞—Ç–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const sortedOrders = waitingOrders.sort((a, b) => {
      const aDelivery = a.order.deliveryDate;
      const bDelivery = b.order.deliveryDate;
      
      // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –µ—Å—Ç—å –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–µ–π
      if (aDelivery && bDelivery) {
        const dateDiff = new Date(aDelivery).getTime() - new Date(bDelivery).getTime();
        if (dateDiff !== 0) return dateDiff;
      }
      
      // –ï—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ –µ—Å—Ç—å –¥–∞—Ç–∞, –∞ —É –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–º—É, —É –∫–æ–≥–æ –µ—Å—Ç—å
      if (aDelivery && !bDelivery) return -1;
      if (!aDelivery && bDelivery) return 1;
      
      // –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –Ω–µ—Ç –¥–∞—Ç—ã –∏–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const priorityOrder = { urgent: 5, high: 4, normal: 3, low: 2 };
      const aPriority = priorityOrder[a.order.priority as keyof typeof priorityOrder] || 0;
      const bPriority = priorityOrder[b.order.priority as keyof typeof priorityOrder] || 0;
      
      if (aPriority !== bPriority) return bPriority - aPriority;
      
      // –í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å - –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Ä–∞–Ω—å—à–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      return new Date(a.order.createdAt || 0).getTime() - new Date(b.order.createdAt || 0).getTime();
    });

    let remainingStock = newStock;
    let totalDistributed = 0;
    const ordersUpdated: number[] = [];

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sortedOrders.length} –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä ${productId}`);

    for (const orderItem of sortedOrders) {
      if (remainingStock <= 0) break;
      
      const shortage = orderItem.quantity - (orderItem.reservedQuantity || 0);
      const canReserve = Math.min(shortage, remainingStock);
      
      if (canReserve > 0) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        await db.update(schema.orderItems)
          .set({ 
            reservedQuantity: (orderItem.reservedQuantity || 0) + canReserve
          })
          .where(eq(schema.orderItems.id, orderItem.id));
        
        // –í–ê–ñ–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–∑–µ—Ä–≤ —Å–∫–ª–∞–¥–∞
        await db.update(schema.stock)
          .set({
            reservedStock: sql`${schema.stock.reservedStock} + ${canReserve}`,
            updatedAt: new Date()
          })
          .where(eq(schema.stock.productId, productId));
        
        remainingStock -= canReserve;
        totalDistributed += canReserve;
        ordersUpdated.push(orderItem.orderId);
        
        console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderItem.order.orderNumber}: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${canReserve} —à—Ç (–æ—Å—Ç–∞–ª–æ—Å—å ${remainingStock})`);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        try {
          await updateOrderStatus(orderItem.orderId);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderItem.orderId}:`, error);
        }
      }
    }

    console.log(`üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${totalDistributed} —à—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, ${remainingStock} —à—Ç –æ—Å—Ç–∞–ª–æ—Å—å`);

    return {
      distributed: totalDistributed,
      remaining: remainingStock,
      ordersUpdated
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error);
    return { distributed: 0, remaining: newStock, ordersUpdated: [] };
  }
}

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
 */
export async function recalculateOrdersForProduct(productId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
    const ordersWithProduct = await db
      .select({ orderId: schema.orderItems.orderId })
      .from(schema.orderItems)
      .innerJoin(schema.orders, eq(schema.orderItems.orderId, schema.orders.id))
      .where(
        and(
          eq(schema.orderItems.productId, productId),
          inArray(schema.orders.status, ['new', 'confirmed', 'in_production', 'ready'])
        )
      )
      .groupBy(schema.orderItems.orderId);

    console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã ${ordersWithProduct.length} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);

    for (const { orderId } of ordersWithProduct) {
      try {
        await updateOrderStatus(orderId);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}:`, error);
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}:`, error);
  }
}
