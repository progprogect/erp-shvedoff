import { Document, Packer, Paragraph, TextRun, Table, TableRow, TableCell, WidthType, AlignmentType, HeadingLevel, BorderStyle } from 'docx';
import { Response } from 'express';

export interface OrderData {
  id: number;
  orderNumber: string;
  contractNumber?: string;
  client: {
    name: string;
  };
  items: Array<{
    product: {
      name: string;
      article?: string;
      area?: number;
    };
    quantity: number;
  }>;
  createdAt: string;
}

export interface ShipmentData {
  id: number;
  shipmentNumber: string;
  plannedDate?: string;
  clients: Array<{
    name: string;
    contractNumber?: string;
  }>;
  items: Array<{
    orderNumber: string;
    contractNumber?: string;
    clientName: string;
    product: {
      name: string;
      article?: string;
      area?: number;
    };
    quantity: number;
  }>;
  createdAt: string;
}

export class WordExporter {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Word-–¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
   */
  static async exportShipmentDocument(res: Response, orderData: OrderData): Promise<void> {
    try {
      console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:', orderData.orderNumber);
      console.log('üì¶ –¢–æ–≤–∞—Ä—ã:', orderData.items.map(item => ({
        name: item.product.name,
        article: item.product.article,
        area: item.product.area,
        quantity: item.quantity
      })));
      
      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            // –ë–ª–æ–∫ 1: –í–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            new Paragraph({
              children: [
                new TextRun({
                  text: "–í–ù–ò–ú–ê–ù–ò–ï:",
                  bold: true,
                  size: 24
                })
              ],
              alignment: AlignmentType.CENTER
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–î–û–ö–£–ú–ï–ù–¢ –î–õ–Ø –í–ù–£–¢–†–ï–ù–ù–ï–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø.",
                  bold: true,
                  size: 20
                })
              ],
              alignment: AlignmentType.CENTER
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü–û–î–õ–ï–ñ–ò–¢ –ò–ó–™–Ø–¢–ò–Æ –ü–†–ï–î–°–¢–ê–í–ò–¢–ï–õ–ï–ú –û–•–†–ê–ù–´",
                  bold: true,
                  size: 20
                })
              ],
              alignment: AlignmentType.CENTER
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 2: –î–∞—Ç–∞ + –∫–ª–∏–µ–Ω—Ç + —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü–æ–ª–µ",
                  bold: true
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ó–Ω–∞—á–µ–Ω–∏–µ"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–î–∞—Ç–∞"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: new Date(orderData.createdAt).toLocaleDateString('ru-RU')
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: orderData.client.name
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "__________________________"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "__________________________"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 3: –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            new Paragraph({
              children: [
                new TextRun({
                  text: "–†.–ï. –®–≤–µ–¥–æ–≤"
                })
              ],
              alignment: AlignmentType.RIGHT
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ï.–ù. –°–∞–∫–æ–≤–∏—á"
                })
              ],
              alignment: AlignmentType.RIGHT
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 4: –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            new Paragraph({
              children: [
                new TextRun({
                  text: "–¢–æ–≤–∞—Ä—ã:",
                  bold: true
                })
              ]
            }),
            this.createProductsTable(orderData),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 5: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ________________________________________"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 6: –¢–æ–≤–∞—Ä–Ω—ã–π —è—Ä–ª—ã–∫
            new Paragraph({
              children: [
                new TextRun({
                  text: "–¢–æ–≤–∞—Ä–Ω—ã–π —è—Ä–ª—ã–∫:"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 7: –°–æ—Å—Ç–∞–≤–∏–ª
            new Paragraph({
              children: [
                new TextRun({
                  text: "–°–û–°–¢–ê–í–ò–õ: ______________________ / _________________ /"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 8: –û—Ç–≥—Ä—É–∑–∫—É –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∏
            new Paragraph({
              children: [
                new TextRun({
                  text: "–û—Ç–≥—Ä—É–∑–∫—É –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∏:",
                  bold: true
                })
              ]
            }),
            this.createShipmentTable(),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 9: –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–≥—Ä—É–∑–∫–∏
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü–†–û–¶–ï–°–° –û–¢–ì–†–£–ó–ö–ò –ü–†–û–ö–û–ù–¢–†–û–õ–ò–†–û–í–ê–õ:",
                  bold: true
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "________________ / __________________ /"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "        (–§.–ò.–û.)                (–ü–æ–¥–ø–∏—Å—å)"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–í–†–ï–ú–Ø –û–¢–ú–ï–¢–ö–ê –≤—ã–µ–∑–¥–∞ —Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "—á–∞—Å: _____  –º–∏–Ω: _____"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–ª—É–∂–±—ã –æ—Ö—Ä–∞–Ω—ã: ___________"
                })
              ]
            })
          ]
        }]
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const buffer = await Packer.toBuffer(doc);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ HTTP –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const fileName = `Shipment_${orderData.orderNumber}.docx`;
      const encodedFileName = encodeURIComponent(fileName);
      res.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${encodedFileName}`);
      res.setHeader('Content-Length', buffer.length);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      res.send(buffer);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Word-–¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Word-–¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–π –æ—Ç–≥—Ä—É–∑–∫–∏
   */
  static async exportShipmentDocumentForShipment(res: Response, shipmentData: ShipmentData): Promise<void> {
    try {
      console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:', shipmentData.shipmentNumber);
      console.log('üì¶ –¢–æ–≤–∞—Ä—ã –≤ –æ—Ç–≥—Ä—É–∑–∫–µ:', shipmentData.items.length);
      console.log('üë• –ö–ª–∏–µ–Ω—Ç—ã:', shipmentData.clients.map(c => c.name));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –æ—Ç–≥—Ä—É–∑–∫–µ
      if (!shipmentData.items || shipmentData.items.length === 0) {
        throw new Error('–í –æ—Ç–≥—Ä—É–∑–∫–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä–∞, –∑–∞—Ç–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
      const sortedItems = [...shipmentData.items].sort((a, b) => {
        const contractA = a.contractNumber || '';
        const contractB = b.contractNumber || '';
        if (contractA !== contractB) {
          return contractA.localeCompare(contractB);
        }
        const articleA = a.product.article || '';
        const articleB = b.product.article || '';
        return articleA.localeCompare(articleB);
      });

      // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–∏
      const totalQuantity = sortedItems.reduce((sum, item) => sum + item.quantity, 0);
      const totalArea = sortedItems.reduce((sum, item) => {
        const area = (item.product.area || 0) * item.quantity;
        return sum + area;
      }, 0);

      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            // –ë–ª–æ–∫ 1: –í–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            new Paragraph({
              children: [
                new TextRun({
                  text: "–í–ù–ò–ú–ê–ù–ò–ï:",
                  bold: true,
                  size: 24
                })
              ],
              alignment: AlignmentType.CENTER
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–î–û–ö–£–ú–ï–ù–¢ –î–õ–Ø –í–ù–£–¢–†–ï–ù–ù–ï–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø.",
                  bold: true,
                  size: 20
                })
              ],
              alignment: AlignmentType.CENTER
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü–û–î–õ–ï–ñ–ò–¢ –ò–ó–™–Ø–¢–ò–Æ –ü–†–ï–î–°–¢–ê–í–ò–¢–ï–õ–ï–ú –û–•–†–ê–ù–´",
                  bold: true,
                  size: 20
                })
              ],
              alignment: AlignmentType.CENTER
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 2: –î–∞—Ç–∞ + –∫–ª–∏–µ–Ω—Ç—ã + —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ù–æ–º–µ—Ä –æ—Ç–≥—Ä—É–∑–∫–∏:",
                  bold: true
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: shipmentData.shipmentNumber
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:",
                  bold: true
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: shipmentData.plannedDate 
                    ? new Date(shipmentData.plannedDate).toLocaleDateString('ru-RU')
                    : new Date().toLocaleDateString('ru-RU')
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ó–∞–∫–∞–∑—á–∏–∫–∏:",
                  bold: true
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: shipmentData.clients.map(c => c.name).join(', ')
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "__________________________"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è:"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "__________________________"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 3: –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            new Paragraph({
              children: [
                new TextRun({
                  text: "–†.–ï. –®–≤–µ–¥–æ–≤"
                })
              ],
              alignment: AlignmentType.RIGHT
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ï.–ù. –°–∞–∫–æ–≤–∏—á"
                })
              ],
              alignment: AlignmentType.RIGHT
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 4: –¢–∞–±–ª–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
            new Paragraph({
              children: [
                new TextRun({
                  text: "–¢–æ–≤–∞—Ä—ã –≤ –æ—Ç–≥—Ä—É–∑–∫–µ:",
                  bold: true
                })
              ]
            }),
            this.createShipmentProductsTable(sortedItems, totalQuantity, totalArea),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 5: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ____________________________________________________________________"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 6: –¢–æ–≤–∞—Ä–Ω—ã–π —è—Ä–ª—ã–∫
            new Paragraph({
              children: [
                new TextRun({
                  text: "–¢–æ–≤–∞—Ä–Ω—ã–π —è—Ä–ª—ã–∫:"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 7: –°–æ—Å—Ç–∞–≤–∏–ª
            new Paragraph({
              children: [
                new TextRun({
                  text: "–°–û–°–¢–ê–í–ò–õ: ____________________________   /   ____________________________  /"
                })
              ]
            }),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 8: –û—Ç–≥—Ä—É–∑–∫—É –æ—Å—É—â–µ—Å—Ç–≤–∏–ª–∏
            new Paragraph({
              children: [
                new TextRun({
                  text: "–û–¢–ì–†–£–ó–ö–£ –°–û–ì–õ–ê–°–ù–û –ó–ê–î–ê–ù–ò–Ø –û–°–£–©–ï–°–¢–í–ò–õ–ò:",
                  bold: true
                })
              ]
            }),
            this.createShipmentTable(),
            new Paragraph({ text: "" }), // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

            // –ë–ª–æ–∫ 9: –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–≥—Ä—É–∑–∫–∏
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü–†–û–¶–ï–°–° –û–¢–ì–†–£–ó–ö–ò –ü–†–û–ö–û–ù–¢–†–û–õ–ò–†–û–í–ê–õ:",
                  bold: true
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "__________________________ / __________________________ /"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "         (–§.–ò.–û.)                      (–ü–æ–¥–ø–∏—Å—å)"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–í–†–ï–ú–Ø –û–¢–ú–ï–¢–ö–ê –≤—ã–µ–∑–¥–∞ —Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "—á–∞—Å: ______    –º–∏–Ω—É—Ç: ______"
                })
              ]
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–ª—É–∂–±—ã –æ—Ö—Ä–∞–Ω—ã: __________________________"
                })
              ]
            })
          ]
        }]
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const buffer = await Packer.toBuffer(doc);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ HTTP –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
      
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const dateStr = shipmentData.plannedDate 
        ? new Date(shipmentData.plannedDate).toISOString().split('T')[0]
        : new Date().toISOString().split('T')[0];
      const fileName = `Shipment_${shipmentData.shipmentNumber}_${dateStr}.docx`;
      const encodedFileName = encodeURIComponent(fileName);
      res.setHeader('Content-Disposition', `attachment; filename*=UTF-8''${encodedFileName}`);
      res.setHeader('Content-Length', buffer.length);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      res.send(buffer);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Word-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
   */
  private static createProductsTable(orderData: OrderData): Table {
    const rows = [
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      new TableRow({
        children: [
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", bold: true })]
            })],
            width: { size: 20, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", bold: true })]
            })],
            width: { size: 40, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ö–æ–ª-–≤–æ, —à—Ç", bold: true })]
            })],
            width: { size: 15, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ü–ª–æ—â–∞–¥—å, –º.–∫–≤.", bold: true })]
            })],
            width: { size: 25, type: WidthType.PERCENTAGE }
          })
        ]
      })
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    orderData.items.forEach(item => {
      const productName = item.product.article 
        ? `${item.product.article} ${item.product.name}`
        : item.product.name;
      
      const area = (item.product.area || 0) * item.quantity;
      const areaText = area > 0 ? area.toFixed(2) : '0';

      rows.push(
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: orderData.contractNumber || '' })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: productName })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: item.quantity.toString() })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: areaText })]
              })]
            })
          ]
        })
      );
    });

    return new Table({
      rows,
      width: { size: 100, type: WidthType.PERCENTAGE },
      borders: {
        top: { style: BorderStyle.SINGLE },
        bottom: { style: BorderStyle.SINGLE },
        left: { style: BorderStyle.SINGLE },
        right: { style: BorderStyle.SINGLE },
        insideHorizontal: { style: BorderStyle.SINGLE },
        insideVertical: { style: BorderStyle.SINGLE }
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –æ—Ç–≥—Ä—É–∑–∫–∏
   */
  private static createShipmentProductsTable(items: any[], totalQuantity: number, totalArea: number): Table {
    const rows = [
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      new TableRow({
        children: [
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–î–æ–≥–æ–≤–æ—Ä", bold: true })]
            })],
            width: { size: 15, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ö–ª–∏–µ–Ω—Ç", bold: true })]
            })],
            width: { size: 25, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ê—Ä—Ç–∏–∫—É–ª / –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", bold: true })]
            })],
            width: { size: 30, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ö–æ–ª-–≤–æ", bold: true })]
            })],
            width: { size: 10, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–º.–∫–≤.", bold: true })]
            })],
            width: { size: 10, type: WidthType.PERCENTAGE }
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", bold: true })]
            })],
            width: { size: 10, type: WidthType.PERCENTAGE }
          })
        ]
      })
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    items.forEach(item => {
      const productName = item.product.article 
        ? `${item.product.article} ${item.product.name}`
        : item.product.name;
      
      const area = (item.product.area || 0) * item.quantity;
      const areaText = area > 0 ? area.toFixed(2) : '0,00';

      rows.push(
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: item.contractNumber || '' })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: item.clientName })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: productName })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: item.quantity.toString() })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: areaText })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            })
          ]
        })
      );
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–æ–≤
    rows.push(
      new TableRow({
        children: [
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "–ò—Ç–æ–≥–æ", bold: true })]
            })]
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "" })]
            })]
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "" })]
            })]
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: totalQuantity.toString(), bold: true })]
            })]
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: totalArea.toFixed(2), bold: true })]
            })]
          }),
          new TableCell({
            children: [new Paragraph({
              children: [new TextRun({ text: "" })]
            })]
          })
        ]
      })
    );

    return new Table({
      rows,
      width: { size: 100, type: WidthType.PERCENTAGE },
      borders: {
        top: { style: BorderStyle.SINGLE },
        bottom: { style: BorderStyle.SINGLE },
        left: { style: BorderStyle.SINGLE },
        right: { style: BorderStyle.SINGLE },
        insideHorizontal: { style: BorderStyle.SINGLE },
        insideVertical: { style: BorderStyle.SINGLE }
      }
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –æ—Ç–≥—Ä—É–∑–∫–∏
   */
  private static createShipmentTable(): Table {
    return new Table({
      rows: [
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–û–ø–µ—Ä–∞—Ü–∏—è", bold: true })]
              })],
              width: { size: 25, type: WidthType.PERCENTAGE }
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", bold: true })]
              })],
              width: { size: 20, type: WidthType.PERCENTAGE }
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–ü–æ–¥–ø–∏—Å—å", bold: true })]
              })],
              width: { size: 15, type: WidthType.PERCENTAGE }
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–§–ò–û –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞", bold: true })]
              })],
              width: { size: 20, type: WidthType.PERCENTAGE }
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–ü–æ–¥–ø–∏—Å—å", bold: true })]
              })],
              width: { size: 15, type: WidthType.PERCENTAGE }
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–î–∞—Ç–∞, –≤—Ä–µ–º—è", bold: true })]
              })],
              width: { size: 25, type: WidthType.PERCENTAGE }
            })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–ß–∏—Å—Ç–∫–∞ –æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∫–∞—à–∏)" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–ª–ª." })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            })
          ]
        }),
        new TableRow({
          children: [
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "–ö–ª–∞–¥–æ–≤—â–∏–∫" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            }),
            new TableCell({
              children: [new Paragraph({
                children: [new TextRun({ text: "" })]
              })]
            })
          ]
        })
      ],
      width: { size: 100, type: WidthType.PERCENTAGE },
      borders: {
        top: { style: BorderStyle.SINGLE },
        bottom: { style: BorderStyle.SINGLE },
        left: { style: BorderStyle.SINGLE },
        right: { style: BorderStyle.SINGLE },
        insideHorizontal: { style: BorderStyle.SINGLE },
        insideVertical: { style: BorderStyle.SINGLE }
      }
    });
  }
}
