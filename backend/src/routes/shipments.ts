import express from 'express';
import { db, schema } from '../db';
import { eq, and, sql, desc, asc, inArray } from 'drizzle-orm';
import { authenticateToken, authorizeRoles, AuthRequest } from '../middleware/auth';
import { requireExportPermission } from '../middleware/permissions';
import { createError } from '../middleware/errorHandler';
import { performStockOperation } from '../utils/stockManager';
import { ExcelExporter } from '../utils/excelExporter';
import { updateOrderStatusIfFullyShipped } from '../utils/orderShipmentChecker';

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ (WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 5.1)
async function checkAndArchiveOrder(tx: any, orderId: number, userId: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –µ–≥–æ —Ç–æ–≤–∞—Ä–∞–º–∏
    const order = await tx.query.orders.findFirst({
      where: eq(schema.orders.id, orderId),
      with: {
        items: {
          with: {
            product: true
          }
        }
      }
    });

    if (!order || order.status === 'completed') {
      return; // –ó–∞–∫–∞–∑ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ shipment_orders
    const completedShipments = await tx.query.shipments.findMany({
      where: and(
        eq(schema.shipments.status, 'completed'),
        sql`EXISTS (
          SELECT 1 FROM shipment_orders so 
          WHERE so.shipment_id = ${schema.shipments.id} 
          AND so.order_id = ${orderId}
        )`
      ),
      with: {
        items: {
          with: {
            product: true
          }
        }
      }
    });

    // –°—á–∏—Ç–∞–µ–º –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
    const shippedQuantities: Record<number, number> = {};
    
    for (const shipment of completedShipments) {
      for (const item of shipment.items || []) {
        const productId = item.productId;
        const shippedQty = item.actualQuantity || item.plannedQuantity || 0;
        shippedQuantities[productId] = (shippedQuantities[productId] || 0) + shippedQty;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º - –æ—Ç–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
    let allItemsShipped = true;
    
    for (const orderItem of order.items) {
      const orderedQty = orderItem.quantity;
      const shippedQty = shippedQuantities[orderItem.productId] || 0;
      
      if (shippedQty < orderedQty) {
        allItemsShipped = false;
        break;
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å "–û—Ç–≥—Ä—É–∂–µ–Ω"
    if (allItemsShipped) {
      await tx.update(schema.orders)
        .set({
          status: 'completed',
          updatedAt: new Date()
        })
        .where(eq(schema.orders.id, orderId));

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      await tx.insert(schema.auditLog).values({
        tableName: 'orders',
        recordId: orderId,
        operation: 'UPDATE',
        oldValues: { status: order.status },
        newValues: { 
          status: 'completed',
          reason: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã'
        },
        userId
      });

      console.log(`üì¶ –ó–∞–∫–∞–∑ ${order.orderNumber} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–û—Ç–≥—Ä—É–∂–µ–Ω" - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç–≥—Ä—É–∂–µ–Ω—ã`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
  }
}

// GET /api/shipments - Get shipments list
router.get('/', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const { status, limit = 50, offset = 0, search } = req.query;

    let whereConditions = [];

    if (status) {
      whereConditions.push(eq(schema.shipments.status, status as any));
    }

    if (search) {
      whereConditions.push(
        sql`${schema.shipments.shipmentNumber} ILIKE ${`%${search}%`} OR ${schema.orders.orderNumber} ILIKE ${`%${search}%`} OR ${schema.orders.customerName} ILIKE ${`%${search}%`}`
      );
    }

    const shipments = await db.query.shipments.findMany({
      where: whereConditions.length > 0 ? and(...whereConditions) : undefined,
      with: {
        createdByUser: {
          columns: {
            id: true,
            username: true,
            fullName: true
          }
        },
        items: {
          with: {
            product: true
          }
        },
        orders: {
          with: {
            order: {
              with: {
                manager: {
                  columns: {
                    id: true,
                    username: true,
                    fullName: true
                  }
                },
                items: {
                  with: {
                    product: true
                  }
                }
              }
            }
          }
        }
      },
      orderBy: [
        desc(schema.shipments.createdAt)
      ],
      limit: Number(limit),
      offset: Number(offset)
    });

    res.json({
      success: true,
      data: shipments
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/shipments/open - Get open shipments (pending, paused)
router.get('/open', authenticateToken, authorizeRoles('manager', 'director', 'warehouse'), async (req: AuthRequest, res, next) => {
  try {
    const openShipments = await db.query.shipments.findMany({
      where: inArray(schema.shipments.status, ['pending', 'paused']),
      with: {
        orders: {
          with: {
            order: {
              with: {
                manager: {
                  columns: {
                    id: true,
                    username: true,
                    fullName: true
                  }
                }
              }
            }
          }
        },
        createdByUser: {
          columns: {
            id: true,
            username: true,
            fullName: true
          }
        }
      },
      orderBy: sql`${schema.shipments.createdAt} DESC`
    });

    res.json({
      success: true,
      data: openShipments
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/shipments/ready-orders - Get orders ready for shipment
router.get('/ready-orders', authenticateToken, authorizeRoles('manager', 'director', 'warehouse'), async (req: AuthRequest, res, next) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ (—Å—Ç–∞—Ç—É—Å 'ready')
    const readyOrders = await db.query.orders.findMany({
      where: eq(schema.orders.status, 'ready'),
      with: {
        manager: {
          columns: {
            id: true,
            username: true,
            fullName: true
          }
        },
        items: {
          with: {
            product: true
          }
        }
      },
      orderBy: [
        asc(schema.orders.deliveryDate),
        desc(schema.orders.createdAt)
      ]
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≥—Ä—É–∑–∫–∏
    const activeShipmentOrders = await db
      .select({ orderId: schema.shipmentOrders.orderId })
      .from(schema.shipmentOrders)
      .innerJoin(schema.shipments, eq(schema.shipmentOrders.shipmentId, schema.shipments.id))
      .where(
        inArray(schema.shipments.status, ['pending', 'paused'])
      );

    const excludeOrderIds = activeShipmentOrders
      .map(item => item.orderId);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≥—Ä—É–∑–∫–∏
    const availableOrders = readyOrders.filter(order => 
      !excludeOrderIds.includes(order.id)
    );

    res.json({
      success: true,
      data: availableOrders
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/shipments - Create new shipment
router.post('/', authenticateToken, authorizeRoles('manager', 'director', 'warehouse'), async (req: AuthRequest, res, next) => {
  try {
    const { 
      orderIds, 
      plannedDate, 
      transportInfo, 
      notes 
    } = req.body;
    const userId = req.user!.id;

    if (!orderIds || !Array.isArray(orderIds) || orderIds.length === 0) {
      return next(createError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏', 400));
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ orderIds —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏
    const validOrderIds = orderIds.map(id => {
      const numId = Number(id);
      if (isNaN(numId) || numId <= 0) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞: ${id}`);
      }
      return numId;
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–≥—Ä—É–∑–∫–µ
    const orders = await db.query.orders.findMany({
      where: inArray(schema.orders.id, validOrderIds),
      with: {
        items: {
          with: {
            product: true
          }
        }
      }
    });

    if (orders.length !== validOrderIds.length) {
      return next(createError('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 404));
    }

    const invalidOrders = orders.filter(order => order.status !== 'ready');
    if (invalidOrders.length > 0) {
      return next(createError(
        `–ó–∞–∫–∞–∑—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–≥—Ä—É–∑–∫–µ: ${invalidOrders.map(o => o.orderNumber).join(', ')}`, 
        400
      ));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥—Ä—É–≥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º –æ—Ç–≥—Ä—É–∑–∫–∞–º
    const activeShipmentOrders = await db
      .select({ 
        orderId: schema.shipmentOrders.orderId,
        shipmentNumber: schema.shipments.shipmentNumber
      })
      .from(schema.shipmentOrders)
      .innerJoin(schema.shipments, eq(schema.shipmentOrders.shipmentId, schema.shipments.id))
      .where(
        and(
          inArray(schema.shipmentOrders.orderId, validOrderIds),
          inArray(schema.shipments.status, ['pending', 'paused'])
        )
      );

    if (activeShipmentOrders.length > 0) {
      const conflictingOrders = activeShipmentOrders.map(so => so.orderId);
      const conflictingShipments = activeShipmentOrders.map(so => so.shipmentNumber);
      return next(createError(
        `–ó–∞–∫–∞–∑—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∞–∫—Ç–∏–≤–Ω—ã–º –æ—Ç–≥—Ä—É–∑–∫–∞–º: ${conflictingOrders.join(', ')}. –û—Ç–≥—Ä—É–∑–∫–∏: ${conflictingShipments.join(', ')}`, 
        400
      ));
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –æ—Ç–≥—Ä—É–∑–∫–∏
    const shipmentCountResult = await db.select({ count: sql`count(*)` }).from(schema.shipments);
    const shipmentCount = Number(shipmentCountResult[0]?.count || 0);
    const currentYear = new Date().getFullYear();
    const shipmentNumber = `SHIP-${currentYear}-${String(shipmentCount + 1).padStart(3, '0')}`;

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await db.transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫—É
      const [newShipment] = await tx.insert(schema.shipments).values({
        shipmentNumber,
        plannedDate: plannedDate ? new Date(plannedDate) : null,
        transportInfo,
        status: 'pending',
        createdBy: userId
      }).returning();

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ—Ç–≥—Ä—É–∑–∫–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏
      const shipmentOrderLinks = validOrderIds.map(orderId => ({
        shipmentId: newShipment.id,
        orderId: orderId
      }));
      
      if (shipmentOrderLinks.length > 0) {
        await tx.insert(schema.shipmentOrders).values(shipmentOrderLinks);
      }

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
      const shipmentItems = [];
      for (const order of orders) {
        for (const item of order.items) {
          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
          const productId = parseInt(String(item.productId), 10);
          const quantity = parseInt(String(item.quantity), 10);
          
          if (!Number.isInteger(productId) || productId <= 0) {
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞: ${item.productId}`);
          }
          
          if (!Number.isInteger(quantity) || quantity <= 0) {
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: ${item.quantity}`);
          }
          
          shipmentItems.push({
            shipmentId: newShipment.id,
            productId: productId,
            plannedQuantity: quantity,
            actualQuantity: null
          });
        }
      }

      if (shipmentItems.length > 0) {
        await tx.insert(schema.shipmentItems).values(shipmentItems);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è ready –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
      for (const orderId of validOrderIds) {
        await tx.update(schema.orders)
          .set({ status: 'ready' })
          .where(eq(schema.orders.id, orderId));
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
      await tx.insert(schema.auditLog).values({
        tableName: 'shipments',
        recordId: newShipment.id,
        operation: 'INSERT',
        newValues: newShipment,
        userId
      });

      return newShipment;
    });

    res.status(201).json({
      success: true,
      data: result,
      message: `–û—Ç–≥—Ä—É–∑–∫–∞ ${shipmentNumber} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${validOrderIds.length} –∑–∞–∫–∞–∑–∞(–æ–≤)`
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/shipments/statistics - Get shipments statistics
router.get('/statistics', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏
    const shipments = await db.query.shipments.findMany({
      columns: {
        id: true,
        status: true,
        createdAt: true
      }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalStats = {
          total: shipments.length,
    todayCount: 0,
    thisMonthCount: 0,
    pendingCount: 0,
    completedCount: 0,
    cancelledCount: 0,
    pausedCount: 0
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    shipments.forEach(shipment => {
      switch (shipment.status) {
        case 'pending':
          totalStats.pendingCount++;
          break;
        case 'completed':
          totalStats.completedCount++;
          break;
        case 'cancelled':
          totalStats.cancelledCount++;
          break;
        case 'paused':
          totalStats.pausedCount++;
          break;
      }
    });

    // –ü–æ–¥—Å—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –º–µ—Å—è—Ü —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞—Ç
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const thisMonth = new Date(today.getFullYear(), today.getMonth(), 1);

    shipments.forEach(shipment => {
      if (shipment.createdAt) {
        try {
          const createdAt = new Date(shipment.createdAt);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
          if (!isNaN(createdAt.getTime())) {
            if (createdAt >= today) {
              totalStats.todayCount++;
            }
            if (createdAt >= thisMonth) {
              totalStats.thisMonthCount++;
            }
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã
          console.warn('Invalid date in shipment:', shipment.id);
        }
      }
    });

    res.json({
      success: true,
      data: totalStats
    });
  } catch (error) {
    console.error('Error in shipments statistics:', error);
    next(error);
  }
});

// GET /api/shipments/:id - Get shipment details
router.get('/:id', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const shipmentId = Number(req.params.id);
    
    if (isNaN(shipmentId) || shipmentId <= 0) {
      return next(createError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ç–≥—Ä—É–∑–∫–∏', 400));
    }

    const shipment = await db.query.shipments.findFirst({
      where: eq(schema.shipments.id, shipmentId),
      with: {
        createdByUser: {
          columns: {
            id: true,
            username: true,
            fullName: true
          }
        },
        items: {
          with: {
            product: true
          }
        },
        orders: {
          with: {
            order: {
              with: {
                manager: {
                  columns: {
                    id: true,
                    username: true,
                    fullName: true
                  }
                },
                items: {
                  with: {
                    product: true
                  }
                }
              }
            }
          }
        }
      }
    });

    if (!shipment) {
      return next(createError('–û—Ç–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ shipment_orders
    const relatedOrders = shipment.orders?.map(so => so.order) || [];

    res.json({
      success: true,
      data: {
        ...shipment,
        relatedOrders
      }
    });
  } catch (error) {
    next(error);
  }
});

// PUT /api/shipments/:id/status - Update shipment status
router.put('/:id/status', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const shipmentId = Number(req.params.id);
    const { status, actualQuantities, transportInfo, documentsPhotos } = req.body;
    const userId = req.user!.id;

    if (!status) {
      return next(createError('–°—Ç–∞—Ç—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400));
    }

    const shipment = await db.query.shipments.findFirst({
      where: eq(schema.shipments.id, shipmentId),
      with: {
        orders: {
          with: {
            order: {
              with: {
                manager: {
                  columns: {
                    id: true,
                    username: true,
                    fullName: true
                  }
                },
                items: {
                  with: {
                    product: true
                  }
                }
              }
            }
          }
        },
        items: {
          with: {
            product: true
          }
        }
      }
    });

    if (!shipment) {
      return next(createError('–û—Ç–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
    const validTransitions: Record<string, string[]> = {
      'pending': ['completed', 'cancelled', 'paused'],
      'paused': ['pending', 'cancelled'],
      'completed': [], // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      'cancelled': [] // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    };

    if (!shipment.status || !validTransitions[shipment.status]?.includes(status)) {
      const currentStatus = shipment.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const availableTransitions = shipment.status ? validTransitions[shipment.status]?.join(', ') || '–Ω–µ—Ç' : '–Ω–µ—Ç';
      return next(createError(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å '${currentStatus}' –Ω–∞ '${status}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã: ${availableTransitions}`, 400));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await db.transaction(async (tx) => {
      const updateData: any = {
        status,
        updatedAt: new Date()
      };

      if (status === 'completed') {
        updateData.actualDate = new Date();
      }

      if (transportInfo !== undefined) {
        updateData.transportInfo = transportInfo;
      }

      if (documentsPhotos && Array.isArray(documentsPhotos)) {
        updateData.documentsPhotos = documentsPhotos;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É
      const [updatedShipment] = await tx.update(schema.shipments)
        .set(updateData)
        .where(eq(schema.shipments.id, shipmentId))
        .returning();

             // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
       if (actualQuantities && typeof actualQuantities === 'object') {
         for (const [itemId, quantity] of Object.entries(actualQuantities)) {
           if (itemId && quantity !== null && quantity !== undefined) {
             await tx.update(schema.shipmentItems)
               .set({
                 actualQuantity: Number(quantity)
               })
               .where(eq(schema.shipmentItems.id, Number(itemId)));
           }
         }
       }

             // –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
       if (status === 'completed') {
         console.log(`üì¶ –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ ${shipment.shipmentNumber}`);
         
         for (const item of shipment.items || []) {
           const quantityToShip = (actualQuantities && actualQuantities[item.id]) ? Number(actualQuantities[item.id]) : item.plannedQuantity;
           
           console.log(`üì¶ –¢–æ–≤–∞—Ä ${item.product?.name || item.productId}: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${item.plannedQuantity}, –∫ –æ—Ç–≥—Ä—É–∑–∫–µ ${quantityToShip}`);
           
           if (quantityToShip > 0) {
             // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
             const currentStock = await tx.query.stock.findFirst({
               where: eq(schema.stock.productId, item.productId)
             });

             if (!currentStock) {
               console.error(`‚ùå –¢–æ–≤–∞—Ä ${item.productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö`);
               continue;
             }

             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
             if (quantityToShip > currentStock.reservedStock) {
               console.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}: —Ä–µ–∑–µ—Ä–≤ ${currentStock.reservedStock}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${quantityToShip}`);
               continue;
             }

             // –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞ (—É–º–µ–Ω—å—à–∞–µ–º –∏ –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏ —Ä–µ–∑–µ—Ä–≤)
             await tx.update(schema.stock)
               .set({
                 currentStock: sql`${schema.stock.currentStock} - ${quantityToShip}`,
                 reservedStock: sql`${schema.stock.reservedStock} - ${quantityToShip}`,
                 updatedAt: new Date()
               })
               .where(eq(schema.stock.productId, item.productId));

             // –õ–æ–≥–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
             await tx.insert(schema.stockMovements).values({
               productId: item.productId,
               movementType: 'outgoing',
               quantity: -quantityToShip,
               referenceId: shipmentId,
               referenceType: 'shipment',
               comment: `–û—Ç–≥—Ä—É–∑–∫–∞ ${shipment.shipmentNumber}: ${item.product?.name || '—Ç–æ–≤–∞—Ä'}`,
               userId
             });

             console.log(`‚úÖ –¢–æ–≤–∞—Ä ${item.product?.name || item.productId} —Å–ø–∏—Å–∞–Ω: ${quantityToShip} —à—Ç`);
           }
         }
         
         console.log(`üì¶ –°–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏ ${shipment.shipmentNumber} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);

        // –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 5.1)
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –æ—Ç–≥—Ä—É–∑–∫–æ–π
        const shipmentOrderLinks = await tx.query.shipmentOrders.findMany({
          where: eq(schema.shipmentOrders.shipmentId, shipmentId)
        });
        
        for (const link of shipmentOrderLinks) {
          await checkAndArchiveOrder(tx, link.orderId, userId);
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      await tx.insert(schema.auditLog).values({
        tableName: 'shipments',
        recordId: shipmentId,
        operation: 'UPDATE',
        oldValues: { status: shipment.status },
        newValues: { status },
        userId
      });

      return updatedShipment;
    });

         const statusTextMap: Record<string, string> = {
       'pending': '–≤ –æ—á–µ—Ä–µ–¥–∏',
       'completed': '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
       'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω–∞',
       'paused': '–Ω–∞ –ø–∞—É–∑–µ'
     };
     const statusText = statusTextMap[status] || status;

    res.json({
      success: true,
      data: result,
      message: `–°—Ç–∞—Ç—É—Å –æ—Ç–≥—Ä—É–∑–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusText}"`
    });
  } catch (error) {
    next(error);
  }
});

// PUT /api/shipments/:id - Update shipment details
router.put('/:id', authenticateToken, authorizeRoles('manager', 'director', 'warehouse'), async (req: AuthRequest, res, next) => {
  try {
    const shipmentId = Number(req.params.id);
    const { plannedDate, transportInfo, documentsPhotos, orderIds } = req.body;
    const userId = req.user!.id;

    const shipment = await db.query.shipments.findFirst({
      where: eq(schema.shipments.id, shipmentId)
    });

    if (!shipment) {
      return next(createError('–û—Ç–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    // –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∏ –Ω–∞ –ø–∞—É–∑–µ –æ—Ç–≥—Ä—É–∑–∫–∏
    if (!shipment.status || !['pending', 'paused'].includes(shipment.status)) {
      return next(createError('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É', 400));
    }

    const updateData: any = {};

    if (plannedDate !== undefined) {
      updateData.plannedDate = plannedDate ? new Date(plannedDate) : null;
    }

    if (transportInfo !== undefined) {
      updateData.transportInfo = transportInfo;
    }

    if (documentsPhotos !== undefined) {
      updateData.documentsPhotos = documentsPhotos;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º shipments —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    let updatedShipment = shipment;
    if (Object.keys(updateData).length > 0) {
      [updatedShipment] = await db.update(schema.shipments)
        .set(updateData)
        .where(eq(schema.shipments.id, shipmentId))
        .returning();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –æ—Ç–≥—Ä—É–∑–∫–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã orderIds
    if (orderIds && Array.isArray(orderIds)) {
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏ –∏ —Ç–æ–≤–∞—Ä—ã
      await db.delete(schema.shipmentOrders)
        .where(eq(schema.shipmentOrders.shipmentId, shipmentId));
      
      await db.delete(schema.shipmentItems)
        .where(eq(schema.shipmentItems.shipmentId, shipmentId));

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –∏ —Ç–æ–≤–∞—Ä—ã
      if (orderIds.length > 0) {
        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ—Ç–≥—Ä—É–∑–∫–æ–π –∏ –∑–∞–∫–∞–∑–∞–º–∏
        await db.insert(schema.shipmentOrders).values(
          orderIds.map(orderId => ({
            shipmentId,
            orderId,
            createdAt: new Date()
          }))
        );

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è shipment_items
        const orders = await db.query.orders.findMany({
          where: inArray(schema.orders.id, orderIds),
          with: {
            items: {
              with: {
                product: true
              }
            }
          }
        });

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
        const shipmentItems = [];
        for (const order of orders) {
          for (const item of order.items) {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            const productId = parseInt(String(item.productId), 10);
            const quantity = parseInt(String(item.quantity), 10);
            
            if (!Number.isInteger(productId) || productId <= 0) {
              throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞: ${item.productId}`);
            }
            
            if (!Number.isInteger(quantity) || quantity <= 0) {
              throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: ${item.quantity}`);
            }
            
            shipmentItems.push({
              shipmentId,
              productId: productId,
              plannedQuantity: quantity,
              actualQuantity: null
            });
          }
        }

        if (shipmentItems.length > 0) {
          await db.insert(schema.shipmentItems).values(shipmentItems);
        }
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    await db.insert(schema.auditLog).values({
      tableName: 'shipments',
      recordId: shipmentId,
      operation: 'UPDATE',
      oldValues: shipment,
      newValues: updatedShipment,
      userId
    });

    res.json({
      success: true,
      data: updatedShipment,
      message: '–û—Ç–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    });
  } catch (error) {
    next(error);
  }
});

// DELETE /api/shipments/:id - Cancel shipment
router.delete('/:id', authenticateToken, authorizeRoles('manager', 'director', 'warehouse'), async (req: AuthRequest, res, next) => {
  try {
    const shipmentId = Number(req.params.id);
    const userId = req.user!.id;

    const shipment = await db.query.shipments.findFirst({
      where: eq(schema.shipments.id, shipmentId)
    });

    if (!shipment) {
      return next(createError('–û—Ç–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    // –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
    if (shipment.status !== 'pending') {
      return next(createError('–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏', 400));
    }

    const result = await db.transaction(async (tx) => {
      // –ü–æ–º–µ—á–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
      const [cancelledShipment] = await tx.update(schema.shipments)
        .set({
          status: 'cancelled'
        })
        .where(eq(schema.shipments.id, shipmentId))
        .returning();

             // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å ready
       const shipmentOrderLinks = await tx.query.shipmentOrders.findMany({
         where: eq(schema.shipmentOrders.shipmentId, shipmentId)
       });
       
       for (const link of shipmentOrderLinks) {
         await tx.update(schema.orders)
           .set({
             status: 'ready',
             updatedAt: new Date()
           })
           .where(eq(schema.orders.id, link.orderId));
       }

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
      await tx.insert(schema.auditLog).values({
        tableName: 'shipments',
        recordId: shipmentId,
        operation: 'UPDATE',
        oldValues: { status: shipment.status },
        newValues: { status: 'cancelled' },
        userId
      });

      return cancelledShipment;
    });

    res.json({
      success: true,
      data: result,
      message: '–û—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/shipments/export - Export shipments to Excel (–ó–∞–¥–∞—á–∞ 9.2)
router.post('/export', authenticateToken, requireExportPermission('shipments'), async (req: AuthRequest, res, next) => {
  try {
    const { filters, format = 'xlsx' } = req.body; // –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä format

    let whereConditions: any[] = [];

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (filters) {
      if (filters.status && filters.status !== 'all') {
        const statusArray = filters.status.split(',').map((s: string) => s.trim());
        if (statusArray.length === 1) {
          whereConditions.push(eq(schema.shipments.status, statusArray[0] as any));
        } else {
          whereConditions.push(inArray(schema.shipments.status, statusArray as any[]));
        }
      }

      if (filters.createdBy && filters.createdBy !== 'all') {
        whereConditions.push(eq(schema.shipments.createdBy, parseInt(filters.createdBy)));
      }

      if (filters.dateFrom) {
        whereConditions.push(sql`${schema.shipments.createdAt} >= ${filters.dateFrom}`);
      }

      if (filters.dateTo) {
        whereConditions.push(sql`${schema.shipments.createdAt} <= ${filters.dateTo}`);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const shipments = await db.query.shipments.findMany({
      where: whereConditions.length > 0 ? and(...whereConditions) : undefined,
      with: {
        orders: {
          with: {
            order: {
              with: {
                manager: {
                  columns: {
                    id: true,
                    username: true,
                    fullName: true
                  }
                },
                items: {
                  with: {
                    product: true
                  }
                }
              }
            }
          }
        },
        createdByUser: true,
        items: {
          with: {
            product: true
          }
        }
      },
      orderBy: [desc(schema.shipments.createdAt)]
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    const formattedData = ExcelExporter.formatShipmentsData(shipments);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
    const fileExtension = format === 'csv' ? 'csv' : 'xlsx';
    const filename = `shipments-export-${timestamp}.${fileExtension}`;

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ó–∞–¥–∞—á–∞ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    await ExcelExporter.exportData(res, {
      filename,
      sheetName: '–û—Ç–≥—Ä—É–∑–∫–∏',
      title: `–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–æ–∫ - ${new Date().toLocaleDateString('ru-RU')}`,
      columns: ExcelExporter.getShipmentsColumns(),
      data: formattedData,
      format
    });

  } catch (error) {
    next(error);
  }
});

export default router; 