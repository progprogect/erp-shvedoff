import express from 'express';
import { db, schema } from '../db';
import { eq, and, sql, inArray } from 'drizzle-orm';
import { authenticateToken, authorizeRoles, AuthRequest } from '../middleware/auth';
import { requireExportPermission } from '../middleware/permissions';
import { createError } from '../middleware/errorHandler';
import { performStockOperation } from '../utils/stockManager';
import { analyzeOrderAvailability, updateOrderStatus } from '../utils/orderStatusCalculator';
import { ExcelExporter } from '../utils/excelExporter';
import { checkAndUpdateAllShippedOrders } from '../utils/orderShipmentChecker';
import { parsePrice, calculateOrderTotal as calculateOrderTotalBackend } from '../utils/priceUtils';

const router = express.Router();

// GET /api/orders - Get orders list
router.get('/', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const { status, priority, managerId, limit = 50, offset = 0 } = req.query;
    const userRole = req.user!.role;
    const userId = req.user!.id;

    let whereConditions = [];

    // Role-based filtering
    if (userRole === 'manager') {
      whereConditions.push(eq(schema.orders.managerId, userId));
    }

    if (status) {
      const statusArray = (status as string).split(',').map(s => s.trim());
      if (statusArray.length === 1) {
        whereConditions.push(eq(schema.orders.status, statusArray[0] as any));
      } else {
        whereConditions.push(inArray(schema.orders.status, statusArray as any[]));
      }
    }

    if (priority) {
      whereConditions.push(eq(schema.orders.priority, priority as any));
    }

    if (managerId && userRole !== 'manager') {
      whereConditions.push(eq(schema.orders.managerId, Number(managerId)));
    }

    const orders = await db.query.orders.findMany({
      where: whereConditions.length > 0 ? and(...whereConditions) : undefined,
      with: {
        manager: {
          columns: {
            passwordHash: false
          }
        },
        items: {
          with: {
            product: {
              with: {
                stock: true
              }
            }
          }
        }
      },
      orderBy: sql`${schema.orders.createdAt} DESC`,
      limit: Number(limit),
      offset: Number(offset)
    });

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    try {
      const { recalculateAllOrderStatuses } = await import('../utils/orderStatusCalculator');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const incompleteOrders = orders.filter(order => 
        order.status && ['new', 'confirmed', 'in_production'].includes(order.status)
      );
      
      if (incompleteOrders.length > 0) {
        console.log(`üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã ${incompleteOrders.length} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞`);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        await Promise.all(
          incompleteOrders.map(order => 
            updateOrderStatus(order.id).catch(error => 
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${order.id}:`, error)
            )
          )
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ" –Ω–∞ –ø–æ–ª–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É
        // –£–ë–†–ê–ù–û: –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
        const updatedOrders = await db.query.orders.findMany({
          where: whereConditions.length > 0 ? and(...whereConditions) : undefined,
          with: {
            manager: {
              columns: {
                passwordHash: false
              }
            },
            items: {
              with: {
                product: {
                  with: {
                    stock: true
                  }
                }
              }
            }
          },
          orderBy: sql`${schema.orders.createdAt} DESC`,
          limit: Number(limit),
          offset: Number(offset)
        });
        
        res.json({
          success: true,
          data: updatedOrders
        });
      } else {
        res.json({
          success: true,
          data: orders
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      res.json({
        success: true,
        data: orders
      });
    }
  } catch (error) {
    next(error);
  }
});

// GET /api/orders/:id - Get order details
router.get('/:id', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const userRole = req.user!.role;
    const userId = req.user!.id;

    let whereCondition;
    
    // Role-based access control
    if (userRole === 'manager') {
      whereCondition = and(
        eq(schema.orders.id, orderId),
        eq(schema.orders.managerId, userId)
      );
    } else {
      whereCondition = eq(schema.orders.id, orderId);
    }

    const order = await db.query.orders.findFirst({
      where: whereCondition,
      with: {
        manager: {
          columns: {
            passwordHash: false
          }
        },
        items: {
          with: {
            product: {
              with: {
                stock: true,
                category: true
              }
            }
          }
        },
        messages: {
          with: {
            user: {
              columns: {
                passwordHash: false
              }
            }
          },
          orderBy: sql`${schema.orderMessages.createdAt} ASC`
        }
      }
    });

    if (!order) {
      return next(createError('Order not found', 404));
    }

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)
    try {
      // –°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–Ø: –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ—Ç–≥—Ä—É–∂–µ–Ω
      if (order.status === 'completed') {
        console.log(`‚úÖ –ó–∞–∫–∞–∑ ${order.orderNumber} —É–∂–µ –æ—Ç–≥—Ä—É–∂–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞`);
      } else {
        const { analyzeOrderAvailability } = await import('../utils/orderStatusCalculator');
        const orderAnalysis = await analyzeOrderAvailability(orderId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if (orderAnalysis.status !== order.status) {
          await db.update(schema.orders)
            .set({ 
              status: orderAnalysis.status as any,
              updatedAt: new Date()
            })
            .where(eq(schema.orders.id, orderId));
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          order.status = orderAnalysis.status as any;
          
          console.log(`üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${order.orderNumber} –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${order.status}`);
        }
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ", –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É
        if (order.status === 'ready') {
          const { updateOrderStatusIfFullyShipped } = await import('../utils/orderShipmentChecker');
          const wasUpdated = await updateOrderStatusIfFullyShipped(orderId, userId);
          if (wasUpdated) {
            order.status = 'completed';
            console.log(`üì¶ –ó–∞–∫–∞–∑ ${order.orderNumber} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–û—Ç–≥—Ä—É–∂–µ–Ω" –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É`);
          }
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId} –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:`, error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    }

    // Helper function to calculate production quantity for products
    async function getProductionQuantities(productIds: number[]) {
      if (productIds.length === 0) {
        return new Map<number, number>();
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ productIds
      const validProductIds = productIds.filter(id => Number.isInteger(id) && id > 0);
      if (validProductIds.length === 0) {
        return new Map<number, number>();
      }

      const tasksQuery = db
        .select({
          productId: schema.productionTasks.productId,
          quantity: sql<number>`
            COALESCE(SUM(
              CASE 
                WHEN ${schema.productionTasks.status} IN ('pending', 'in_progress') 
                THEN ${schema.productionTasks.requestedQuantity}
                ELSE 0
              END
            ), 0)
          `.as('quantity')
        })
        .from(schema.productionTasks)
        .where(
          and(
            inArray(schema.productionTasks.status, ['pending', 'in_progress']),
            inArray(schema.productionTasks.productId, validProductIds)
          )
        )
        .groupBy(schema.productionTasks.productId);

      const inProduction = await tasksQuery;
      const productionMap = new Map<number, number>();

      inProduction.forEach(item => {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const quantity = Number(item.quantity) || 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
        if (quantity < 0 || quantity > 1000000) {
          console.warn(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${item.productId}: ${quantity}. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0.`);
          productionMap.set(item.productId, 0);
        } else {
          productionMap.set(item.productId, quantity);
        }
      });

      return productionMap;
    }

    // Helper function to calculate reserved quantities from active orders
    async function getReservedQuantities(productIds: number[], excludeOrderId?: number) {
      if (productIds.length === 0) {
        return new Map<number, number>();
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ productIds
      const validProductIds = productIds.filter(id => Number.isInteger(id) && id > 0);
      if (validProductIds.length === 0) {
        return new Map<number, number>();
      }

      let whereConditions = [
        inArray(schema.orderItems.productId, validProductIds),
        inArray(schema.orders.status, ['new', 'confirmed', 'in_production', 'completed'])
      ];

      // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞
      if (excludeOrderId) {
        whereConditions.push(sql`${schema.orders.id} != ${excludeOrderId}`);
      }

      const reservedQuery = db
        .select({
          productId: schema.orderItems.productId,
          quantity: sql<number>`SUM(${schema.orderItems.quantity})`.as('quantity')
        })
        .from(schema.orderItems)
        .innerJoin(schema.orders, eq(schema.orderItems.orderId, schema.orders.id))
        .where(and(...whereConditions))
        .groupBy(schema.orderItems.productId);

      const reservedData = await reservedQuery;
      const reservedMap = new Map<number, number>();

      reservedData.forEach(item => {
        reservedMap.set(item.productId, item.quantity);
      });

      return reservedMap;
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
    const productIds = order.items?.map(item => {
      const id = typeof item.productId === 'string' ? parseInt(item.productId, 10) : Number(item.productId);
      return id;
    }).filter(id => Number.isInteger(id) && id > 0) || [];
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏ —Ä–µ–∑–µ—Ä–≤–∞—Ö
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const [productionQuantities, reservedQuantities] = await Promise.all([
      getProductionQuantities(productIds),
      getReservedQuantities(productIds, order.id)
    ]);

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
    const enrichedOrder = {
      ...order,
      items: order.items?.map(item => {
        const stock = item.product?.stock;
        const currentStock = stock?.currentStock || 0;
        const reserved = reservedQuantities.get(item.productId) || 0;
        const inProduction = productionQuantities.get(item.productId) || 0;
        const available = currentStock - reserved;

        return {
          ...item,
          product: {
            ...item.product,
            stock: {
              ...stock,
              currentStock,
              reservedStock: reserved,
              availableStock: available,
              inProductionQuantity: inProduction
            }
          }
        };
      })
    };

    res.json({
      success: true,
      data: enrichedOrder
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/orders - Create new order
router.post('/', authenticateToken, authorizeRoles('manager', 'director'), async (req: AuthRequest, res, next) => {
  try {
    const { 
      customerName, 
      customerContact, 
      contractNumber, // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
      deliveryDate, 
      priority = 'normal', 
      source = 'database',
      customSource,
      items, 
      notes,
      managerId // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    } = req.body;
    const currentUserId = req.user!.id;
    const currentUserRole = req.user!.role;

    if (!customerName || !items || !Array.isArray(items) || items.length === 0) {
      return next(createError('Customer name and items are required', 400));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω
    const validatedItems = [];
    for (const item of items) {
      if (!item.productId || !item.quantity) {
        return next(createError('Product ID and quantity are required for all items', 400));
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
      if (item.price !== undefined && item.price !== null && item.price !== '') {
        const priceResult = parsePrice(item.price);
        if (!priceResult.success) {
          return next(createError(`–û—à–∏–±–∫–∞ –≤ —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞: ${priceResult.error}`, 400));
        }
        validatedItems.push({
          ...item,
          price: priceResult.value
        });
      } else {
        validatedItems.push(item);
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∑–∞–∫–∞–∑–∞
    const validSources = ['database', 'website', 'avito', 'referral', 'cold_call', 'other'];
    if (source && !validSources.includes(source)) {
      return next(createError('Invalid order source', 400));
    }

    // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ "other", —Ç–æ customSource –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (source === 'other' && (!customSource || customSource.trim() === '')) {
      return next(createError('Custom source description is required when source is "other"', 400));
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    let assignedManagerId = currentUserId; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    if (managerId && managerId !== currentUserId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (currentUserRole !== 'director') {
        return next(createError('–¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 403));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const targetManager = await db.query.users.findFirst({
        where: and(
          eq(schema.users.id, managerId),
          eq(schema.users.isActive, true)
        )
      });
      
      if (!targetManager) {
        return next(createError('–£–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω', 404));
      }
      
      assignedManagerId = managerId;
    }

    // Generate order number
    const orderCountResult = await db.select({ count: sql`count(*)` }).from(schema.orders);
    const orderCount = Number(orderCountResult[0]?.count || 0);
    const currentYear = new Date().getFullYear();
    const orderNumber = `ORD-${currentYear}-${String(orderCount + 1).padStart(3, '0')}`;

    // Calculate total amount using validated items and precise arithmetic
    const totalAmount = parseFloat(calculateOrderTotalBackend(validatedItems.map(item => ({
      price: item.price || 0,
      quantity: item.quantity || 0
    }))));

    // Create order
    const newOrder = await db.insert(schema.orders).values({
      orderNumber,
      customerName,
      customerContact,
      contractNumber, // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
      status: 'new',
      priority,
      source,
      customSource: source === 'other' ? customSource : null,
      deliveryDate: deliveryDate ? new Date(deliveryDate) : null,
      managerId: assignedManagerId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      totalAmount: totalAmount.toString(),
      notes
    }).returning();

    const orderId = newOrder[0].id;

    // Create order items and check/reserve stock
    const itemsNeedingProduction = [];
    
    for (const item of validatedItems) {
      // Create order item with validated price
      await db.insert(schema.orderItems).values({
        orderId,
        productId: item.productId,
        quantity: item.quantity,
        price: item.price
      });

      // Check stock availability
      const stock = await db.query.stock.findFirst({
        where: eq(schema.stock.productId, item.productId)
      });

      let quantityToReserve = 0;
      if (stock) {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑)
        const totalReservedResult = await db
          .select({
            total_reserved: sql<number>`COALESCE(SUM(${schema.orderItems.reservedQuantity}), 0)`.as('total_reserved')
          })
          .from(schema.orderItems)
          .innerJoin(schema.orders, eq(schema.orderItems.orderId, schema.orders.id))
          .where(
            and(
              eq(schema.orderItems.productId, item.productId),
              inArray(schema.orders.status, ['new', 'confirmed', 'in_production'])
            )
          );
        
        const totalReserved = totalReservedResult[0]?.total_reserved || 0;
        const availableStock = Math.max(0, stock.currentStock - totalReserved);
        quantityToReserve = Math.min(availableStock, item.quantity);

        if (quantityToReserve > 0) {
          // Reserve available stock
          await db.update(schema.stock)
            .set({
              reservedStock: stock.reservedStock + quantityToReserve,
              updatedAt: new Date()
            })
            .where(eq(schema.stock.productId, item.productId));

          // Update order item with reserved quantity
          await db.update(schema.orderItems)
            .set({ reservedQuantity: quantityToReserve })
            .where(and(
              eq(schema.orderItems.orderId, orderId),
              eq(schema.orderItems.productId, item.productId)
            ));

          // Log stock movement
          await db.insert(schema.stockMovements).values({
            productId: item.productId,
            movementType: 'reservation',
            quantity: quantityToReserve,
            referenceId: orderId,
            referenceType: 'order',
            userId: currentUserId
          });
        }
      }

      // Check if there's a shortage and add to production queue
      const shortage = item.quantity - quantityToReserve;
      if (shortage > 0) {
        itemsNeedingProduction.push({
          productId: item.productId,
          quantity: shortage
        });
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const availabilityAnalysis = await analyzeOrderAvailability(orderId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    await db.update(schema.orders)
      .set({ status: availabilityAnalysis.status })
      .where(eq(schema.orders.id, orderId));

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º
    const suggestedTasks = [];
    if (availabilityAnalysis.should_suggest_production) {
      const taskPriority = priority === 'urgent' ? 5 : 
                          priority === 'high' ? 4 : 
                          priority === 'normal' ? 3 : 2;

      const itemsNeedingProduction = availabilityAnalysis.items.filter(
        item => item.shortage > 0
      );

      for (const item of itemsNeedingProduction) {
        const task = await db.insert(schema.productionTasks).values({
          orderId,
          productId: item.product_id,
          requestedQuantity: item.shortage,
          priority: taskPriority,
          status: 'pending',
          createdBy: currentUserId,
          notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${orderNumber}. –î–µ—Ñ–∏—Ü–∏—Ç: ${item.shortage} —à—Ç.`
        }).returning();
        
        suggestedTasks.push(task[0]);
      }
    }

    // Get complete order data
    const completeOrder = await db.query.orders.findFirst({
      where: eq(schema.orders.id, orderId),
      with: {
        items: {
          with: {
            product: true
          }
        }
      }
    });

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    let message = '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω';
    if (availabilityAnalysis.status === 'confirmed') {
      message = '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏';
    } else if (availabilityAnalysis.status === 'in_production') {
      message = '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω - —Ç–æ–≤–∞—Ä—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è';
    } else if (suggestedTasks.length > 0) {
      message = `–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ ${suggestedTasks.length} –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`;
    }

    res.status(201).json({
      success: true,
      data: {
        ...completeOrder,
        status: availabilityAnalysis.status // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—Ç–≤–µ—Ç–µ
      },
      availabilityAnalysis: {
        status: availabilityAnalysis.status,
        can_be_fulfilled: availabilityAnalysis.can_be_fulfilled,
        total_items: availabilityAnalysis.total_items,
        available_items: availabilityAnalysis.available_items,
        needs_production_items: availabilityAnalysis.needs_production_items
      },
      suggestedTasks: suggestedTasks.length > 0 ? suggestedTasks : undefined,
      message
    });
  } catch (error) {
    next(error);
  }
});

// PUT /api/orders/:id - Update order
router.put('/:id', authenticateToken, authorizeRoles('manager', 'director'), async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const { 
      customerName, 
      customerContact, 
      contractNumber, // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
      deliveryDate, 
      priority, 
      notes,
      items,
      managerId // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    } = req.body;
    const currentUserId = req.user!.id;
    const currentUserRole = req.user!.role;

    // Check if order exists and user has access
    let whereCondition;
    if (currentUserRole === 'manager') {
      whereCondition = and(
        eq(schema.orders.id, orderId),
        eq(schema.orders.managerId, currentUserId)
      );
    } else {
      whereCondition = eq(schema.orders.id, orderId);
    }

    const existingOrder = await db.query.orders.findFirst({
      where: whereCondition,
      with: {
        items: true
      }
    });

    if (!existingOrder) {
      return next(createError('Order not found', 404));
    }

    // Check if order can be edited
    const nonEditableStatuses = ['completed', 'cancelled'];
    if (existingOrder.status && nonEditableStatuses.includes(existingOrder.status)) {
      return next(createError('Order cannot be edited in current status', 400));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (managerId && managerId !== existingOrder.managerId) {
      if (currentUserRole !== 'director') {
        return next(createError('–¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', 403));
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
      const targetManager = await db.query.users.findFirst({
        where: and(
          eq(schema.users.id, managerId),
          eq(schema.users.isActive, true)
        )
      });
      
      if (!targetManager) {
        return next(createError('–£–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω', 404));
      }
    }

    // Calculate new total amount
    let totalAmount = 0;
    if (items && Array.isArray(items)) {
      for (const item of items) {
        if (item.price && item.quantity) {
          totalAmount += Number(item.price) * Number(item.quantity);
        }
      }
    }

    // Update order
    const updateData: any = {
      updatedAt: new Date()
    };

    if (customerName) updateData.customerName = customerName;
    if (customerContact !== undefined) updateData.customerContact = customerContact || '';
    if (contractNumber !== undefined) updateData.contractNumber = contractNumber || ''; // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
    if (deliveryDate) updateData.deliveryDate = new Date(deliveryDate);
    if (priority) updateData.priority = priority;
    if (notes !== undefined) updateData.notes = notes || '';
    if (totalAmount > 0) updateData.totalAmount = totalAmount.toString();
    if (managerId && managerId !== existingOrder.managerId) updateData.managerId = managerId;

    const updatedOrder = await db.update(schema.orders)
      .set(updateData)
      .where(eq(schema.orders.id, orderId))
      .returning();

    // Update order items if provided
    if (items && Array.isArray(items)) {
      // Remove existing items and their reservations
      const existingItems = existingOrder.items || [];
      
      for (const existingItem of existingItems) {
        // Release reservations
        const reservedQty = existingItem.reservedQuantity || 0;
        if (reservedQty > 0) {
          await db.update(schema.stock)
            .set({
              reservedStock: sql`${schema.stock.reservedStock} - ${reservedQty}`,
              updatedAt: new Date()
            })
            .where(eq(schema.stock.productId, existingItem.productId));

          // Log reservation release
          await db.insert(schema.stockMovements).values({
            productId: existingItem.productId,
            movementType: 'release_reservation',
            quantity: -reservedQty,
            referenceId: orderId,
            referenceType: 'order',
            userId: currentUserId
          });
        }
      }

      // Delete existing items
      await db.delete(schema.orderItems)
        .where(eq(schema.orderItems.orderId, orderId));

      // Create new items and reserve stock
      for (const item of items) {
        // Create order item
        const newOrderItem = await db.insert(schema.orderItems).values({
          orderId,
          productId: item.productId,
          quantity: item.quantity,
          price: item.price.toString()
        }).returning();

        // Check stock availability and reserve
        const stock = await db.query.stock.findFirst({
          where: eq(schema.stock.productId, item.productId)
        });

        if (stock) {
          const availableStock = stock.currentStock - stock.reservedStock;
          const quantityToReserve = Math.min(availableStock, item.quantity);

          if (quantityToReserve > 0) {
            // Reserve available stock
            await db.update(schema.stock)
              .set({
                reservedStock: stock.reservedStock + quantityToReserve,
                updatedAt: new Date()
              })
              .where(eq(schema.stock.productId, item.productId));

            // Update order item with reserved quantity
            await db.update(schema.orderItems)
              .set({ reservedQuantity: quantityToReserve })
              .where(eq(schema.orderItems.id, newOrderItem[0].id));

            // Log stock movement
            await db.insert(schema.stockMovements).values({
              productId: item.productId,
              movementType: 'reservation',
              quantity: quantityToReserve,
              referenceId: orderId,
              referenceType: 'order',
              userId: currentUserId
            });
          }
        }
      }
    }

    // Add message about order update
    await db.insert(schema.orderMessages).values({
      orderId,
      userId: currentUserId,
      message: '–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω'
    });

    // Get complete updated order
    const completeOrder = await db.query.orders.findFirst({
      where: eq(schema.orders.id, orderId),
      with: {
        manager: {
          columns: {
            passwordHash: false
          }
        },
        items: {
          with: {
            product: {
              with: {
                stock: true,
                category: true
              }
            }
          }
        },
        messages: {
          with: {
            user: {
              columns: {
                passwordHash: false
              }
            }
          },
          orderBy: sql`${schema.orderMessages.createdAt} ASC`
        }
      }
    });

    res.json({
      success: true,
      data: completeOrder
    });
  } catch (error) {
    next(error);
  }
});

// PUT /api/orders/:id/confirm - Confirm order (move from 'new' to 'confirmed')
router.put('/:id/confirm', authenticateToken, authorizeRoles('manager', 'director'), async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const { comment } = req.body;
    const currentUserId = req.user!.id;
    const currentUserRole = req.user!.role;

    // Check if order exists and user has access
    let whereCondition;
    if (currentUserRole === 'manager') {
      whereCondition = and(
        eq(schema.orders.id, orderId),
        eq(schema.orders.managerId, currentUserId)
      );
    } else {
      whereCondition = eq(schema.orders.id, orderId);
    }

    const existingOrder = await db.query.orders.findFirst({
      where: whereCondition,
      with: {
        items: {
          with: {
            product: {
              with: {
                stock: true
              }
            }
          }
        }
      }
    });

    if (!existingOrder) {
      return next(createError('Order not found', 404));
    }

    // Check if order can be confirmed (only new orders)
    if (existingOrder.status !== 'new') {
      return next(createError(`Cannot confirm order with status '${existingOrder.status}'`, 400));
    }

    // Check if all items have sufficient stock or are already in production queue
    let needsProduction = false;
    const itemsNeedingProduction = [];

    for (const item of existingOrder.items) {
      const stock = item.product.stock;
      const availableStock = stock ? (stock.currentStock - stock.reservedStock) : 0;
      const shortage = item.quantity - (item.reservedQuantity || 0);

      if (shortage > 0) {
        needsProduction = true;
        itemsNeedingProduction.push({
          productId: item.productId,
          quantity: shortage
        });
      }
    }

    // Determine target status
    const targetStatus = needsProduction ? 'in_production' : 'confirmed';

    // Update order status
    const updatedOrder = await db.update(schema.orders)
      .set({
        status: targetStatus,
        updatedAt: new Date()
      })
      .where(eq(schema.orders.id, orderId))
      .returning();

    // Add items to production queue if needed
    if (needsProduction && itemsNeedingProduction.length > 0) {
      const productionItems = itemsNeedingProduction.map(item => ({
        orderId,
        productId: item.productId,
        quantity: item.quantity,
        priority: existingOrder.priority === 'urgent' ? 5 : 
                 existingOrder.priority === 'high' ? 4 : 
                 existingOrder.priority === 'normal' ? 3 : 2,
        status: 'queued' as const,
        notes: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ ${existingOrder.orderNumber}`
      }));

      await db.insert(schema.productionQueue).values(productionItems);
    }

    // Add message about confirmation
    const message = comment ? 
      `–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. ${comment}` : 
      `–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –°—Ç–∞—Ç—É—Å: ${targetStatus === 'in_production' ? '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' : '–≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ'}`;

    await db.insert(schema.orderMessages).values({
      orderId,
      userId: currentUserId,
      message
    });

    res.json({
      success: true,
      data: updatedOrder[0],
      message: targetStatus === 'in_production' ? 
        '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' : 
        '–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
    });
  } catch (error) {
    next(error);
  }
});

// PUT /api/orders/:id/status - Update order status
router.put('/:id/status', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const { status, comment } = req.body;
    const currentUserId = req.user!.id;

    if (!status) {
      return next(createError('Status is required', 400));
    }

    // Get existing order with items for processing reservations
    const existingOrder = await db.query.orders.findFirst({
      where: eq(schema.orders.id, orderId),
      with: {
        items: true
      }
    });

    if (!existingOrder) {
      return next(createError('Order not found', 404));
    }

    // Handle reservation release for completed/cancelled orders
    const statusesRequiringReservationRelease = ['completed', 'cancelled'];
    const statusesRequiringStockReduction = ['completed'];
    
    if (statusesRequiringReservationRelease.includes(status) && existingOrder.status !== status) {
      const orderItems = existingOrder.items || [];
      
      for (const item of orderItems) {
        const reservedQty = item.reservedQuantity || 0;
        
        if (reservedQty > 0) {
          if (statusesRequiringStockReduction.includes(status)) {
            // For completed: reduce both reserved and current stock
            await db.update(schema.stock)
              .set({
                currentStock: sql`${schema.stock.currentStock} - ${reservedQty}`,
                reservedStock: sql`${schema.stock.reservedStock} - ${reservedQty}`,
                updatedAt: new Date()
              })
              .where(eq(schema.stock.productId, item.productId));

            // Log outgoing movement
            await db.insert(schema.stockMovements).values({
              productId: item.productId,
              movementType: 'outgoing',
              quantity: -reservedQty,
              referenceId: orderId,
              referenceType: 'order',
              comment: `–û—Ç–≥—Ä—É–∑–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É ${existingOrder.orderNumber}`,
              userId: currentUserId
            });
          } else {
            // For cancelled: only release reservation
            await db.update(schema.stock)
              .set({
                reservedStock: sql`${schema.stock.reservedStock} - ${reservedQty}`,
                updatedAt: new Date()
              })
              .where(eq(schema.stock.productId, item.productId));

            // Log reservation release
            await db.insert(schema.stockMovements).values({
              productId: item.productId,
              movementType: 'release_reservation',
              quantity: -reservedQty,
              referenceId: orderId,
              referenceType: 'order',
              comment: `–û—Ç–º–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ –∑–∞–∫–∞–∑—É ${existingOrder.orderNumber}`,
              userId: currentUserId
            });
          }
        }
      }
    }

    const updatedOrder = await db.update(schema.orders)
      .set({
        status,
        updatedAt: new Date()
      })
      .where(eq(schema.orders.id, orderId))
      .returning();

    if (!updatedOrder.length) {
      return next(createError('Order not found', 404));
    }

    // Add message about status change
    const statusMessages: Record<string, string> = {
              'completed': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
      'ready': '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ'
    };

    const defaultMessage = statusMessages[status] || `Status changed to ${status}`;
    const message = comment ? `${defaultMessage}. ${comment}` : defaultMessage;

    await db.insert(schema.orderMessages).values({
      orderId,
      userId: currentUserId,
      message
    });

    res.json({
      success: true,
      data: updatedOrder[0],
      message: statusesRequiringReservationRelease.includes(status) ? 
        '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω, —Ä–µ–∑–µ—Ä–≤ —Ç–æ–≤–∞—Ä–æ–≤ —Å–Ω—è—Ç' : 
        '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/orders/:id/messages - Add message to order
router.post('/:id/messages', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const { message } = req.body;
    const userId = req.user!.id;

    if (!message) {
      return next(createError('Message is required', 400));
    }

    const newMessage = await db.insert(schema.orderMessages).values({
      orderId,
      userId,
      message
    }).returning();

    // Get message with user data
    const messageWithUser = await db.query.orderMessages.findFirst({
      where: eq(schema.orderMessages.id, newMessage[0].id),
      with: {
        user: {
          columns: {
            passwordHash: false
          }
        }
      }
    });

    res.status(201).json({
      success: true,
      data: messageWithUser
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/orders/recalculate-statuses - Recalculate all order statuses
router.post('/recalculate-statuses', authenticateToken, authorizeRoles('director'), async (req: AuthRequest, res, next) => {
  try {
    const { recalculateAllOrderStatuses } = await import('../utils/orderStatusCalculator');
    await recalculateAllOrderStatuses();

    res.json({
      success: true,
      message: '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –°–¢–ê–¢–£–°–û–í: –°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ù–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/orders/:id/analyze-availability - Analyze order availability (for testing)
router.post('/:id/analyze-availability', authenticateToken, authorizeRoles('director', 'manager'), async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const { analyzeOrderAvailability, cancelUnnecessaryProductionTasks } = await import('../utils/orderStatusCalculator');
    
    const analysis = await analyzeOrderAvailability(orderId);
    const cancelled = await cancelUnnecessaryProductionTasks(orderId);

    res.json({
      success: true,
      data: {
        analysis,
        cancelled_tasks: cancelled
      },
      message: `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç—É—Å: ${analysis.status}. –û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${cancelled.cancelled}`
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/orders/:id/availability - Get order availability analysis
router.get('/:id/availability', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const analysis = await analyzeOrderAvailability(orderId);

    res.json({
      success: true,
      data: analysis
    });
  } catch (error) {
    next(error);
  }
});

// DELETE /api/orders/:id - Delete order (cancel with reservation release)
router.delete('/:id', authenticateToken, authorizeRoles('manager', 'director'), async (req: AuthRequest, res, next) => {
  try {
    const orderId = Number(req.params.id);
    const currentUserId = req.user!.id;
    const currentUserRole = req.user!.role;

    // Check if order exists and user has access
    let whereCondition;
    if (currentUserRole === 'manager') {
      whereCondition = and(
        eq(schema.orders.id, orderId),
        eq(schema.orders.managerId, currentUserId)
      );
    } else {
      whereCondition = eq(schema.orders.id, orderId);
    }

    const existingOrder = await db.query.orders.findFirst({
      where: whereCondition,
      with: {
        items: true
      }
    });

    if (!existingOrder) {
      return next(createError('Order not found', 404));
    }

    // Check if order can be deleted (only new, confirmed, or in_production orders)
    const deletableStatuses = ['new', 'confirmed', 'in_production'];
    if (existingOrder.status && !deletableStatuses.includes(existingOrder.status)) {
      return next(createError(`Cannot delete order with status '${existingOrder.status}'`, 400));
    }

    // Release all reservations
    const orderItems = existingOrder.items || [];
    for (const item of orderItems) {
      const reservedQty = item.reservedQuantity || 0;
      if (reservedQty > 0) {
        await db.update(schema.stock)
          .set({
            reservedStock: sql`${schema.stock.reservedStock} - ${reservedQty}`,
            updatedAt: new Date()
          })
          .where(eq(schema.stock.productId, item.productId));

        // Log reservation release
        await db.insert(schema.stockMovements).values({
          productId: item.productId,
          movementType: 'release_reservation',
          quantity: -reservedQty,
          referenceId: orderId,
          referenceType: 'order',
          userId: currentUserId
        });
      }
    }

    // Log order deletion for audit
    await db.insert(schema.auditLog).values({
      tableName: 'orders',
      recordId: orderId,
      operation: 'DELETE',
      oldValues: existingOrder,
      userId: currentUserId
    });

    // Delete production queue items related to this order
    await db.delete(schema.productionQueue)
      .where(eq(schema.productionQueue.orderId, orderId));

    // Delete order messages
    await db.delete(schema.orderMessages)
      .where(eq(schema.orderMessages.orderId, orderId));

    // –û—Ç–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑–∞ (–∑–∞–¥–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–∫–∞–∑—É)
    await db.update(schema.productionTasks)
      .set({ 
        orderId: null,
        notes: sql`COALESCE(${schema.productionTasks.notes}, '') || ' | –û—Ç–≤—è–∑–∞–Ω–æ –æ—Ç –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–∏'`
      })
      .where(eq(schema.productionTasks.orderId, orderId));

    // Delete order items
    await db.delete(schema.orderItems)
      .where(eq(schema.orderItems.orderId, orderId));

    // Delete order
    await db.delete(schema.orders)
      .where(eq(schema.orders.id, orderId));

    res.json({
      success: true,
      message: `–ó–∞–∫–∞–∑ ${existingOrder.orderNumber} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`
    });
  } catch (error) {
    next(error);
  }
});

// GET /api/orders/by-product/:productId - Get orders by product
router.get('/by-product/:productId', authenticateToken, async (req: AuthRequest, res, next) => {
  try {
    const productId = Number(req.params.productId);
    const userRole = req.user!.role;
    const userId = req.user!.id;

    if (isNaN(productId) || productId <= 0) {
      return next(createError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞', 400));
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
    let whereConditions = [
      sql`EXISTS (
        SELECT 1 FROM order_items oi 
        WHERE oi.order_id = ${schema.orders.id} 
        AND oi.product_id = ${productId}
      )`,
      inArray(schema.orders.status, ['new', 'confirmed', 'in_production'])
    ];

    // Role-based filtering
    if (userRole === 'manager') {
      whereConditions.push(eq(schema.orders.managerId, userId));
    }

    const orders = await db.query.orders.findMany({
      where: and(...whereConditions),
      with: {
        manager: {
          columns: {
            passwordHash: false
          }
        },
        items: {
          where: eq(schema.orderItems.productId, productId),
          with: {
            product: {
              with: {
                stock: true
              }
            }
          }
        }
      },
      orderBy: sql`${schema.orders.createdAt} DESC`,
      limit: 50
    });

    res.json({
      success: true,
      data: orders
    });
  } catch (error) {
    next(error);
  }
});

// POST /api/orders/export - Export orders to Excel (–ó–∞–¥–∞—á–∞ 9.2)
router.post('/export', authenticateToken, requireExportPermission('orders'), async (req: AuthRequest, res, next) => {
  try {
    const { filters, format = 'xlsx' } = req.body; // –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä format
    const userRole = req.user!.role;
    const userId = req.user!.id;

    let whereConditions: any[] = [];

    // Role-based filtering
    if (userRole === 'manager') {
      whereConditions.push(eq(schema.orders.managerId, userId));
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (filters) {
      if (filters.status) {
        const statusArray = filters.status.split(',').map((s: string) => s.trim());
        if (statusArray.length === 1) {
          whereConditions.push(eq(schema.orders.status, statusArray[0] as any));
        } else {
          whereConditions.push(inArray(schema.orders.status, statusArray as any[]));
        }
      }

      if (filters.priority && filters.priority !== 'all') {
        whereConditions.push(eq(schema.orders.priority, filters.priority));
      }

      if (filters.managerId && userRole === 'director') {
        whereConditions.push(eq(schema.orders.managerId, parseInt(filters.managerId)));
      }

      if (filters.search) {
        whereConditions.push(
          sql`(
            ${schema.orders.orderNumber} ILIKE ${`%${filters.search}%`} OR
            ${schema.orders.customerName} ILIKE ${`%${filters.search}%`} OR
            ${schema.orders.customerContact} ILIKE ${`%${filters.search}%`}
          )`
        );
      }

      if (filters.dateFrom) {
        whereConditions.push(sql`${schema.orders.createdAt} >= ${filters.dateFrom}`);
      }

      if (filters.dateTo) {
        whereConditions.push(sql`${schema.orders.createdAt} <= ${filters.dateTo}`);
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const orders = await db.query.orders.findMany({
      where: whereConditions.length > 0 ? and(...whereConditions) : undefined,
      with: {
        items: {
          with: {
            product: true
          }
        },
        manager: true
      },
      orderBy: (orders, { desc }) => [desc(orders.createdAt)]
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    const formattedData = ExcelExporter.formatOrdersData(orders);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[:-]/g, '');
    const fileExtension = format === 'csv' ? 'csv' : 'xlsx';
    const filename = `orders-export-${timestamp}.${fileExtension}`;

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–ó–∞–¥–∞—á–∞ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    await ExcelExporter.exportData(res, {
      filename,
      sheetName: '–ó–∞–∫–∞–∑—ã',
      title: `–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ - ${new Date().toLocaleDateString('ru-RU')}`,
      columns: ExcelExporter.getOrdersColumns(),
      data: formattedData,
      format
    });

  } catch (error) {
    next(error);
  }
});

export default router; 