#!/usr/bin/env node

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const getDatabaseConfig = () => {
  console.log('üîß Migration DB Config:');
  console.log('   NODE_ENV:', process.env.NODE_ENV);
  console.log('   DATABASE_URL present:', !!process.env.DATABASE_URL);
  
  if (process.env.DATABASE_URL) {
    console.log('üîó Using DATABASE_URL for migration connection');
    return {
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
      connectionTimeoutMillis: 60000,
      idleTimeoutMillis: 60000,
      max: 5
    };
  }
  
  console.log('üîó Using individual DB variables for migration connection');
  return {
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    user: process.env.DB_USER || 'mikitavalkunovich',
    password: process.env.DB_PASSWORD || 'password',
    database: process.env.DB_NAME || 'erp_shvedoff',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    connectionTimeoutMillis: 30000,
    idleTimeoutMillis: 30000,
    max: 5
  };
};

// –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
const migrations = [
  {
    name: 'add_order_source',
    file: 'migrations/add_order_source.sql',
    checkQuery: `
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'orders' AND column_name = 'source'
    `,
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π source –∏ custom_source –≤ —Ç–∞–±–ª–∏—Ü—É orders'
  },
  {
    name: 'add_border_type_field',
    file: 'migrations/add_border_type_field.sql',
    checkQuery: `
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'products' AND column_name = 'border_type'
    `,
    description: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è border_type –≤ —Ç–∞–±–ª–∏—Ü—É products'
  },
  {
    name: 'create_permissions_and_assignments',
    file: 'migrations/create_permissions_and_assignments.sql',
    checkQuery: `
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name = 'permissions' AND table_schema = 'public'
    `,
    description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (permissions, role_permissions, user_permissions)'
  }
];

async function runMigrations() {
  let pool;
  
  try {
    console.log('üöÄ === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ú–ò–ì–†–ê–¶–ò–ò PRODUCTION –ë–î ===');
    console.log('');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    pool = new Pool(getDatabaseConfig());
    const client = await pool.connect();
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    let migrationsExecuted = 0;
    
    for (const migration of migrations) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–∏–≥—Ä–∞—Ü–∏—é: ${migration.name}`);
      console.log(`   üìã ${migration.description}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
        const checkResult = await client.query(migration.checkQuery);
        const needsMigration = checkResult.rows.length === 0;
        
        if (!needsMigration) {
          console.log(`   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é`);
          console.log('');
          continue;
        }
        
        console.log(`   üîÑ –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é...`);
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
        const migrationPath = path.join(__dirname, '..', migration.file);
        
        if (!fs.existsSync(migrationPath)) {
          console.log(`   ‚ö†Ô∏è –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${migration.file}`);
          console.log('');
          continue;
        }
        
        const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        await client.query('BEGIN');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
        const commands = migrationSQL
          .split(';')
          .map(cmd => cmd.trim())
          .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
        
        for (const command of commands) {
          if (command.trim()) {
            await client.query(command);
          }
        }
        
        await client.query('COMMIT');
        
        console.log(`   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migration.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        migrationsExecuted++;
        
      } catch (error) {
        await client.query('ROLLBACK');
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migration.name}:`);
        console.log(`      ${error.message}`);
        
        // –î–ª—è production –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        if (process.env.NODE_ENV === 'production') {
          console.log(`   ‚ö†Ô∏è Production —Ä–µ–∂–∏–º: –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É`);
        } else {
          throw error;
        }
      }
      
      console.log('');
    }
    
    client.release();
    
    console.log('üéâ === –ú–ò–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´ ===');
    console.log(`üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${migrationsExecuted}/${migrations.length}`);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:');
    console.error('   ', error.message);
    
    if (process.env.NODE_ENV === 'production') {
      console.log('‚ö†Ô∏è Production —Ä–µ–∂–∏–º: –ø—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é');
    } else {
      process.exit(1);
    }
  } finally {
    if (pool) {
      await pool.end();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
runMigrations();