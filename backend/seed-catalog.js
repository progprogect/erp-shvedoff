const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'mikitavalkunovich',
  password: '',
  database: 'erp_shvedoff'
});

async function seedCatalog() {
  try {
    console.log('üå± –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...\n');
    
    const client = await pool.connect();
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await client.query('TRUNCATE TABLE stock CASCADE');
    await client.query('TRUNCATE TABLE products CASCADE');
    await client.query('TRUNCATE TABLE categories CASCADE');
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    
    const categories = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      { name: '–õ–µ–∂–∞–∫–∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ', parentId: null, description: '–†–µ–∑–∏–Ω–æ–≤—ã–µ –º–∞—Ç—ã –¥–ª—è –∫—Ä—É–ø–Ω–æ–≥–æ —Ä–æ–≥–∞—Ç–æ–≥–æ —Å–∫–æ—Ç–∞' },
      { name: '–ö–æ–≤—Ä–∏–∫–∏', parentId: null, description: '–†–µ–∑–∏–Ω–æ–≤—ã–µ –∫–æ–≤—Ä–∏–∫–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' },
      { name: '–†—É–ª–æ–Ω–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è', parentId: null, description: '–ü–æ–∫—Ä—ã—Ç–∏—è –≤ —Ä—É–ª–æ–Ω–∞—Ö' },
      { name: '–ö—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è', parentId: null, description: '–î—é–±–µ–ª–∏, –≤–∏–Ω—Ç—ã, –∫—Ä–µ–ø–µ–∂' },
    ];
    
    const categoryIds = {};
    
    for (const cat of categories) {
      const result = await client.query(
        `INSERT INTO categories (name, parent_id, description, sort_order, path, created_at, updated_at)
         VALUES ($1, $2, $3, 0, $1, NOW(), NOW()) RETURNING id`,
        [cat.name, cat.parentId, cat.description]
      );
      categoryIds[cat.name] = result.rows[0].id;
      console.log(`   ‚úÖ ${cat.name} (ID: ${result.rows[0].id})`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª–µ–∂–∞–∫–æ–≤
    const subCategories = [
      { name: '–ß–µ—à—Å–∫–∏–µ (0 –ß–µ—à)', parentId: categoryIds['–õ–µ–∂–∞–∫–∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ'], description: '–õ–µ–∂–∞–∫–∏ —Å —Ä–∏—Å—É–Ω–∫–æ–º "0 –ß–µ—à"' },
      { name: '3-–ö–æ—Ä–æ–Ω—á–∞—Ç—ã–µ (3–ö–æ—Ä)', parentId: categoryIds['–õ–µ–∂–∞–∫–∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ'], description: '–õ–µ–∂–∞–∫–∏ —Å 3-–∫–æ—Ä–æ–Ω—á–∞—Ç—ã–º —Ä–∏—Å—É–Ω–∫–æ–º' },
      { name: '–ë—Ä–µ–Ω–¥–æ–≤—ã–µ', parentId: categoryIds['–õ–µ–∂–∞–∫–∏ —Ä–µ–∑–∏–Ω–æ–≤—ã–µ'], description: '–õ–µ–∂–∞–∫–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤' },
      { name: '–ö–æ–ª—å—Ü–µ–≤—ã–µ', parentId: categoryIds['–ö–æ–≤—Ä–∏–∫–∏'], description: '–ö–æ–≤—Ä–∏–∫–∏ –∫–æ–ª—å—Ü–µ–≤—ã–µ' },
      { name: '–ü—Ä–∏–¥–≤–µ—Ä–Ω—ã–µ', parentId: categoryIds['–ö–æ–≤—Ä–∏–∫–∏'], description: '–ö–æ–≤—Ä–∏–∫–∏ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –∑–æ–Ω' },
      { name: '–î—é–±–µ–ª–∏', parentId: categoryIds['–ö—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è'], description: '–†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥—é–±–µ–ª–µ–π' }
    ];
    
    for (const cat of subCategories) {
      const parentPath = await client.query('SELECT path FROM categories WHERE id = $1', [cat.parentId]);
      const path = `${parentPath.rows[0].path} / ${cat.name}`;
      
      const result = await client.query(
        `INSERT INTO categories (name, parent_id, description, sort_order, path, created_at, updated_at)
         VALUES ($1, $2, $3, 0, $4, NOW(), NOW()) RETURNING id`,
        [cat.name, cat.parentId, cat.description, path]
      );
      categoryIds[cat.name] = result.rows[0].id;
      console.log(`   ‚úÖ ${cat.name} (ID: ${result.rows[0].id})`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤—ã—Ö –ª–µ–∂–∞–∫–æ–≤
    const brandCategories = [
      { name: 'GEA', parentId: categoryIds['–ë—Ä–µ–Ω–¥–æ–≤—ã–µ'], description: '–õ–µ–∂–∞–∫–∏ –±—Ä–µ–Ω–¥–∞ GEA' },
      { name: 'Agrotek', parentId: categoryIds['–ë—Ä–µ–Ω–¥–æ–≤—ã–µ'], description: '–õ–µ–∂–∞–∫–∏ –±—Ä–µ–Ω–¥–∞ Agrotek' },
      { name: '–í–µ—Ä–±–ª—é–¥', parentId: categoryIds['–ë—Ä–µ–Ω–¥–æ–≤—ã–µ'], description: '–õ–µ–∂–∞–∫–∏ –±—Ä–µ–Ω–¥–∞ –í–µ—Ä–±–ª—é–¥' }
    ];
    
    for (const cat of brandCategories) {
      const parentPath = await client.query('SELECT path FROM categories WHERE id = $1', [cat.parentId]);
      const path = `${parentPath.rows[0].path} / ${cat.name}`;
      
      const result = await client.query(
        `INSERT INTO categories (name, parent_id, description, sort_order, path, created_at, updated_at)
         VALUES ($1, $2, $3, 0, $4, NOW(), NOW()) RETURNING id`,
        [cat.name, cat.parentId, cat.description, path]
      );
      categoryIds[cat.name] = result.rows[0].id;
      console.log(`   ‚úÖ ${cat.name} (ID: ${result.rows[0].id})`);
    }
    
    console.log('\nüì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    const products = [
      // –ß–µ—à—Å–∫–∏–µ –ª–µ–∂–∞–∫–∏
      {
        name: '–õ–µ–∂–∞–∫ 0 –ß–µ—à 1800√ó1200√ó30',
        article: 'LCH-1800-1200-30',
        categoryId: categoryIds['–ß–µ—à—Å–∫–∏–µ (0 –ß–µ—à)'],
        dimensions: JSON.stringify({ length: 1800, width: 1200, height: 30 }),
        characteristics: JSON.stringify({ surface: '—á–µ—Ä—Ç—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', weight: 45 }),
        price: '15430.00',
        normStock: 100,
        currentStock: 145,
        notes: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–ª–æ—á–Ω—ã—Ö —Ñ–µ—Ä–º'
      },
      {
        name: '–õ–µ–∂–∞–∫ 0 –ß–µ—à 1800√ó1200√ó35',
        article: 'LCH-1800-1200-35',
        categoryId: categoryIds['–ß–µ—à—Å–∫–∏–µ (0 –ß–µ—à)'],
        dimensions: JSON.stringify({ length: 1800, width: 1200, height: 35 }),
        characteristics: JSON.stringify({ surface: '—á–µ—Ä—Ç—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', weight: 52 }),
        price: '16780.00',
        normStock: 50,
        currentStock: 89,
        notes: '–£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞'
      },
      {
        name: '–õ–µ–∂–∞–∫ 0 –ß–µ—à 1800√ó1200√ó40',
        article: 'LCH-1800-1200-40',
        categoryId: categoryIds['–ß–µ—à—Å–∫–∏–µ (0 –ß–µ—à)'],
        dimensions: JSON.stringify({ length: 1800, width: 1200, height: 40 }),
        characteristics: JSON.stringify({ surface: '—á–µ—Ä—Ç—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', weight: 60 }),
        price: '18920.00',
        normStock: 80,
        currentStock: 2,
        notes: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–ª—è –æ—Å–æ–±–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞'
      },
      
      // –ë—Ä–µ–Ω–¥–æ–≤—ã–µ –ª–µ–∂–∞–∫–∏
      {
        name: '–õ–µ–∂–∞–∫ GEA 1800√ó1200 2—Å—Ç –ø–∞–∑–ª',
        article: 'GEA-1800-1200-2ST',
        categoryId: categoryIds['GEA'],
        dimensions: JSON.stringify({ length: 1800, width: 1200, height: 32 }),
        characteristics: JSON.stringify({ surface: '–ø–∞–∑–ª–æ–≤–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', brand: 'GEA' }),
        price: '22350.00',
        normStock: 30,
        currentStock: 0,
        notes: '–ü–∞–∑–ª–æ–≤–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ü–µ–ø–ª–µ–Ω–∏—è'
      },
      {
        name: '–õ–µ–∂–∞–∫ Agrotek Comfort 1800√ó1200',
        article: 'AGT-COMFORT-1800',
        categoryId: categoryIds['Agrotek'],
        dimensions: JSON.stringify({ length: 1800, width: 1200, height: 35 }),
        characteristics: JSON.stringify({ surface: '—Ä–∏—Ñ–ª—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', brand: 'Agrotek' }),
        price: '19850.00',
        normStock: 25,
        currentStock: 18,
        notes: '–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞'
      },
      
      // –ö–æ–≤—Ä–∏–∫–∏
      {
        name: '–ö–æ–≤—Ä–∏–∫ –∫–æ–ª—å—Ü–µ–≤–æ–π 600√ó400 –°–¢–ê–†',
        article: 'KK-600-400-STAR',
        categoryId: categoryIds['–ö–æ–ª—å—Ü–µ–≤—ã–µ'],
        dimensions: JSON.stringify({ length: 600, width: 400, height: 15 }),
        characteristics: JSON.stringify({ surface: '–∫–æ–ª—å—Ü–µ–≤–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', pattern: '–∑–≤–µ–∑–¥–∞' }),
        price: '2850.00',
        normStock: 50,
        currentStock: 8,
        notes: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–≤—Ä–∏–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–æ–Ω'
      },
      {
        name: '–ö–æ–≤—Ä–∏–∫ –ø—Ä–∏–¥–≤–µ—Ä–Ω—ã–π 800√ó600 –ö–ª–∞—Å—Å–∏–∫',
        article: 'KP-800-600-CLASSIC',
        categoryId: categoryIds['–ü—Ä–∏–¥–≤–µ—Ä–Ω—ã–µ'],
        dimensions: JSON.stringify({ length: 800, width: 600, height: 12 }),
        characteristics: JSON.stringify({ surface: '—Ä–∏—Ñ–ª—ë–Ω–∞—è', material: '—Ä–µ–∑–∏–Ω–∞', type: '–∫–ª–∞—Å—Å–∏–∫' }),
        price: '3420.00',
        normStock: 30,
        currentStock: 15,
        notes: '–ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –≥—Ä—É–ø–ø'
      },
      
      // –ö—Ä–µ–ø–µ–∂
      {
        name: '–î—é–±–µ–ª—å 10√ó80–º–º',
        article: 'DYB-10-80',
        categoryId: categoryIds['–î—é–±–µ–ª–∏'],
        dimensions: JSON.stringify({ diameter: 10, length: 80 }),
        characteristics: JSON.stringify({ material: '–ø–ª–∞—Å—Ç–∏–∫', head: '–ø–æ—Ç–∞–π–Ω–∞—è' }),
        price: '12.50',
        normStock: 1000,
        currentStock: 145,
        notes: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—Ä–µ–ø–µ–∂ –¥–ª—è —Ä–µ–∑–∏–Ω–æ–≤—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π'
      },
      {
        name: '–î—é–±–µ–ª—å 12√ó100–º–º —É—Å–∏–ª–µ–Ω–Ω—ã–π',
        article: 'DYB-12-100-USI',
        categoryId: categoryIds['–î—é–±–µ–ª–∏'],
        dimensions: JSON.stringify({ diameter: 12, length: 100 }),
        characteristics: JSON.stringify({ material: '–ø–ª–∞—Å—Ç–∏–∫_—É—Å–∏–ª–µ–Ω–Ω—ã–π', head: '—à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∞—è' }),
        price: '18.75',
        normStock: 500,
        currentStock: 67,
        notes: '–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫—Ä–µ–ø–µ–∂ –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π'
      }
    ];
    
    for (const product of products) {
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      const result = await client.query(
        `INSERT INTO products (name, article, category_id, dimensions, characteristics, price, norm_stock, notes, is_active, created_at, updated_at)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, true, NOW(), NOW()) RETURNING id`,
        [
          product.name,
          product.article,
          product.categoryId,
          product.dimensions,
          product.characteristics,
          product.price,
          product.normStock,
          product.notes
        ]
      );
      
      const productId = result.rows[0].id;
      
      // –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      await client.query(
        `INSERT INTO stock (product_id, current_stock, reserved_stock, updated_at)
         VALUES ($1, $2, 0, NOW())`,
        [productId, product.currentStock]
      );
      
      console.log(`   ‚úÖ ${product.name} (–æ—Å—Ç–∞—Ç–æ–∫: ${product.currentStock} —à—Ç)`);
    }
    
    client.release();
    console.log('\nüéâ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω!');
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–æ:');
    console.log(`   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length + subCategories.length + brandCategories.length}`);
    console.log(`   üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log('\nüîç –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä–∞–º (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

seedCatalog(); 