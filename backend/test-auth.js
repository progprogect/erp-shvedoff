const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  user: 'mikitavalkunovich',
  password: '',
  database: 'erp_shvedoff'
});

async function testAuth() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await client.query('SELECT username, role, full_name FROM users ORDER BY id');
    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:');
    users.rows.forEach(user => {
      console.log(`   ‚Ä¢ ${user.username} (${user.role}) - ${user.full_name}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ director / 123456...');
    const director = await client.query(
      'SELECT * FROM users WHERE username = $1', 
      ['director']
    );
    
    if (director.rows.length > 0) {
      const user = director.rows[0];
      const isValid = await bcrypt.compare('123456', user.password_hash);
      
      if (isValid) {
        console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.full_name}`);
        console.log(`   –†–æ–ª—å: ${user.role}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      } else {
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log(`   –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tables.rows.length}`);
    tables.rows.slice(0, 10).forEach(table => {
      console.log(`   ‚Ä¢ ${table.table_name}`);
    });
    if (tables.rows.length > 10) {
      console.log(`   ... –∏ –µ—â—ë ${tables.rows.length - 10} —Ç–∞–±–ª–∏—Ü`);
    }
    
    client.release();
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –ì–æ—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('   director / 123456    (–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º)');
    console.log('   manager1 / 123456    (–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º)');
    console.log('   production1 / 123456 (–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)');
    console.log('   warehouse1 / 123456  (–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–ª–∞–¥–∞)');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

testAuth(); 