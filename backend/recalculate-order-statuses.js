const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:xeIitZntkaAAeoZSFpsOsfCOKpoORwGA@yamanote.proxy.rlwy.net:41401/railway',
  ssl: { rejectUnauthorized: false }
});

/**
 * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
 */
async function recalculateOrderStatus(client, orderId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const orderResult = await client.query(
      'SELECT id, status FROM orders WHERE id = $1',
      [orderId]
    );

    if (orderResult.rows.length === 0) {
      console.log(`‚ö†Ô∏è –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    const currentStatus = orderResult.rows[0].status;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
    const itemsResult = await client.query(`
      SELECT 
        oi.product_id,
        oi.quantity,
        COALESCE(oi.reserved_quantity, 0) as reserved_quantity
      FROM order_items oi
      WHERE oi.order_id = $1
    `, [orderId]);

    if (itemsResult.rows.length === 0) {
      console.log(`‚ö†Ô∏è –ó–∞–∫–∞–∑ ${orderId} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤`);
      return currentStatus;
    }

    const orderItems = itemsResult.rows;
    const productIds = orderItems.map(item => item.product_id);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    const stockResult = await client.query(`
      SELECT 
        product_id,
        current_stock,
        reserved_stock
      FROM stock
      WHERE product_id = ANY($1::int[])
    `, [productIds]);

    const stockMap = new Map();
    stockResult.rows.forEach(stock => {
      stockMap.set(stock.product_id, {
        currentStock: stock.current_stock,
        reservedStock: stock.reserved_stock
      });
    });

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
    const productionResult = await client.query(`
      SELECT 
        product_id,
        COALESCE(SUM(
          CASE 
            WHEN status IN ('pending', 'in_progress', 'paused') 
            THEN requested_quantity
            ELSE 0
          END
        ), 0) as total_in_production
      FROM production_tasks
      WHERE product_id = ANY($1::int[])
        AND status IN ('pending', 'in_progress', 'paused')
      GROUP BY product_id
    `, [productIds]);

    const productionMap = new Map();
    productionResult.rows.forEach(prod => {
      productionMap.set(prod.product_id, prod.total_in_production);
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    let availableItems = 0;
    let partiallyAvailableItems = 0;
    let needsProductionItems = 0;
    let hasProduction = false;

    for (const item of orderItems) {
      const stockInfo = stockMap.get(item.product_id) || { currentStock: 0, reservedStock: 0 };
      const reservedForThisOrder = item.reserved_quantity;
      const totalInProduction = productionMap.get(item.product_id) || 0;

      // –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ = –æ–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ - (–æ–±—â–∏–π —Ä–µ–∑–µ—Ä–≤ - —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞)
      const availableForThisOrder = stockInfo.currentStock - (stockInfo.reservedStock - reservedForThisOrder);

      if (totalInProduction > 0) {
        hasProduction = true;
      }

      if (availableForThisOrder >= item.quantity) {
        availableItems++;
      } else if (availableForThisOrder > 0) {
        partiallyAvailableItems++;
      } else {
        needsProductionItems++;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    const allItemsFullyAvailable = availableItems === orderItems.length;
    const hasUnavailableItems = needsProductionItems > 0 || partiallyAvailableItems > 0;

    let newStatus = currentStatus;

    if (allItemsFullyAvailable) {
      // –í–°–ï —Ç–æ–≤–∞—Ä—ã –≤ –ü–û–õ–ù–û–ú –æ–±—ä–µ–º–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏
      if (currentStatus === 'confirmed' || currentStatus === 'in_production') {
        // –ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Ç–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ
        newStatus = 'ready';
      } else if (currentStatus === 'new') {
        // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        newStatus = 'confirmed';
      }
    } else if (hasProduction) {
      // –ï—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ - –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ
      newStatus = 'in_production';
    } else if (hasUnavailableItems) {
      // –¢–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
      if (currentStatus === 'confirmed') {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        newStatus = 'in_production';
      } else if (currentStatus === 'new') {
        // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        newStatus = 'new';
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (newStatus !== currentStatus) {
      await client.query(
        'UPDATE orders SET status = $1, updated_at = NOW() WHERE id = $2',
        [newStatus, orderId]
      );
      console.log(`‚úÖ –ó–∞–∫–∞–∑ ${orderId}: ${currentStatus} ‚Üí ${newStatus}`);
      return newStatus;
    } else {
      console.log(`‚û°Ô∏è –ó–∞–∫–∞–∑ ${orderId}: —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–ª—Å—è ${currentStatus}`);
      return currentStatus;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞ ${orderId}:`, error.message);
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
 */
async function recalculateAllOrderStatuses() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const ordersResult = await client.query(`
      SELECT id, order_number, status 
      FROM orders 
      WHERE status NOT IN ('completed', 'cancelled')
      ORDER BY id
    `);

    const orders = ordersResult.rows;
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${orders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞\n`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const order of orders) {
      const oldStatus = order.status;
      const newStatus = await recalculateOrderStatus(client, order.id);
      
      if (newStatus === null) {
        errorCount++;
      } else if (newStatus !== oldStatus) {
        updatedCount++;
      }
    }

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–ï–°–ß–ï–¢–ê:`);
    console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}`);
    console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: ${updatedCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`\nüéâ –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
if (require.main === module) {
  recalculateAllOrderStatuses().catch(console.error);
}

module.exports = { recalculateAllOrderStatuses }; 