const { drizzle } = require('drizzle-orm/better-sqlite3');
const Database = require('better-sqlite3');
const { 
  products, 
  stock, 
  orders, 
  orderItems, 
  productionQueue,
  auditLog 
} = require('./src/db/schema');
const { eq, sum, sql, and, inArray } = require('drizzle-orm');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const sqlite = new Database('./database.db');
const db = drizzle(sqlite);

async function diagnoseAndFix() {
  console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• ERP SHVEDOFF\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    const allProducts = await db.select().from(products);
    const allStock = await db.select().from(stock);
    const allOrders = await db.select().from(orders);
    const allOrderItems = await db.select().from(orderItems);
    const allProductionQueue = await db.select().from(productionQueue);
    
    console.log(`üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`);
    console.log(`   –°–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${allStock.length}`);
    console.log(`   –ó–∞–∫–∞–∑–æ–≤: ${allOrders.length}`);
    console.log(`   –ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–∞—Ö: ${allOrderItems.length}`);
    console.log(`   –ó–∞–¥–∞—á –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ: ${allProductionQueue.length}\n`);
    
    const problems = [];
    const fixes = [];
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (const product of allProducts) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä: ${product.name} (ID: ${product.id})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞
      const stockData = allStock.find(s => s.productId === product.id);
      if (!stockData) {
        problems.push(`‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.name}`);
        fixes.push({
          type: 'CREATE_STOCK',
          productId: product.id,
          quantity: 0,
          reserved: 0
        });
        continue;
      }
      
      // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      const activeOrderStatuses = ['new', 'confirmed', 'in_production'];
      const activeOrders = allOrders.filter(o => activeOrderStatuses.includes(o.status));
      const activeOrderIds = activeOrders.map(o => o.id);
      
      const productOrderItems = allOrderItems.filter(oi => 
        oi.productId === product.id && activeOrderIds.includes(oi.orderId)
      );
      
      const realReserved = productOrderItems.reduce((sum, item) => sum + item.quantity, 0);
      
      // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
      const productionItems = allProductionQueue.filter(pq => 
        pq.productId === product.id && pq.status === 'pending'
      );
      const realInProduction = productionItems.reduce((sum, item) => sum + item.quantity, 0);
      
      // –†–µ–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const realAvailable = Math.max(0, stockData.quantity - realReserved);
      
      console.log(`   üì¶ –°–∫–ª–∞–¥: ${stockData.quantity} —à—Ç`);
      console.log(`   üîí –†–µ–∑–µ—Ä–≤ –≤ –±–∞–∑–µ: ${stockData.reserved} —à—Ç`);
      console.log(`   üîí –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ (–∏–∑ –∑–∞–∫–∞–∑–æ–≤): ${realReserved} —à—Ç`);
      console.log(`   ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: ${realAvailable} —à—Ç`);
      console.log(`   üè≠ –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ: ${realInProduction} —à—Ç`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
      let hasProblems = false;
      
      if (stockData.reserved !== realReserved) {
        problems.push(`‚ùå ${product.name}: —Ä–µ–∑–µ—Ä–≤ –≤ –±–∞–∑–µ ${stockData.reserved}, —Ä–µ–∞–ª—å–Ω—ã–π ${realReserved}`);
        fixes.push({
          type: 'UPDATE_STOCK_RESERVED',
          productId: product.id,
          oldReserved: stockData.reserved,
          newReserved: realReserved
        });
        hasProblems = true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (stockData.quantity < 0) {
        problems.push(`‚ùå ${product.name}: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ ${stockData.quantity}`);
        fixes.push({
          type: 'FIX_NEGATIVE_STOCK',
          productId: product.id,
          oldQuantity: stockData.quantity,
          newQuantity: 0
        });
        hasProblems = true;
      }
      
      if (realReserved > stockData.quantity) {
        problems.push(`‚ùå ${product.name}: —Ä–µ–∑–µ—Ä–≤ ${realReserved} –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ —Å–∫–ª–∞–¥–µ ${stockData.quantity}`);
        fixes.push({
          type: 'FIX_OVERRESERVATION',
          productId: product.id,
          stockQuantity: stockData.quantity,
          reservedQuantity: realReserved,
          newReserved: Math.min(realReserved, stockData.quantity)
        });
        hasProblems = true;
      }
      
      if (!hasProblems) {
        console.log(`   ‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
      }
      
      console.log('');
    }
    
    // 3. –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø—Ä–æ–±–ª–µ–º
    console.log(`\nüìã –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (${problems.length}):`);
    problems.forEach((problem, i) => {
      console.log(`   ${i + 1}. ${problem}`);
    });
    
    if (fixes.length === 0) {
      console.log('\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.');
      return;
    }
    
    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    console.log(`\nüîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô (${fixes.length}):`);
    
    for (const fix of fixes) {
      try {
        switch (fix.type) {
          case 'CREATE_STOCK':
            await db.insert(stock).values({
              productId: fix.productId,
              quantity: fix.quantity,
              reserved: fix.reserved,
              lastUpdated: new Date().toISOString()
            });
            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID ${fix.productId}`);
            break;
            
          case 'UPDATE_STOCK_RESERVED':
            await db.update(stock)
              .set({ 
                reserved: fix.newReserved,
                lastUpdated: new Date().toISOString()
              })
              .where(eq(stock.productId, fix.productId));
            console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID ${fix.productId}: ${fix.oldReserved} ‚Üí ${fix.newReserved}`);
            break;
            
          case 'FIX_NEGATIVE_STOCK':
            await db.update(stock)
              .set({ 
                quantity: fix.newQuantity,
                lastUpdated: new Date().toISOString()
              })
              .where(eq(stock.productId, fix.productId));
            console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID ${fix.productId}: ${fix.oldQuantity} ‚Üí ${fix.newQuantity}`);
            break;
            
          case 'FIX_OVERRESERVATION':
            await db.update(stock)
              .set({ 
                reserved: fix.newReserved,
                lastUpdated: new Date().toISOString()
              })
              .where(eq(stock.productId, fix.productId));
            console.log(`   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —á—Ä–µ–∑–º–µ—Ä–Ω—ã–π —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ID ${fix.productId}: ${fix.reservedQuantity} ‚Üí ${fix.newReserved}`);
            break;
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∞—É–¥–∏—Ç
        await db.insert(auditLog).values({
          tableName: 'stock',
          operation: 'fix_data_integrity',
          recordId: fix.productId,
          changes: JSON.stringify(fix),
          userId: 1, // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          timestamp: new Date().toISOString()
        });
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ${fix.type}: ${error.message}`);
      }
    }
    
    console.log('\nüéØ –ü–ï–†–ï–°–ß–ï–¢ –í–°–ï–• –ú–ï–¢–†–ò–ö:');
    
    // 5. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    for (const product of allProducts) {
      const stockData = await db.select().from(stock).where(eq(stock.productId, product.id)).limit(1);
      
      if (stockData.length === 0) continue;
      
      // –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤—ã –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
      const activeOrderStatuses = ['new', 'confirmed', 'in_production'];
      const realReserved = await db
        .select({
          total: sql`COALESCE(SUM(${orderItems.quantity}), 0)`
        })
        .from(orderItems)
        .innerJoin(orders, eq(orders.id, orderItems.orderId))
        .where(
          and(
            eq(orderItems.productId, product.id),
            inArray(orders.status, activeOrderStatuses)
          )
        );
      
      const reservedCount = parseInt(realReserved[0].total) || 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
      await db.update(stock)
        .set({ 
          reserved: reservedCount,
          lastUpdated: new Date().toISOString()
        })
        .where(eq(stock.productId, product.id));
      
      const currentStock = stockData[0];
      const available = Math.max(0, currentStock.quantity - reservedCount);
      
      console.log(`   üì¶ ${product.name}: —Å–∫–ª–∞–¥ ${currentStock.quantity}, —Ä–µ–∑–µ—Ä–≤ ${reservedCount}, –¥–æ—Å—Ç—É–ø–Ω–æ ${available}`);
    }
    
    console.log('\n‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–´ –ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!');
    console.log('üîÑ –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    sqlite.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
diagnoseAndFix(); 