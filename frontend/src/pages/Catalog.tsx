import React, { useState, useMemo, useEffect } from 'react';
import { Row, Col, Card, Tree, Input, Button, Space, Typography, Tag, Badge, Select, InputNumber, Collapse, Spin, Table, Modal, Checkbox, App } from 'antd';
import { formatPriceWithCurrency } from '../utils/priceUtils';
import {
  SearchOutlined,
  PlusOutlined,
  AppstoreOutlined,
  InboxOutlined,
  BorderOutlined,
  FilterOutlined,
  ClearOutlined,
  ReloadOutlined,
  DeleteOutlined,
  EditOutlined,
  CheckOutlined,
  CloseOutlined,
  DoubleRightOutlined,
  DoubleLeftOutlined,
  FolderOutlined
} from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';
import { catalogApi, Category, Product, ProductFilters } from '../services/catalogApi';
import { materialsApi } from '../services/materialsApi';
import { surfacesApi } from '../services/surfacesApi';
import { logosApi } from '../services/logosApi';
import carpetEdgeTypesApi from '../services/carpetEdgeTypesApi';
import bottomTypesApi from '../services/bottomTypesApi';
import { puzzleTypesApi } from '../services/puzzleTypesApi';
import { stockApi, StockItem } from '../services/stockApi';
import CreateProductModal from '../components/CreateProductModal';
import CreateCategoryModal from '../components/CreateCategoryModal';
import DeleteCategoryModal from '../components/DeleteCategoryModal';
import StockAdjustmentModal from '../components/StockAdjustmentModal';
import usePermissions from '../hooks/usePermissions';
import { handleFormError } from '../utils/errorUtils';

const { Title, Text } = Typography;
const { Search } = Input;
const { Option } = Select;
const { Panel } = Collapse;

const Catalog: React.FC = () => {
  const [searchText, setSearchText] = useState('');
  const [checkedCategories, setCheckedCategories] = useState<number[]>([]);
  const [stockFilter, setStockFilter] = useState<string>('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(1000); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const [showSizeFilters, setShowSizeFilters] = useState(false);
  const [loading, setLoading] = useState(false);
  const [categories, setCategories] = useState<Category[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [totalProducts, setTotalProducts] = useState(0);  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
  const [createProductModalVisible, setCreateProductModalVisible] = useState(false);
  const [createCategoryModalVisible, setCreateCategoryModalVisible] = useState(false);
  const [deleteCategoryModalVisible, setDeleteCategoryModalVisible] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  
  // üî• –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
  const [adjustmentModalVisible, setAdjustmentModalVisible] = useState(false);
  const [selectedStockItem, setSelectedStockItem] = useState<StockItem | null>(null);
  
  // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 2.1
  const [selectedMaterials, setSelectedMaterials] = useState<number[]>([]);
  const [selectedSurfaces, setSelectedSurfaces] = useState<number[]>([]);
  const [selectedGrades, setSelectedGrades] = useState<string[]>([]);
  const [selectedBorderTypes, setSelectedBorderTypes] = useState<string[]>([]); // –ó–∞–¥–∞—á–∞ 7.1
  const [selectedPressTypes, setSelectedPressTypes] = useState<string[]>([]); // AC3: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Å—Å—É
  const [selectedProductTypes, setSelectedProductTypes] = useState<string[]>([]); // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
  const [weightFilter, setWeightFilter] = useState({
    min: null as number | null,
    max: null as number | null
  });
  const [onlyInStock, setOnlyInStock] = useState(false);
  
  // üî• –ù–û–í–û–ï: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–≤–µ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã —Å–≤–µ—Ä—Ö—É)
  const [sortBy, setSortBy] = useState<string>(() => {
    return localStorage.getItem('catalog-sortBy') || 'updatedAt';
  });
  const [sortOrder, setSortOrder] = useState<'ASC' | 'DESC'>(() => {
    return (localStorage.getItem('catalog-sortOrder') as 'ASC' | 'DESC') || 'DESC';
  });
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞
  const [selectedLogos, setSelectedLogos] = useState<number[]>([]);
  const [stockRangeFilter, setStockRangeFilter] = useState({
    min: null as number | null,
    max: null as number | null
  });
  
  // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—è –∫–æ–≤—Ä–∞
  const [selectedCarpetEdgeTypes, setSelectedCarpetEdgeTypes] = useState<string[]>([]);
  const [selectedCarpetEdgeSides, setSelectedCarpetEdgeSides] = useState<number[]>([]);
  const [selectedCarpetEdgeStrength, setSelectedCarpetEdgeStrength] = useState<string[]>([]);
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∑—É –∫–æ–≤—Ä–∞
  const [selectedBottomTypeIds, setSelectedBottomTypeIds] = useState<number[]>([]);
  const [selectedPuzzleTypeIds, setSelectedPuzzleTypeIds] = useState<number[]>([]);
  
  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [materials, setMaterials] = useState<any[]>([]);
  const [surfaces, setSurfaces] = useState<any[]>([]);
  const [logos, setLogos] = useState<any[]>([]);
  const [carpetEdgeTypes, setCarpetEdgeTypes] = useState<any[]>([]);
  const [bottomTypes, setBottomTypes] = useState<any[]>([]);
  const [puzzleTypes, setPuzzleTypes] = useState<any[]>([]);
  const [loadingReferences, setLoadingReferences] = useState(false);
  
  // –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
  const [sizeFilters, setSizeFilters] = useState({
    lengthMin: null as number | null,
    lengthMax: null as number | null,
    widthMin: null as number | null,
    widthMax: null as number | null,
    thicknessMin: null as number | null,
    thicknessMax: null as number | null,
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ó–∞–¥–∞—á–∞ 7.3)
  const [selectedProducts, setSelectedProducts] = useState<number[]>([]);
  const [moveModalVisible, setMoveModalVisible] = useState(false);
  const [movingProducts, setMovingProducts] = useState(false);
  const [selectedTargetCategory, setSelectedTargetCategory] = useState<number | null>(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ (–ó–∞–¥–∞—á–∞ 9.2)
  const [exportingCatalog, setExportingCatalog] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const [editingCategoryId, setEditingCategoryId] = useState<number | null>(null);
  const [editingCategoryName, setEditingCategoryName] = useState<string>('');
  const [savingCategory, setSavingCategory] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
  const [categoriesMinimized, setCategoriesMinimized] = useState<boolean>(() => {
    const saved = localStorage.getItem('catalog-categories-minimized');
    return saved ? JSON.parse(saved) : false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
  });

  const { user, token } = useAuthStore();
  const { canCreate, canEdit, canDelete, canManage } = usePermissions();
  const navigate = useNavigate();
  const { message } = App.useApp();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (token) {
      loadData();
      loadReferences();
    }
  }, [token]);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (token) {
      loadProducts();
    }
  }, [searchText, checkedCategories, stockFilter, selectedMaterials, selectedSurfaces,
      selectedLogos, selectedGrades, selectedPressTypes, selectedProductTypes, weightFilter, onlyInStock, selectedBorderTypes,
      selectedCarpetEdgeTypes, selectedCarpetEdgeSides, selectedCarpetEdgeStrength,
      selectedBottomTypeIds, selectedPuzzleTypeIds, sizeFilters, sortBy, sortOrder, currentPage]);

  const loadData = async () => {
    if (!token) return;
    
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞—á–∞–ª–µ
      const categoriesResponse = await catalogApi.getCategories();

      if (categoriesResponse.success) {
        setCategories(categoriesResponse.data);
      }
      
      // –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ loadProducts —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      await loadProducts();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞');
    } finally {
      setLoading(false);
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  const loadProducts = async () => {
    if (!token) return;
    
    try {
      const filters: ProductFilters = {
        search: searchText,
        categoryId: checkedCategories.length === 1 ? checkedCategories[0] : undefined,
        stockStatus: stockFilter === 'all' ? undefined : 
          stockFilter === 'critical' ? 'out_of_stock' : 
          stockFilter === 'low' ? 'low_stock' : 
          stockFilter === 'normal' ? 'in_stock' : undefined,
        materialIds: selectedMaterials.length > 0 ? selectedMaterials : undefined,
        surfaceIds: selectedSurfaces.length > 0 ? selectedSurfaces : undefined,
        logoIds: selectedLogos.length > 0 ? selectedLogos : undefined,
        grades: selectedGrades.length > 0 ? selectedGrades : undefined,
        pressTypes: selectedPressTypes.length > 0 ? selectedPressTypes : undefined, // AC3: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Å—Å—É
        productTypes: selectedProductTypes.length > 0 ? selectedProductTypes : undefined, // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        weightMin: weightFilter.min || undefined,
        weightMax: weightFilter.max || undefined,
        onlyInStock,
        borderTypes: selectedBorderTypes.length > 0 ? selectedBorderTypes : undefined,
        carpetEdgeTypes: selectedCarpetEdgeTypes.length > 0 ? selectedCarpetEdgeTypes : undefined,
        carpetEdgeSides: selectedCarpetEdgeSides.length > 0 ? selectedCarpetEdgeSides : undefined,
        carpetEdgeStrength: selectedCarpetEdgeStrength.length > 0 ? selectedCarpetEdgeStrength : undefined,
        bottomTypeIds: selectedBottomTypeIds.length > 0 ? selectedBottomTypeIds : undefined,
        puzzleTypeIds: selectedPuzzleTypeIds.length > 0 ? selectedPuzzleTypeIds : undefined,
        lengthMin: sizeFilters.lengthMin || undefined,
        lengthMax: sizeFilters.lengthMax || undefined,
        widthMin: sizeFilters.widthMin || undefined,
        widthMax: sizeFilters.widthMax || undefined,
        thicknessMin: sizeFilters.thicknessMin || undefined,
        thicknessMax: sizeFilters.thicknessMax || undefined,
        sortBy,
        sortOrder
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç –ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', filters);
      console.log('üìä –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:', selectedMaterials);
      console.log('üé® –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:', selectedSurfaces);
      console.log('üîΩ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∏–∑—ã –∫–æ–≤—Ä–∞:', selectedBottomTypeIds);
      console.log('‚úÇÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∞—è –∫–æ–≤—Ä–∞:', selectedCarpetEdgeTypes);

      const productsResponse = await catalogApi.getProducts({ 
        ...filters, 
        page: currentPage, 
        limit: pageSize
      });

      if (productsResponse.success) {
        console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', productsResponse.data.length);
        console.log('üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:', productsResponse.pagination?.total);
        setProducts(productsResponse.data);
        setTotalProducts(productsResponse.pagination?.total || 0);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞)
  const loadReferences = async () => {
    if (!token) return;
    
    setLoadingReferences(true);
    try {
      const [materialsResponse, surfacesResponse, logosResponse, carpetEdgeTypesResponse, bottomTypesResponse, puzzleTypesResponse] = await Promise.all([
        materialsApi.getMaterials(token),
        surfacesApi.getSurfaces(token),
        logosApi.getLogos(token),
        carpetEdgeTypesApi.getCarpetEdgeTypes(token),
        bottomTypesApi.getBottomTypes(token),
        puzzleTypesApi.getPuzzleTypes(token)
      ]);

      if (materialsResponse.success) {
        setMaterials(materialsResponse.data);
        console.log('üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', materialsResponse.data.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', materialsResponse);
      }

      if (surfacesResponse.success) {
        setSurfaces(surfacesResponse.data);
        console.log('üé® –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', surfacesResponse.data.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π:', surfacesResponse);
      }

      if (logosResponse.success) {
        setLogos(logosResponse.data);
        console.log('üè∑Ô∏è –õ–æ–≥–æ—Ç–∏–ø—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', logosResponse.data.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤:', logosResponse);
      }

      if (carpetEdgeTypesResponse.success) {
        setCarpetEdgeTypes(carpetEdgeTypesResponse.data);
        console.log('‚úÇÔ∏è –¢–∏–ø—ã –∫—Ä–∞—è –∫–æ–≤—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', carpetEdgeTypesResponse.data.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫—Ä–∞—è –∫–æ–≤—Ä–∞:', carpetEdgeTypesResponse);
      }

      if (bottomTypesResponse.success) {
        setBottomTypes(bottomTypesResponse.data);
        console.log('üëá –¢–∏–ø—ã –Ω–∏–∑–æ–≤ –∫–æ–≤—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', bottomTypesResponse.data.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –Ω–∏–∑–æ–≤ –∫–æ–≤—Ä–∞:', bottomTypesResponse);
      }

      if (puzzleTypesResponse.success) {
        setPuzzleTypes(puzzleTypesResponse.data);
        console.log('üß© –¢–∏–ø—ã –ø–∞–∑–∑–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', puzzleTypesResponse.data.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –ø–∞–∑–∑–ª–∞:', puzzleTypesResponse);
      }
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤');
    } finally {
      setLoadingReferences(false);
    }
  };

  const getStockStatus = (current: number, reserved: number) => {
    const available = current - reserved;
    if (available < 0) return { status: 'negative', color: '#ff4d4f', text: '–ü–µ—Ä–µ–∑–∞–∫–∞–∑' };
    if (available <= 0) return { status: 'critical', color: '#ff4d4f', text: '–ó–∞–∫–æ–Ω—á–∏–ª—Å—è' };
    if (available < 20) return { status: 'low', color: '#faad14', text: '–ú–∞–ª–æ' };
    return { status: 'normal', color: '#52c41a', text: '–í –Ω–∞–ª–∏—á–∏–∏' };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const getAllChildCategories = (categoryId: number): number[] => {
    const category = categories.find(cat => cat.id === categoryId);
    if (!category) return [categoryId];
    
    if (category.children) {
      const childIds = category.children.map(child => child.id);
      return [categoryId, ...childIds];
    }
    
    return [categoryId];
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const handleCategoryCheck = (checkedKeys: any) => {
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ —Ç–æ–≤–∞—Ä—ã)
    const categoryKeys = checkedKeys.filter((key: any) => !key.toString().startsWith('product-'));
    
    let expandedKeys = [...categoryKeys];
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ
    categoryKeys.forEach((key: number) => {
      const childKeys = getAllChildCategories(key);
      expandedKeys = [...expandedKeys, ...childKeys];
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    expandedKeys = Array.from(new Set(expandedKeys));
    
    setCheckedCategories(expandedKeys);
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –¥–µ—Ä–µ–≤–∞
  const handleTreeSelect = (selectedKeys: any, info: any) => {
    if (selectedKeys.length > 0) {
      const selectedKey = selectedKeys[0];
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–≤–∞—Ä - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫–µ
      if (selectedKey.toString().startsWith('product-')) {
        const productId = selectedKey.replace('product-', '');
        navigate(`/catalog/products/${productId}`);
      }
    }
  };

  // –¢–æ–≤–∞—Ä—ã —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –Ω–∞ backend, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
  const filteredProducts = products;

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ backend
  const paginatedProducts = filteredProducts;
  const totalPages = Math.ceil(totalProducts / pageSize);

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const popularSizes = ['1800√ó1200', '1600√ó1000', '1000√ó1000'];
  
  // –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤
  const quickSizeRanges = [
    { label: '–ë–æ–ª—å—à–∏–µ (>1500–º–º)', lengthMin: 1500, widthMin: 1000 },
    { label: '–°—Ä–µ–¥–Ω–∏–µ (1000-1500–º–º)', lengthMin: 1000, lengthMax: 1500, widthMin: 800, widthMax: 1500 },
    { label: '–ú–∞–ª—ã–µ (<1000–º–º)', lengthMax: 1000, widthMax: 1000 },
  ];

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
  const applyQuickSizeRange = (range: any) => {
    setSizeFilters({
      lengthMin: range.lengthMin || null,
      lengthMax: range.lengthMax || null,
      widthMin: range.widthMin || null,
      widthMax: range.widthMax || null,
      thicknessMin: null,
      thicknessMax: null,
    });
    setCurrentPage(1);
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞)
  const clearAllFilters = () => {
    setSearchText('');
    setCheckedCategories([]);
    setStockFilter('all');
    setSizeFilters({
      lengthMin: null,
      lengthMax: null,
      widthMin: null,
      widthMax: null,
      thicknessMin: null,
      thicknessMax: null,
    });
    setSelectedMaterials([]);
    setSelectedSurfaces([]);
    setSelectedGrades([]);
    setSelectedBorderTypes([]); // –ó–∞–¥–∞—á–∞ 7.1
    setSelectedPressTypes([]); // AC3: –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–µ—Å—Å—É
    setSelectedProductTypes([]); // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
    setWeightFilter({ min: null, max: null });
    setOnlyInStock(false);
    
    // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    setSelectedLogos([]);
    setStockRangeFilter({ min: null, max: null });
    
    // –§–∏–ª—å—Ç—Ä—ã –∫—Ä–∞—è –∫–æ–≤—Ä–∞
    setSelectedCarpetEdgeTypes([]);
    setSelectedCarpetEdgeSides([]);
    setSelectedCarpetEdgeStrength([]);
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∑—É –∫–æ–≤—Ä–∞
    setSelectedBottomTypeIds([]);

    setCurrentPage(1);
  };

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
  const clearSizeFilters = () => {
    setSizeFilters({
      lengthMin: null,
      lengthMax: null,
      widthMin: null,
      widthMax: null,
      thicknessMin: null,
      thicknessMax: null,
    });
    setCurrentPage(1);
  };

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
  const clearMaterialFilters = () => {
    setSelectedMaterials([]);
    setSelectedSurfaces([]);
    setSelectedLogos([]);
    setSelectedBorderTypes([]); // –ó–∞–¥–∞—á–∞ 7.1
    setCurrentPage(1);
  };

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  const clearProductFilters = () => {
    setSearchText('');
    setCheckedCategories([]);
    setStockFilter('all');
    setSelectedMaterials([]);
    setSelectedSurfaces([]);
    setSelectedLogos([]);
    setSelectedGrades([]);
    setWeightFilter({ min: null, max: null });
    setOnlyInStock(false);
    setSelectedBorderTypes([]);
    setSelectedCarpetEdgeTypes([]);
    setSelectedCarpetEdgeSides([]);
    setSelectedCarpetEdgeStrength([]);
    setSelectedBottomTypeIds([]);
    setSelectedPuzzleTypeIds([]);
    setSizeFilters({
      lengthMin: null,
      lengthMax: null,
      widthMin: null,
      widthMax: null,
      thicknessMin: null,
      thicknessMax: null,
    });
  };

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤
  const clearStockFilters = () => {
    setStockFilter('all');
    setOnlyInStock(false);
    setStockRangeFilter({ min: null, max: null });
    setCurrentPage(1);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–æ–≤
  const hasSizeFilters = Object.values(sizeFilters).some(value => value !== null);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞)
  const hasAdvancedFilters = 
    onlyInStock || 
    selectedMaterials.length > 0 || 
    selectedSurfaces.length > 0 || 
    selectedGrades.length > 0 || 
    selectedPressTypes.length > 0 || // AC3: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Å—Å—É
    selectedProductTypes.length > 0 || // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
    selectedBorderTypes.length > 0 || // –ó–∞–¥–∞—á–∞ 7.1
    weightFilter.min !== null || 
    weightFilter.max !== null ||
    selectedLogos.length > 0 ||
    stockRangeFilter.min !== null ||
    stockRangeFilter.max !== null ||
    // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫—Ä–∞—è –∫–æ–≤—Ä–∞
    selectedCarpetEdgeTypes.length > 0 ||
    selectedCarpetEdgeSides.length > 0 ||
    selectedCarpetEdgeStrength.length > 0 ||
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∑—É –∫–æ–≤—Ä–∞
    selectedBottomTypeIds.length > 0 ||
    // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–∞–∑–∑–ª–∞
    selectedPuzzleTypeIds.length > 0;
  
  // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const getActiveFiltersCount = () => {
    return (
      (searchText ? 1 : 0) +
      (stockFilter !== 'all' ? 1 : 0) +
      (checkedCategories.length > 0 ? 1 : 0) +
      (hasSizeFilters ? 1 : 0) +
      (selectedMaterials.length > 0 ? 1 : 0) +
      (selectedSurfaces.length > 0 ? 1 : 0) +
      (selectedLogos.length > 0 ? 1 : 0) +
      (selectedGrades.length > 0 ? 1 : 0) +
      (selectedPressTypes.length > 0 ? 1 : 0) +
      (selectedProductTypes.length > 0 ? 1 : 0) +
      (weightFilter.min !== null || weightFilter.max !== null ? 1 : 0) +
      (stockRangeFilter.min !== null || stockRangeFilter.max !== null ? 1 : 0) +
      (onlyInStock ? 1 : 0) +
      // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—è –∫–æ–≤—Ä–∞
      (selectedCarpetEdgeTypes.length > 0 ? 1 : 0) +
      (selectedCarpetEdgeSides.length > 0 ? 1 : 0) +
      (selectedCarpetEdgeStrength.length > 0 ? 1 : 0) +
      // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∑—É –∫–æ–≤—Ä–∞
      (selectedBottomTypeIds.length > 0 ? 1 : 0) +
      // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–∞–∑–∑–ª–∞
      (selectedPuzzleTypeIds.length > 0 ? 1 : 0)
    );
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ª—é–±—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const hasActiveFilters = getActiveFiltersCount() > 0;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π
  const canEditCatalog = canEdit('catalog');

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const handleDeleteProduct = (product: Product) => {
    Modal.confirm({
      title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
      content: (
        <div>
          <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?</p>
          <div style={{ background: '#f5f5f5', padding: '12px', borderRadius: '6px', marginTop: '12px' }}>
            <Text strong>{product.name}</Text>
            <br />
            <Text type="secondary">–ê—Ä—Ç–∏–∫—É–ª: {product.article || '–ù–µ —É–∫–∞–∑–∞–Ω'}</Text>
            <br />
            <Text type="secondary">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.categoryName}</Text>
          </div>
          <div style={{ marginTop: '12px', color: '#ff4d4f' }}>
            <Text type="danger">
              ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫—Ä—ã—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. 
              –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
            </Text>
          </div>
        </div>
      ),
      okText: '–£–¥–∞–ª–∏—Ç—å',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      okType: 'danger',
      onOk: async () => {
        try {
          const response = await catalogApi.deleteProduct(product.id);
          if (response.success) {
            message.success('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
          } else {
            message.error(response.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
          }
        } catch (error: any) {
          console.error('Error deleting product:', error);
          message.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
        }
      }
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ó–∞–¥–∞—á–∞ 7.3)
  const handleMoveProducts = async (targetCategoryId: number) => {
    if (selectedProducts.length === 0) {
      message.warning('–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è');
      return;
    }

    setMovingProducts(true);
    try {
      const response = await catalogApi.moveProducts(selectedProducts, targetCategoryId);
      
      if (response.success) {
        message.success(response.message || `–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ ${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        setSelectedProducts([]); // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        setSelectedTargetCategory(null); // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        setMoveModalVisible(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        loadProducts(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      } else {
        message.error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤');
      }
    } catch (error: any) {
      handleFormError(error, undefined, {
        key: 'move-products-error',
        duration: 6
      });
    } finally {
      setMovingProducts(false);
    }
  };



  // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ Excel (–ó–∞–¥–∞—á–∞ 9.2)
  const handleExportCatalog = async (selectedOnly: boolean = false) => {
    setExportingCatalog(true);
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const currentFilters: any = {
        search: searchText || undefined,
        categoryId: checkedCategories.length === 1 ? checkedCategories[0] : undefined,
        stockStatus: stockFilter !== 'all' ? 
          (stockFilter === 'critical' ? 'out_of_stock' as const: 
           stockFilter === 'low' ? 'low_stock' as const: 
           stockFilter === 'normal' ? 'in_stock' as const: undefined) : undefined,
        materialIds: selectedMaterials.length > 0 ? selectedMaterials : undefined,
        surfaceIds: selectedSurfaces.length > 0 ? selectedSurfaces : undefined,
        logoIds: selectedLogos.length > 0 ? selectedLogos : undefined,
        grades: selectedGrades.length > 0 ? selectedGrades : undefined,
        weightMin: weightFilter.min || undefined,
        weightMax: weightFilter.max || undefined,
        onlyInStock: onlyInStock || undefined,
        borderTypes: selectedBorderTypes.length > 0 ? selectedBorderTypes : undefined,
        // –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫—Ä–∞—è –∫–æ–≤—Ä–∞
        carpetEdgeTypes: selectedCarpetEdgeTypes.length > 0 ? selectedCarpetEdgeTypes : undefined,
        carpetEdgeSides: selectedCarpetEdgeSides.length > 0 ? selectedCarpetEdgeSides : undefined,
        carpetEdgeStrength: selectedCarpetEdgeStrength.length > 0 ? selectedCarpetEdgeStrength : undefined,
        // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∑—É –∫–æ–≤—Ä–∞
        bottomTypeIds: selectedBottomTypeIds.length > 0 ? selectedBottomTypeIds : undefined,
        sortBy,
        sortOrder
      };

      await catalogApi.exportCatalog({
        productIds: selectedOnly ? selectedProducts : undefined,
        filters: selectedOnly ? undefined : currentFilters
      });
      
      message.success(
        selectedOnly 
          ? `–≠–∫—Å–ø–æ—Ä—Ç ${selectedProducts.length} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω`
          : '–≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω'
      );
      
      // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      if (selectedOnly) {
        setSelectedProducts([]);
      }
      
    } catch (error: any) {
      console.error('Error exporting catalog:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∞');
    } finally {
      setExportingCatalog(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleDeleteCategory = (category: Category) => {
    setSelectedCategory(category);
    setDeleteCategoryModalVisible(true);
  };

  // üî• –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
  const adaptProductToStockItem = (product: Product): StockItem => ({
    id: 0, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    productId: product.id,
    productName: product.name,
    currentStock: product.currentStock || 0,
    availableStock: product.availableStock || 0,
    reservedStock: product.reservedStock || 0,
    inProductionQuantity: product.inProductionQuantity || 0,
    productArticle: product.article || '',
    categoryName: product.categoryName || '',
    normStock: 0,
    price: product.price || 0,
    updatedAt: product.updatedAt || new Date().toISOString()
  });

  const handleStockAdjustment = (product: Product) => {
    const stockItem = adaptProductToStockItem(product);
    setSelectedStockItem(stockItem);
    setAdjustmentModalVisible(true);
  };

  const handleAdjustmentSuccess = () => {
    loadProducts(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const startEditingCategory = (categoryId: number, currentName: string) => {
    setEditingCategoryId(categoryId);
    setEditingCategoryName(currentName);
  };

  const cancelEditingCategory = () => {
    setEditingCategoryId(null);
    setEditingCategoryName('');
  };

  const saveEditingCategory = async () => {
    if (!editingCategoryId || !editingCategoryName.trim()) {
      message.warning('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    if (editingCategoryName.trim().length < 2) {
      message.warning('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    setSavingCategory(true);
    try {
      const response = await catalogApi.updateCategory(editingCategoryId, {
        name: editingCategoryName.trim()
      });

      if (response.success) {
        message.success('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞');
        setEditingCategoryId(null);
        setEditingCategoryName('');
        loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      } else {
        message.error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      }
    } catch (error: any) {
      handleFormError(error, undefined, {
        key: 'edit-category-error',
        duration: 6
      });
    } finally {
      setSavingCategory(false);
    }
  };

  const handleCategoryNameKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      saveEditingCategory();
    } else if (e.key === 'Escape') {
      cancelEditingCategory();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const handleCategoriesMinimizeToggle = () => {
    const newMinimized = !categoriesMinimized;
    setCategoriesMinimized(newMinimized);
    localStorage.setItem('catalog-categories-minimized', JSON.stringify(newMinimized));
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoriesColSize = categoriesMinimized ? 2 : 6;
  const productsColSize = categoriesMinimized ? 22 : 18;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const getFlatCategories = (cats: Category[]): Category[] => {
    let result: Category[] = [];
    cats.forEach(cat => {
      result.push(cat);
      if (cat.children) {
        result.push(...getFlatCategories(cat.children));
      }
    });
    return result;
  };

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è Tree –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  const formatCategoriesForTree = (categories: Category[], allProducts: Product[]): any[] => {
    return categories.map(category => {
      // –ù–∞–π–¥–µ–º —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryProducts = allProducts.filter(product => product.categoryId === category.id);
      
      // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º —Ç–æ–≤–∞—Ä—ã
      const children = [];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category.children && category.children.length > 0) {
        children.push(...formatCategoriesForTree(category.children, allProducts));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
      categoryProducts.forEach(product => {
        const dimensions = product.dimensions ? 
          `${product.dimensions.length}√ó${product.dimensions.width}√ó${product.dimensions.thickness}` : 
          '';
        const available = (product.currentStock || 0) - (product.reservedStock || 0);
        const stockIcon = available > 0 ? '‚úÖ' : '‚ùå';
        
        const dimensionsDisplay = dimensions ? ` (${dimensions})` : '';
        
        children.push({
          title: `${stockIcon} ${product.name}${dimensionsDisplay}`,
          key: `product-${product.id}`,
          isLeaf: true,
          data: { type: 'product', product }
        });
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
      const isEditing = editingCategoryId === category.id;
      const canEditCatalog = canEdit('catalog');

      // –°–æ–∑–¥–∞–µ–º title —Å inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const categoryTitle = isEditing ? (
        <div style={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: '6px',
          padding: '8px',
          margin: '12px 8px',
          backgroundColor: '#f8f9fa',
          borderRadius: '6px',
          border: '1px solid #e9ecef',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
          animation: 'fadeIn 0.3s ease-in-out'
        }}>
          <Input
            value={editingCategoryName}
            onChange={(e) => setEditingCategoryName(e.target.value)}
            onKeyDown={handleCategoryNameKeyPress}
            onBlur={saveEditingCategory}
            style={{ 
              flex: 1, 
              height: '28px',
              border: '1px solid #1890ff',
              borderRadius: '4px',
              fontSize: '14px'
            }}
            autoFocus
            maxLength={100}
          />
          <Button
            type="text"
            size="small"
            icon={<CheckOutlined />}
            onClick={saveEditingCategory}
            loading={savingCategory}
            style={{ 
              minWidth: '28px', 
              height: '28px', 
              padding: '2px',
              color: '#52c41a',
              backgroundColor: '#f6ffed',
              border: '1px solid #b7eb8f',
              borderRadius: '4px'
            }}
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Enter)"
          />
          <Button
            type="text"
            size="small"
            icon={<CloseOutlined />}
            onClick={cancelEditingCategory}
            style={{ 
              minWidth: '28px', 
              height: '28px', 
              padding: '2px',
              color: '#ff4d4f',
              backgroundColor: '#fff2f0',
              border: '1px solid #ffccc7',
              borderRadius: '4px'
            }}
            title="–û—Ç–º–µ–Ω–∞ (Esc)"
          />
        </div>
      ) : (
        <div style={{ 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'space-between',
          width: '100%',
          animation: isEditing ? 'fadeOut 0.3s ease-in-out' : 'none'
        }}>
          <span>üìÅ {category.name} ({categoryProducts.length})</span>
          {canEditCatalog && (
            <Button
              type="text"
              size="small"
              icon={<EditOutlined />}
              onClick={(e) => {
                e.stopPropagation();
                startEditingCategory(category.id, category.name);
              }}
              style={{ 
                opacity: 0,
                transition: 'opacity 0.2s ease-in-out',
                minWidth: '24px',
                height: '24px',
                padding: '0',
                color: '#1890ff'
              }}
              className="category-edit-btn"
              title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            />
          )}
        </div>
      );

      return {
        title: categoryTitle,
        key: category.id,
        data: { type: 'category', category },
        children: children.length > 0 ? children : undefined
      };
    });
  };

  return (
    <div>
      <Row gutter={[0, 24]}>
        {/* Header */}
        <Col span={24}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <div>
              <Title level={2} style={{ margin: 0, display: 'flex', alignItems: 'center' }}>
                <AppstoreOutlined style={{ marginRight: 12 }} />
                –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
              </Title>
              <Text type="secondary">
                –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É, —Ä–∞–∑–º–µ—Ä–∞–º –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </Text>
            </div>
            
            {canEditCatalog && (
              <Space>
                <Button 
                  icon={<PlusOutlined />}
                  onClick={() => setCreateCategoryModalVisible(true)}
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                </Button>
                <Button 
                  type="primary" 
                  icon={<PlusOutlined />}
                  onClick={() => setCreateProductModalVisible(true)}
                >
                  –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                </Button>
              </Space>
            )}
          </div>
        </Col>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <Col span={24}>
          <Card>
            <Space direction="vertical" style={{ width: '100%' }}>
              {/* –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ */}
              <Row gutter={[16, 16]} align="middle">
                <Col xs={24} md={16}>
                  <Search
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–∂–∞–∫, LCH-1800, 1800√ó1200)..."
                    allowClear
                    value={searchText}
                    onChange={(e) => setSearchText(e.target.value)}
                    size="large"
                  />
                </Col>
                
                <Col xs={24} md={8}>
                  <div style={{ textAlign: 'right' }}>
                    <Button
                      icon={<FilterOutlined />}
                      type={showSizeFilters ? 'primary' : 'default'}
                      onClick={() => setShowSizeFilters(!showSizeFilters)}
                      size="large"
                    >
                      –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä {hasActiveFilters ? `(–∞–∫—Ç–∏–≤–Ω–æ: ${getActiveFiltersCount()})` : ''}
                    </Button>
                  </div>
                </Col>
              </Row>

              {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä */}
              {showSizeFilters && (
                <Collapse>
                  <Panel header="üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤" key="1">
                    <Row gutter={16}>
                      {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º */}
                      <Col span={6}>
                        <Text strong>–ù–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select value={stockFilter} onChange={setStockFilter} style={{ width: '100%' }}>
                            <Option value="all">üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã</Option>
                            <Option value="normal">‚úÖ –í –Ω–∞–ª–∏—á–∏–∏</Option>
                            <Option value="low">‚ö†Ô∏è –ú–∞–ª–æ</Option>
                            <Option value="critical">‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å</Option>
                          </Select>
                          <div style={{ marginTop: 8 }}>
                            <Checkbox 
                              checked={onlyInStock} 
                              onChange={(e: any) => setOnlyInStock(e.target.checked)}
                            >
                              üéØ –¢–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏
                            </Checkbox>
                          </div>
                        </div>
                      </Col>

                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 2.1) */}
                      <Col span={6}>
                        <Text strong>–ú–∞—Ç–µ—Ä–∏–∞–ª</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedMaterials}
                            onChange={setSelectedMaterials}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                            style={{ width: '100%' }}
                            loading={loadingReferences}
                          >
                            {materials.map(material => (
                              <Option key={material.id} value={material.id}>
                                üß± {material.name}
                              </Option>
                            ))}
                          </Select>
                        </div>
                      </Col>

                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—è–º (WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 2.1) */}
                      <Col span={6}>
                        <Text strong>–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedSurfaces}
                            onChange={setSelectedSurfaces}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                            style={{ width: '100%' }}
                            loading={loadingReferences}
                          >
                            {surfaces.map(surface => (
                              <Option key={surface.id} value={surface.id}>
                                üé® {surface.name}
                              </Option>
                            ))}
                          </Select>
                        </div>
                      </Col>

                      {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ä—Ç—É (WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 2.1) */}
                      <Col span={6}>
                        <Text strong>–°–æ—Ä—Ç —Ç–æ–≤–∞—Ä–∞</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedGrades}
                            onChange={setSelectedGrades}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç"
                            style={{ width: '100%' }}
                          >
                            <Option value="usual">‚≠ê –û–±—ã—á–Ω—ã–π</Option>
                            <Option value="grade_2">‚ö†Ô∏è –í—Ç–æ—Ä–æ–π —Å–æ—Ä—Ç</Option>
                            <Option value="telyatnik">üêÑ –¢–µ–ª—è—Ç–Ω–∏–∫</Option>
                            <Option value="liber">üèÜ –õ–∏–±–µ—Ä</Option>
                          </Select>
                        </div>
                      </Col>

                      {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞ */}
                      <Col span={6}>
                        <Text strong>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedProductTypes}
                            onChange={setSelectedProductTypes}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø"
                            style={{ width: '100%' }}
                          >
                            <Option value="carpet">ü™Ñ –ö–æ–≤—Ä–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ</Option>
                            <Option value="other">üì¶ –î—Ä—É–≥–æ–µ</Option>
                            <Option value="pur">üîß –ü–£–†</Option>
                            <Option value="roll_covering">üè≠ –†—É–ª–æ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ</Option>
                          </Select>
                        </div>
                      </Col>

                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Å—Å—É (AC3) */}
                      <Col span={6}>
                        <Text strong>–ü—Ä–µ—Å—Å</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedPressTypes}
                            onChange={setSelectedPressTypes}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ—Å—Å–∞"
                            style={{ width: '100%' }}
                          >
                            <Option value="not_selected">‚ûñ –ù–µ –≤—ã–±—Ä–∞–Ω–æ</Option>
                            <Option value="ukrainian">üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π</Option>
                            <Option value="chinese">üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π</Option>
                          </Select>
                        </div>
                      </Col>
                      
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –ª–æ–≥–æ—Ç–∏–ø–∞–º (—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä) */}
                      <Col span={6}>
                        <Text strong>–õ–æ–≥–æ—Ç–∏–ø</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedLogos}
                            onChange={setSelectedLogos}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø—ã"
                            style={{ width: '100%' }}
                            loading={loadingReferences}
                          >
                            {logos.map(logo => (
                              <Option key={logo.id} value={logo.id}>
                                üè∑Ô∏è {logo.name}
                              </Option>
                            ))}
                          </Select>
                        </div>
                      </Col>
                    </Row>

                    {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                    <Row gutter={16} style={{ marginTop: 16 }}>
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Å—É (WBS 2 - Adjustments –ó–∞–¥–∞—á–∞ 2.1) */}
                      <Col span={6}>
                        <Text strong>–í–µ—Å (–∫–≥)</Text>
                        <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                          <InputNumber
                            placeholder="–û—Ç"
                            value={weightFilter.min}
                            onChange={(value) => setWeightFilter(prev => ({ ...prev, min: value }))}
                            min={0}
                            step={0.1}
                            style={{ width: '100%' }}
                          />
                          <span>‚Äì</span>
                          <InputNumber
                            placeholder="–î–æ"
                            value={weightFilter.max}
                            onChange={(value) => setWeightFilter(prev => ({ ...prev, max: value }))}
                            min={0}
                            step={0.1}
                            style={{ width: '100%' }}
                          />
                        </div>
                      </Col>
                      
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –±–æ—Ä—Ç–∞ (–ó–∞–¥–∞—á–∞ 7.1) */}
                      <Col span={6}>
                        <Text strong>–ù–∞–ª–∏—á–∏–µ –±–æ—Ä—Ç–∞</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedBorderTypes}
                            onChange={setSelectedBorderTypes}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ä—Ç–∞"
                            style={{ width: '100%' }}
                          >
                            <Option value="with_border">üî≤ –° –±–æ—Ä—Ç–æ–º</Option>
                            <Option value="without_border">‚ö™ –ë–µ–∑ –±–æ—Ä—Ç–∞</Option>
                          </Select>
                        </div>
                      </Col>
                      
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫—Ä–∞—é –∫–æ–≤—Ä–∞ */}
                      <Col span={6}>
                        <Text strong>–ö—Ä–∞–π –∫–æ–≤—Ä–∞</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedCarpetEdgeTypes}
                            onChange={setSelectedCarpetEdgeTypes}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–∞—è"
                            style={{ width: '100%' }}
                            loading={loadingReferences}
                          >
                            {carpetEdgeTypes.map(type => (
                              <Option key={type.code} value={type.code}>
                                ‚úÇÔ∏è {type.name}
                              </Option>
                            ))}
                          </Select>
                        </div>
                      </Col>
                      
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Å–∏—Å—Ç–µ–º–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä) */}
                      <Col span={6}>
                        <Text strong>–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ (—à—Ç)</Text>
                        <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                          <InputNumber
                            placeholder="–û—Ç"
                            value={stockRangeFilter.min}
                            onChange={(value) => setStockRangeFilter(prev => ({ ...prev, min: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                          <span>‚Äì</span>
                          <InputNumber
                            placeholder="–î–æ"
                            value={stockRangeFilter.max}
                            onChange={(value) => setStockRangeFilter(prev => ({ ...prev, max: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                        </div>
                        <div style={{ marginTop: 4 }}>
                          <Checkbox
                            checked={onlyInStock}
                            onChange={(e) => setOnlyInStock(e.target.checked)}
                          >
                            –¢–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏
                          </Checkbox>
                        </div>
                      </Col>

                                              {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º –∫—Ä–∞—è –∫–æ–≤—Ä–∞ */}
                      <Col span={6}>
                        <Text strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω –∫—Ä–∞—è</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedCarpetEdgeSides}
                            onChange={setSelectedCarpetEdgeSides}
                            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω"
                            style={{ width: '100%' }}
                            disabled={selectedCarpetEdgeTypes.length === 1 && selectedCarpetEdgeTypes.includes('straight_cut')}
                          >
                            <Option value={1}>üî∏ 1 —Å—Ç–æ—Ä–æ–Ω–∞</Option>
                            <Option value={2}>üî∏ 2 —Å—Ç–æ—Ä–æ–Ω—ã</Option>
                            <Option value={3}>üî∏ 3 —Å—Ç–æ—Ä–æ–Ω—ã</Option>
                            <Option value={4}>üî∏ 4 —Å—Ç–æ—Ä–æ–Ω—ã</Option>
                          </Select>
                        </div>
                      </Col>
                      
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ —É—Å–∏–ª–µ–Ω–∏—é –∫—Ä–∞—è */}
                      <Col span={6}>
                        <Text strong>–£—Å–∏–ª–µ–Ω–∏–µ –∫—Ä–∞—è</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedCarpetEdgeStrength}
                            onChange={setSelectedCarpetEdgeStrength}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–∏–ª–µ–Ω–∏–µ"
                            style={{ width: '100%' }}
                          >
                            <Option value="normal">üîí –£—Å–∏–ª–µ–Ω–Ω—ã–π</Option>
                            <Option value="weak">‚ö™ –ù–µ —É—Å–∏–ª–µ–Ω–Ω—ã–π</Option>
                          </Select>
                        </div>
                      </Col>
                      
                      {/* –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∑—É –∫–æ–≤—Ä–∞ */}
                      <Col span={6}>
                        <Text strong>–ù–∏–∑ –∫–æ–≤—Ä–∞</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedBottomTypeIds}
                            onChange={setSelectedBottomTypeIds}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∑ –∫–æ–≤—Ä–∞"
                            style={{ width: '100%' }}
                          >
                            {bottomTypes
                              .filter(type => type.code !== 'not_selected') // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å—å "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                              .map(type => (
                              <Option key={type.id} value={type.id}>
                                üîΩ {type.name}
                              </Option>
                            ))}
                          </Select>
                        </div>
                      </Col>

                      {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º –ø–∞–∑–∑–ª–∞ */}
                      <Col span={6}>
                        <Text strong>–¢–∏–ø –ø–∞–∑–∑–ª–∞</Text>
                        <div style={{ marginTop: 8 }}>
                          <Select
                            mode="multiple"
                            value={selectedPuzzleTypeIds}
                            onChange={setSelectedPuzzleTypeIds}
                            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–∑–∑–ª–∞"
                            style={{ width: '100%' }}
                          >
                            {puzzleTypes.map(type => (
                              <Option key={type.id} value={type.id}>
                                üß© {type.name}
                              </Option>
                            ))}
                          </Select>
                        </div>
                      </Col>
                    </Row>

                    {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
                    <Row gutter={16} style={{ marginTop: 16 }}>
                      {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º */}
                      <Col span={8}>
                        <Text strong>–î–ª–∏–Ω–∞ (–º–º)</Text>
                        <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                          <InputNumber
                            placeholder="–û—Ç"
                            value={sizeFilters.lengthMin}
                            onChange={(value) => setSizeFilters(prev => ({ ...prev, lengthMin: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                          <span>‚Äì</span>
                          <InputNumber
                            placeholder="–î–æ"
                            value={sizeFilters.lengthMax}
                            onChange={(value) => setSizeFilters(prev => ({ ...prev, lengthMax: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                        </div>
                      </Col>
                      
                      <Col span={8}>
                        <Text strong>–®–∏—Ä–∏–Ω–∞ (–º–º)</Text>
                        <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                          <InputNumber
                            placeholder="–û—Ç"
                            value={sizeFilters.widthMin}
                            onChange={(value) => setSizeFilters(prev => ({ ...prev, widthMin: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                          <span>‚Äì</span>
                          <InputNumber
                            placeholder="–î–æ"
                            value={sizeFilters.widthMax}
                            onChange={(value) => setSizeFilters(prev => ({ ...prev, widthMax: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                        </div>
                      </Col>
                      
                      <Col span={8}>
                        <Text strong>–í—ã—Å–æ—Ç–∞ (–º–º)</Text>
                        <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                          <InputNumber
                            placeholder="–û—Ç"
                            value={sizeFilters.thicknessMin}
                            onChange={(value) => setSizeFilters(prev => ({ ...prev, thicknessMin: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                          <span>‚Äì</span>
                          <InputNumber
                            placeholder="–î–æ"
                            value={sizeFilters.thicknessMax}
                            onChange={(value) => setSizeFilters(prev => ({ ...prev, thicknessMax: value }))}
                            min={0}
                            style={{ width: '100%' }}
                          />
                        </div>
                      </Col>
                    </Row>
                  </Panel>
                </Collapse>
              )}

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
              <Row>
                <Col span={24}>
                  <div style={{ textAlign: 'center', padding: '8px 0' }}>
                    <Text type="secondary">
                      üìä –ù–∞–π–¥–µ–Ω–æ: <Text strong>{filteredProducts.length}</Text> —Ç–æ–≤–∞—Ä–æ–≤
                      {checkedCategories.length > 0 && (
                        <Text type="secondary"> –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö</Text>
                      )}
                      {hasSizeFilters && (
                        <Text type="secondary"> —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤</Text>
                      )}
                    </Text>
                  </div>
                </Col>
              </Row>
            </Space>
          </Card>
        </Col>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <Col span={24}>
          <Row gutter={16}>
            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º */}
            <Col 
              xs={24} 
              lg={categoriesColSize}
              style={{ 
                transition: 'all 0.3s ease-in-out'
              }}
            >
                            {categoriesMinimized ? (
                // –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥ - —Ç–æ–ª—å–∫–æ –∏–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏ –∏ —Å—Ç—Ä–µ–ª–∫–∞
                <Card 
                  size="small" 
                  style={{ 
                    textAlign: 'center',
                    cursor: 'pointer',
                    height: 'fit-content',
                    padding: '4px'
                  }}
                  onClick={handleCategoriesMinimizeToggle}
                  hoverable
                  title="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                >
                  <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '4px' }}>
                    <FolderOutlined style={{ fontSize: '18px', color: '#1890ff' }} />
                    <DoubleRightOutlined style={{ fontSize: '12px', color: '#666' }} />
                    {checkedCategories.length > 0 && (
                      <Badge 
                        count={checkedCategories.length} 
                        size="small"
                        style={{ 
                          backgroundColor: '#1890ff',
                          fontSize: '10px'
                        }}
                      />
                    )}
                  </div>
                </Card>
              ) : (
                // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–∏–¥ - –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                <Collapse 
                  size="small"
                  activeKey={['categories']}
                  expandIcon={() => null}
                  items={[
                    {
                      key: 'categories',
                      label: (
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <span><FolderOutlined style={{ marginRight: '8px', color: '#1890ff' }} />–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
                          <Button 
                            type="text" 
                            size="small"
                            icon={<DoubleLeftOutlined />}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleCategoriesMinimizeToggle();
                            }}
                            title="–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                            style={{ marginLeft: '8px' }}
                          />
                        </div>
                      ),
                      children: (
                        <>
                          <Tree
                            checkable
                            showLine
                            defaultExpandedKeys={['lejaki', 'kovriki']}
                            checkedKeys={checkedCategories}
                            onCheck={handleCategoryCheck}
                            onSelect={handleTreeSelect}
                            treeData={formatCategoriesForTree(categories, products)}
                          />
                          {checkedCategories.length > 0 && (
                            <div style={{ marginTop: 12, padding: '8px', backgroundColor: '#f0f0f0', borderRadius: '4px' }}>
                              <Text type="secondary" style={{ fontSize: '12px' }}>
                                –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {checkedCategories.length}
                              </Text>
                              <br />
                              <Space style={{ marginTop: 4 }}>
                                <Button 
                                  size="small" 
                                  onClick={() => setCheckedCategories([])}
                                >
                                  –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä
                                </Button>
                                {canDelete('catalog') && checkedCategories.length === 1 && (
                                  <Button
                                    size="small"
                                    danger
                                    icon={<DeleteOutlined />}
                                    onClick={() => {
                                      const categoryToDelete = getFlatCategories(categories).find(cat => cat.id === checkedCategories[0]);
                                      if (categoryToDelete) {
                                        handleDeleteCategory(categoryToDelete);
                                      }
                                    }}
                                    title="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                                  >
                                    –£–¥–∞–ª–∏—Ç—å
                                  </Button>
                                )}
                              </Space>
                            </div>
                          )}
                        </>
                      )
                    }
                  ]}
                />
              )}


            </Col>

            {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
            <Col 
              xs={24} 
              lg={productsColSize}
              style={{ 
                transition: 'all 0.3s ease-in-out'
              }}
            >
              {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (–ó–∞–¥–∞—á–∞ 7.2) */}
              <Card size="small" style={{ marginBottom: 16 }}>
                <Row justify="space-between" align="middle">
                  <Col>
                    <Space>
                      <Text strong>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</Text>
                      <Select
                        value={sortBy}
                        onChange={(value) => {
                          setSortBy(value);
                          localStorage.setItem('catalog-sortBy', value);
                        }}
                        style={{ width: 180 }}
                        size="small"
                      >
                        <Option value="updatedAt">üîÑ –ü–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</Option>
                        <Option value="name">üìù –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</Option>
                        <Option value="matArea">üìè –ü–æ –ø–ª–æ—â–∞–¥–∏ (—Ä–∞–∑–º–µ—Ä—É)</Option>
                        <Option value="price">üí∞ –ü–æ —Ü–µ–Ω–µ</Option>
                        <Option value="weight">‚öñÔ∏è –ü–æ –≤–µ—Å—É</Option>
                      </Select>
                      <Select
                        value={sortOrder}
                        onChange={(value) => {
                          setSortOrder(value);
                          localStorage.setItem('catalog-sortOrder', value);
                        }}
                        style={{ width: 120 }}
                        size="small"
                      >
                        <Option value="ASC">üîº –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</Option>
                        <Option value="DESC">üîΩ –ü–æ —É–±—ã–≤–∞–Ω–∏—é</Option>
                      </Select>
                    </Space>
                  </Col>
                  <Col span={24}>
                    {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ - –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º —Å–≤–µ—Ä—Ö—É */}
                    {selectedProducts.length > 0 && (
                      <div style={{ 
                        marginBottom: '12px',
                        padding: '8px 12px',
                        backgroundColor: '#f0f8ff',
                        borderRadius: '6px',
                        border: '1px solid #d6e4ff'
                      }}>
                        <Space size="small">
                          <Button
                            type="primary"
                            size="small"
                            icon={<AppstoreOutlined />}
                            onClick={() => {
                              setSelectedTargetCategory(null);
                              setMoveModalVisible(true);
                            }}
                            disabled={selectedProducts.length === 0}
                            loading={movingProducts}
                          >
                            –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ({selectedProducts.length})
                          </Button>
                          <Button
                            size="small"
                            icon={<InboxOutlined />}
                            onClick={() => handleExportCatalog(true)}
                            loading={exportingCatalog}
                            disabled={selectedProducts.length === 0}
                          >
                            –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ({selectedProducts.length})
                          </Button>
                          <Text type="secondary" style={{ fontSize: '12px' }}>
                            –í—ã–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <Text strong>{selectedProducts.length}</Text>
                          </Text>
                        </Space>
                      </div>
                    )}
                    
                    {/* –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã */}
                    <div style={{ 
                      display: 'flex', 
                      alignItems: 'center',
                      justifyContent: 'flex-end',
                      gap: '12px'
                    }}>
                      <Button
                        size="small"
                        icon={<InboxOutlined />}
                        onClick={() => handleExportCatalog(false)}
                        loading={exportingCatalog}
                        title="–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"
                      >
                        üìä –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
                      </Button>
                      
                      <Text type="secondary" style={{ fontSize: '12px', whiteSpace: 'nowrap' }}>
                        üìä –ù–∞–π–¥–µ–Ω–æ: <Text strong>{totalProducts}</Text> —Ç–æ–≤–∞—Ä–æ–≤
                      </Text>
                    </div>
                  </Col>
                </Row>
              </Card>
              
              <Table
                dataSource={paginatedProducts}
                pagination={false}
                size="small"
                rowKey="id"
                scroll={{ x: 800 }}
                rowSelection={{
                  type: 'checkbox',
                  selectedRowKeys: selectedProducts,
                  onChange: (selectedRowKeys: React.Key[]) => {
                    setSelectedProducts(selectedRowKeys as number[]);
                  },
                  onSelectAll: (selected: boolean, selectedRows: Product[], changeRows: Product[]) => {
                    if (selected) {
                      const allProductIds = paginatedProducts.map(p => p.id);
                      setSelectedProducts(allProductIds);
                    } else {
                      setSelectedProducts([]);
                    }
                  },
                }}
                columns={[
                  {
                    title: '–¢–æ–≤–∞—Ä',
                    key: 'product',
                    width: 300,
                    render: (_: any, product: Product) => (
                      <div>
                        <Text strong>{product.name}</Text>
                        <br />
                        <Space>
                          <Tag>{product.article}</Tag>
                          {product.grade === 'grade_2' && (
                            <Tag color="orange">‚ö†Ô∏è –í—Ç–æ—Ä–æ–π —Å–æ—Ä—Ç</Tag>
                          )}
                          {product.grade === 'telyatnik' && (
                            <Tag color="purple">üêÑ –¢–µ–ª—è—Ç–Ω–∏–∫</Tag>
                          )}
                          {product.grade === 'liber' && (
                            <Tag color="green">üèÜ –õ–∏–±–µ—Ä</Tag>
                          )}
                        </Space>
                        <br />
                        <Text type="secondary" style={{ fontSize: '12px' }}>
                          {product.categoryName}
                        </Text>
                      </div>
                    ),
                  },
                  {
                    title: '–†–∞–∑–º–µ—Ä—ã (–º–º)',
                    key: 'dimensions',
                    width: 140,
                    render: (_: any, product: Product) => {
                      const dimensions = product.dimensions || { length: 0, width: 0, thickness: 0 };
                      return (
                        <Tag color="blue">
                          {dimensions.length}√ó{dimensions.width}√ó{dimensions.thickness}
                        </Tag>
                      );
                    },
                  },
                  {
                    title: '–û—Å—Ç–∞—Ç–∫–∏',
                    key: 'stock',
                    width: 120,
                    align: 'center' as const,
                    render: (_: any, product: Product) => {
                      const currentStock = product.stock?.currentStock || product.currentStock || 0;
                      const reservedStock = product.stock?.reservedStock || product.reservedStock || 0;
                      const available = (product.currentStock || 0) - (product.reservedStock || 0);
                      const stockStatus = getStockStatus(available, product.normStock || 0);
                      return (
                        <div>
                          <Badge color={stockStatus.color} />
                          <Text strong style={{ color: available < 0 ? '#ff4d4f' : 'inherit' }}>
                            {available < 0 ? '‚ö†Ô∏è ' : ''}{available} —à—Ç
                          </Text>
                          <br />
                          <Text type="secondary" style={{ fontSize: '11px' }}>
                            –≤—Å–µ–≥–æ: {currentStock}
                          </Text>
                          {available < 0 && (
                            <>
                              <br />
                              <Text type="danger" style={{ fontSize: '10px' }}>
                                –ü–µ—Ä–µ–∑–∞–∫–∞–∑: {Math.abs(available)} —à—Ç
                              </Text>
                            </>
                          )}
                        </div>
                      );
                    },
                  },
                  {
                    title: '–¶–µ–Ω–∞',
                    key: 'price',
                    width: 120,
                    align: 'right' as const,
                    render: (_: any, product: Product) => (
                      <div>
                        <Text strong style={{ color: '#1890ff' }}>
                          {product.price ? formatPriceWithCurrency(product.price) : '‚Äî'}
                        </Text>
                        {product.price && (
                          <Text type="secondary" style={{ fontSize: '11px', display: 'block' }}>
                            –∑–∞ —à—Ç
                          </Text>
                        )}
                      </div>
                    ),
                  },
                  {
                    title: '–î–µ–π—Å—Ç–≤–∏—è',
                    key: 'actions',
                    width: 160,
                    align: 'center' as const,
                    render: (_: any, product: Product) => (
                      <Space size="small">
                        <Button 
                          size="small"
                          onClick={() => navigate(`/catalog/products/${product.id}`)}
                        >
                          –î–µ—Ç–∞–ª–∏
                        </Button>

                        {canEdit('stock') && (
                          <Button 
                            size="small"
                            icon={<EditOutlined />}
                            title="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞"
                            onClick={() => handleStockAdjustment(product)}
                          >
                            +/-
                          </Button>
                        )}

                        {canEditCatalog && (
                          <Button 
                            size="small" 
                            danger
                            onClick={() => handleDeleteProduct(product)}
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </Button>
                        )}
                      </Space>
                    ),
                  },
                ]}
              />

              {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
              {totalPages > 1 && (
                <Card style={{ marginTop: 16, textAlign: 'center' }} size="small">
                  <Space>
                    <Button 
                      disabled={currentPage === 1}
                      onClick={() => setCurrentPage(currentPage - 1)}
                    >
                      ‚Üê –ü—Ä–µ–¥
                    </Button>
                    
                    <Text>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}</Text>
                    
                    <Button 
                      disabled={currentPage === totalPages}
                      onClick={() => setCurrentPage(currentPage + 1)}
                    >
                      –°–ª–µ–¥ ‚Üí
                    </Button>
                  </Space>
                </Card>
              )}

              {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
              {!loading && products.length === 0 && (
                <Card style={{ textAlign: 'center', marginTop: 16 }}>
                  <Text type="secondary">
                    <InboxOutlined style={{ fontSize: 48, marginBottom: 16, display: 'block' }} />
                    –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                  </Text>
                </Card>
              )}

              {!loading && paginatedProducts.length === 0 && products.length > 0 && (
                <Card style={{ textAlign: 'center', marginTop: 16 }}>
                  <Text type="secondary">
                    <InboxOutlined style={{ fontSize: 48, marginBottom: 16, display: 'block' }} />
                    –ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </Text>
                  {(searchText || checkedCategories.length > 0 || stockFilter !== 'all' || hasSizeFilters) && (
                    <Button onClick={() => {
                      setSearchText('');
                      setCheckedCategories([]);
                      setStockFilter('all');
                      setSizeFilters({
                        lengthMin: null, lengthMax: null,
                        widthMin: null, widthMax: null,
                        thicknessMin: null, thicknessMax: null,
                      });
                      setCurrentPage(1);
                    }}>
                      –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                    </Button>
                  )}
                </Card>
              )}
              
              {!loading && products.length === 0 && (
                <Card style={{ textAlign: 'center', marginTop: 16 }}>
                  <Text type="secondary">
                    <InboxOutlined style={{ fontSize: 48, marginBottom: 16, display: 'block' }} />
                    –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç
                  </Text>
                  <Text type="secondary">
                    –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
                  </Text>
                </Card>
              )}
            </Col>
          </Row>
        </Col>

        {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞ */}
        {filteredProducts.length > 0 && (
          <Col span={24}>
            <Card size="small">
              <Row gutter={16}>
                <Col span={8}>
                  <Text>üíæ –û—Å—Ç–∞—Ç–æ–∫: <Text strong>{filteredProducts.reduce((sum, p) => sum + (p.currentStock || 0), 0)}</Text></Text>
                </Col>
                <Col span={8}>
                  <Text>üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: <Text strong>{filteredProducts.reduce((sum, p) => sum + ((p.currentStock || 0) - (p.reservedStock || 0)), 0)}</Text></Text>
                </Col>
                <Col span={8}>
                  <Text>üìä –ü–æ–∑–∏—Ü–∏–π: <Text strong>{filteredProducts.length}</Text></Text>
                </Col>
              </Row>
            </Card>
          </Col>
        )}
      </Row>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      <CreateProductModal
        visible={createProductModalVisible}
        categories={categories}
        onClose={() => setCreateProductModalVisible(false)}
        onSuccess={() => {
          loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <CreateCategoryModal
        visible={createCategoryModalVisible}
        categories={categories}
        onClose={() => setCreateCategoryModalVisible(false)}
        onSuccess={() => {
          loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      <DeleteCategoryModal
        visible={deleteCategoryModalVisible}
        category={selectedCategory}
        categories={categories}
        onClose={() => {
          setDeleteCategoryModalVisible(false);
          setSelectedCategory(null);
        }}
        onSuccess={() => {
          loadData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (–ó–∞–¥–∞—á–∞ 7.3) */}
      <Modal
        title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
        open={moveModalVisible}
        onCancel={() => !movingProducts && setMoveModalVisible(false)}
        onOk={() => {
          if (selectedTargetCategory) {
            handleMoveProducts(selectedTargetCategory);
          }
        }}
        okText="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
        cancelText="–û—Ç–º–µ–Ω–∞"
        okButtonProps={{ 
          disabled: !selectedTargetCategory || movingProducts,
          loading: movingProducts
        }}
        width={600}
        closable={!movingProducts}
        maskClosable={!movingProducts}

      >
        {movingProducts ? (
          <div style={{ textAlign: 'center', padding: '40px 0' }}>
            <Spin size="large" />
            <Text style={{ display: 'block', marginTop: 16 }}>
              –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...
            </Text>
          </div>
        ) : (
          <>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö */}
            <div style={{ 
              background: '#f5f5f5', 
              padding: '16px', 
              borderRadius: '6px', 
              marginBottom: '20px' 
            }}>
              <Text strong style={{ fontSize: '16px' }}>
                üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {selectedProducts.length}
              </Text>
              {selectedTargetCategory && (
                <div style={{ marginTop: '8px' }}>
                  <Text type="secondary">
                    üìÅ –¶–µ–ª–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {getFlatCategories(categories).find(c => c.id === selectedTargetCategory)?.name}
                  </Text>
                </div>
              )}
            </div>
            
            <Text strong style={{ display: 'block', marginBottom: 12, fontSize: '16px' }}>
              –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:
            </Text>
            
            <div style={{ 
              border: '1px solid #d9d9d9', 
              borderRadius: '6px', 
              padding: '12px',
              maxHeight: '300px',
              overflowY: 'auto',
              backgroundColor: '#fafafa'
            }}>
              <Tree
                showLine
                defaultExpandedKeys={categories.map(c => c.id.toString())}
                selectedKeys={selectedTargetCategory ? [selectedTargetCategory.toString()] : []}
                onSelect={(selectedKeys) => {
                  if (selectedKeys.length > 0) {
                    const categoryId = parseInt(selectedKeys[0] as string);
                    setSelectedTargetCategory(categoryId);
                  } else {
                    setSelectedTargetCategory(null);
                  }
                }}
                treeData={categories.map(category => ({
                  title: `üìÅ ${category.name}`,
                  key: category.id.toString(),
                  children: category.children?.map(child => ({
                    title: `üìÅ ${child.name}`,
                    key: child.id.toString()
                  }))
                }))}
              />
            </div>
            
            {selectedTargetCategory && (
              <div style={{ 
                marginTop: '16px', 
                padding: '12px', 
                backgroundColor: '#e6f7ff', 
                borderRadius: '6px',
                border: '1px solid #91d5ff'
              }}>
                <Text style={{ color: '#1890ff' }}>
                  ‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. 
                  –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∞—É–¥–∏—Ç–∞.
                </Text>
              </div>
            )}
          </>
        )}
      </Modal>

      {/* üî• –ù–û–í–û–ï: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ */}
      <StockAdjustmentModal
        visible={adjustmentModalVisible}
        stockItem={selectedStockItem}
        onClose={() => setAdjustmentModalVisible(false)}
        onSuccess={handleAdjustmentSuccess}
      />

      {/* CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ */}
      <style>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateX(-10px); }
          to { opacity: 1; transform: translateX(0); }
        }
        
        @keyframes fadeOut {
          from { opacity: 1; transform: translateX(0); }
          to { opacity: 0; transform: translateX(-10px); }
        }
        
        .ant-tree-node-content-wrapper:hover .category-edit-btn {
          opacity: 1 !important;
        }
        
        .category-edit-btn:hover {
          background-color: rgba(24, 144, 255, 0.1) !important;
        }
      `}</style>
    </div>
  );
};

export default Catalog; 