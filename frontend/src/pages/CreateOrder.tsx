import React, { useState, useEffect } from 'react';
import {
  Row, Col, Card, Form, Input, DatePicker, Select, Button, Table, Space, Typography,
  message, InputNumber, Modal, Tag, Divider, Statistic, Steps
} from 'antd';
import PriceInput from '../components/PriceInput';
import { formatPriceWithCurrency, calculateLineTotal, calculateOrderTotal } from '../utils/priceUtils';
import { handleFormError } from '../utils/errorUtils';
import {
  ShoppingCartOutlined, PlusOutlined, DeleteOutlined, CheckOutlined,
  ExclamationCircleOutlined, SearchOutlined, ArrowLeftOutlined, FilterOutlined,
  ClearOutlined
} from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';
import usePermissions from '../hooks/usePermissions';
import { ordersApi, CreateOrderRequest } from '../services/ordersApi';
import { catalogApi, Product } from '../services/catalogApi';
import { usersApi } from '../services/usersApi';
import dayjs from 'dayjs';

const { Title, Text } = Typography;
const { Option } = Select;
const { TextArea } = Input;
const { Step } = Steps;

interface OrderItemForm {
  id: string;
  productId: number;
  product?: Product;
  quantity: number;
  price: number;
  total: number;
  availableStock: number;
  canReserve: number;
}

interface User {
  id: number;
  username: string;
  fullName?: string;
  role: string;
}

const CreateOrder: React.FC = () => {
  const navigate = useNavigate();
  const { user, token } = useAuthStore();
  const { canManage, canEdit } = usePermissions();

  const getRoleDisplayName = (role: string) => {
    const roleNames: Record<string, string> = {
      'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
      'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 
      'production': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      'warehouse': '–°–∫–ª–∞–¥'
    };
    return roleNames[role] || role;
  };
  
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [products, setProducts] = useState<Product[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [searchText, setSearchText] = useState('');
  const [orderItems, setOrderItems] = useState<OrderItemForm[]>([]);
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedSource, setSelectedSource] = useState('database');
  
  // Modal states
  const [productModalVisible, setProductModalVisible] = useState(false);
  const [confirmModalVisible, setConfirmModalVisible] = useState(false);
  
  // Product search and filter states
  const [productsLoading, setProductsLoading] = useState(false);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [sizeFilters, setSizeFilters] = useState({
    lengthMin: null as number | null,
    lengthMax: null as number | null,
    widthMin: null as number | null,
    widthMax: null as number | null,
    thicknessMin: null as number | null,
    thicknessMax: null as number | null,
  });
  const [showSizeFilters, setShowSizeFilters] = useState(false);

  // Load products and users for selection
  useEffect(() => {
    loadProducts();
    loadUsers();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (productModalVisible) {
      // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      if (!searchText && !hasSizeFilters) {
        setFilteredProducts(products);
      }
    }
  }, [productModalVisible, products]);

  const loadProducts = async () => {
    if (!token) return;
    
    try {
      const response = await catalogApi.getProducts({ page: 1, limit: 100 });
      
      if (response.success) {
        setProducts(response.data);
        setFilteredProducts(response.data); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      handleFormError(error, undefined, {
        key: 'load-products-error',
        duration: 4
      });
    }
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  const searchProducts = async () => {
    if (!token) return;
    
    setProductsLoading(true);
    try {
      const filters = {
        search: searchText || undefined,
        lengthMin: sizeFilters.lengthMin || undefined,
        lengthMax: sizeFilters.lengthMax || undefined,
        widthMin: sizeFilters.widthMin || undefined,
        widthMax: sizeFilters.widthMax || undefined,
        thicknessMin: sizeFilters.thicknessMin || undefined,
        thicknessMax: sizeFilters.thicknessMax || undefined,
        limit: 100
      };

      const response = await catalogApi.getProducts(filters);
      
      if (response.success) {
        setFilteredProducts(response.data);
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤');
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      handleFormError(error, undefined, {
        key: 'search-products-error',
        duration: 4
      });
    } finally {
      setProductsLoading(false);
    }
  };

  const loadUsers = async () => {
    if (!token) return;
    
    try {
      const response = await catalogApi.getUsers();
      
      if (response.success) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        const availableUsers = response.data.filter(
          (u: User) => canManage('orders') || canEdit('orders')
        );
        setUsers(availableUsers);
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      handleFormError(error, undefined, {
        key: 'load-users-error',
        duration: 4
      });
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
  const validateSizeRanges = () => {
    const errors: string[] = [];
    
    if (sizeFilters.lengthMin && sizeFilters.lengthMax && sizeFilters.lengthMin > sizeFilters.lengthMax) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
    }
    if (sizeFilters.widthMin && sizeFilters.widthMax && sizeFilters.widthMin > sizeFilters.widthMax) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
    }
    if (sizeFilters.thicknessMin && sizeFilters.thicknessMax && sizeFilters.thicknessMin > sizeFilters.thicknessMax) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π');
    }
    
    return errors;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
  const hasSizeFilters = Object.values(sizeFilters).some(value => value !== null);

  // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤
  const clearSizeFilters = () => {
    setSizeFilters({
      lengthMin: null,
      lengthMax: null,
      widthMin: null,
      widthMax: null,
      thicknessMin: null,
      thicknessMax: null,
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  const handleSearch = () => {
    const errors = validateSizeRanges();
    if (errors.length > 0) {
      message.error(errors[0]);
      return;
    }
    searchProducts();
  };

  // Add product to order
  const addProduct = (product: Product) => {
    const existing = orderItems.find(item => item.productId === product.id);
    if (existing) {
      message.warning('–¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑');
      return;
    }

    const price = Number(product.price) || 0;
    const newItem: OrderItemForm = {
      id: `${Date.now()}-${product.id}`,
      productId: product.id,
      product,
      quantity: 1,
      price: price,
      total: parseFloat(calculateLineTotal(price, 1)),
      availableStock: product.availableStock || 0,
      canReserve: Math.min(1, product.availableStock || 0)
    };

    setOrderItems([...orderItems, newItem]);
    // –ú–æ–¥–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    message.success(`–¢–æ–≤–∞—Ä "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑`);
  };

  // Update order item
  const updateOrderItem = (id: string, field: string, value: any) => {
    setOrderItems(items => 
      items.map(item => {
        if (item.id === id) {
          const updated = { ...item, [field]: value };
          
          if (field === 'quantity' || field === 'price') {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å—É–º–º—ã
            updated.total = parseFloat(calculateLineTotal(updated.price, updated.quantity));
            updated.canReserve = Math.min(updated.quantity, item.availableStock);
          }
          
          return updated;
        }
        return item;
      })
    );
  };

  // Remove order item
  const removeOrderItem = (id: string) => {
    setOrderItems(items => items.filter(item => item.id !== id));
  };

  // Calculate totals
  const calculateTotals = () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
    const totalAmount = parseFloat(calculateOrderTotal(orderItems.map(item => ({
      price: item.price,
      quantity: item.quantity
    }))));
    
    const totalQuantity = orderItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalCanReserve = orderItems.reduce((sum, item) => sum + item.canReserve, 0);
    const totalNeedProduction = orderItems.reduce((sum, item) => 
      sum + Math.max(0, item.quantity - item.availableStock), 0
    );

    return { totalAmount, totalQuantity, totalCanReserve, totalNeedProduction };
  };

  // Submit order
  const handleSubmit = async (values: any) => {
    if (orderItems.length === 0) {
      message.error('–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑');
      return;
    }

    setConfirmModalVisible(true);
  };

  const confirmOrder = async () => {
    if (!token) return;

    const values = form.getFieldsValue();
    
    const orderData: CreateOrderRequest = {
      customerName: values.customerName,
      customerContact: values.customerContact,
      contractNumber: values.contractNumber, // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
      deliveryDate: values.deliveryDate ? values.deliveryDate.toISOString() : undefined,
      priority: values.priority || 'normal',
      source: values.source || 'database',
      customSource: values.source === 'other' ? values.customSource : undefined,
      notes: values.notes,
      managerId: values.managerId, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      items: orderItems.map(item => ({
        productId: item.productId,
        quantity: item.quantity,
        price: item.price
      }))
    };

    setLoading(true);
    try {
      const response = await ordersApi.createOrder(orderData);
      
      if (response.success) {
        message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        navigate(`/orders/${response.data.id}`);
      } else {
        message.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      handleFormError(error, form, {
        key: 'create-order-error',
        duration: 6
      });
    } finally {
      setLoading(false);
      setConfirmModalVisible(false);
    }
  };

  // Table columns for order items
  const orderItemColumns = [
    {
      title: '–¢–æ–≤–∞—Ä',
      dataIndex: 'product',
      key: 'product',
      render: (product: Product) => (
        <div>
          <Text strong>{product.name}</Text>
          <br />
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {product.article} ‚Ä¢ {product.categoryName}
          </Text>
        </div>
      ),
    },
    {
      title: '–û—Å—Ç–∞—Ç–æ–∫',
      dataIndex: 'availableStock',
      key: 'availableStock',
      align: 'center' as const,
      render: (stock: number) => (
        <Tag color={stock > 0 ? 'green' : 'red'}>
          {stock} —à—Ç
        </Tag>
      ),
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      align: 'center' as const,
      render: (quantity: number, record: OrderItemForm) => (
        <InputNumber
          min={1}
          value={quantity}
          onChange={(value) => updateOrderItem(record.id, 'quantity', value || 1)}
          style={{ width: 80 }}
        />
      ),
    },
    {
      title: '–¶–µ–Ω–∞',
      dataIndex: 'price',
      key: 'price',
      align: 'center' as const,
      render: (price: number, record: OrderItemForm) => (
        <PriceInput
          value={price}
          onChange={(value) => updateOrderItem(record.id, 'price', value || 0)}
          style={{ width: 120 }}
        />
      ),
    },
    {
      title: '–†–µ–∑–µ—Ä–≤',
      dataIndex: 'canReserve',
      key: 'canReserve',
      align: 'center' as const,
      render: (canReserve: number, record: OrderItemForm) => {
        const needProduction = Math.max(0, record.quantity - record.availableStock);
        return (
          <div>
            <Tag color="blue">{canReserve} —à—Ç</Tag>
            {needProduction > 0 && (
              <>
                <br />
                <Tag color="orange">+{needProduction} –ø—Ä–æ–∏–∑–≤.</Tag>
              </>
            )}
          </div>
        );
      },
    },
    {
      title: '–°—É–º–º–∞',
      dataIndex: 'total',
      key: 'total',
      align: 'right' as const,
      render: (total: number) => (
        <Text strong>{formatPriceWithCurrency(total)}</Text>
      ),
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      align: 'center' as const,
      render: (_: any, record: OrderItemForm) => (
        <Button
          type="text"
          icon={<DeleteOutlined />}
          onClick={() => removeOrderItem(record.id)}
          danger
        />
      ),
    },
  ];

  // Product selection table columns
  const productColumns = [
    {
      title: '–¢–æ–≤–∞—Ä',
      dataIndex: 'name',
      key: 'name',
      render: (name: string, record: Product) => (
        <div>
          <Text strong>{name}</Text>
          <br />
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {record.article} ‚Ä¢ {record.categoryName}
          </Text>
        </div>
      ),
    },
    {
      title: '–û—Å—Ç–∞—Ç–æ–∫',
      dataIndex: 'availableStock',
      key: 'availableStock',
      align: 'center' as const,
      render: (stock: number) => (
        <Tag color={stock > 0 ? 'green' : 'red'}>
          {stock || 0} —à—Ç
        </Tag>
      ),
    },
    {
      title: '–¶–µ–Ω–∞',
      dataIndex: 'price',
      key: 'price',
      align: 'right' as const,
      render: (price: string) => (
        <Text>{formatPriceWithCurrency(price)}</Text>
      ),
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      align: 'center' as const,
      render: (_: any, record: Product) => (
        <Button
          type="primary"
          size="small"
          onClick={() => addProduct(record)}
        >
          –î–æ–±–∞–≤–∏—Ç—å
        </Button>
      ),
    },
  ];

  const totals = calculateTotals();

  const steps = [
    { title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ', description: '–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
    { title: '–¢–æ–≤–∞—Ä—ã', description: '–í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞' },
    { title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ' }
  ];

  return (
    <div>
      <Row gutter={[0, 24]}>
        {/* Header */}
        <Col span={24}>
          <Space style={{ marginBottom: 16 }}>
            <Button 
              icon={<ArrowLeftOutlined />} 
              onClick={() => navigate('/orders')}
            >
              –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º
            </Button>
          </Space>
          
          <Title level={2} style={{ margin: 0, display: 'flex', alignItems: 'center' }}>
            <ShoppingCartOutlined style={{ marginRight: 12 }} />
            –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
          </Title>
        </Col>

        {/* Steps */}
        <Col span={24}>
          <Card>
            <Steps current={currentStep} items={steps} />
          </Card>
        </Col>

        {/* Form */}
        <Col span={24}>
          <Card>
            <Form
              form={form}
              layout="vertical"
              onFinish={handleSubmit}
              initialValues={{
                priority: 'normal',
                source: 'database'
              }}
            >
              <Row gutter={24}>
                <Col span={12}>
                  <Form.Item
                    name="customerName"
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞' }]}
                  >
                    <Input placeholder="–û–û–û –†–æ–º–∞—à–∫–∞" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="customerContact"
                    label="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                  >
                    <Input placeholder="+7 (999) 123-45-67" />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={24}>
                <Col span={12}>
                  <Form.Item
                    name="contractNumber"
                    label="–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
                  >
                    <Input placeholder="–î–û–ì-2025-001" />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  {/* –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
                </Col>
              </Row>

              <Row gutter={24}>
                <Col span={12}>
                  <Form.Item
                    name="source"
                    label="–ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞"
                    rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞' }]}
                    initialValue="database"
                  >
                    <Select 
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞"
                      onChange={(value) => {
                        setSelectedSource(value);
                        if (value !== 'other') {
                          form.setFieldValue('customSource', '');
                        }
                      }}
                    >
                      <Option value="database">–ò–∑ –±–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤</Option>
                      <Option value="website">–° —Å–∞–π—Ç–∞</Option>
                      <Option value="avito">–° –ê–≤–∏—Ç–æ</Option>
                      <Option value="referral">–ü–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</Option>
                      <Option value="cold_call">–•–æ–ª–æ–¥–Ω—ã–µ –∑–≤–æ–Ω–∫–∏</Option>
                      <Option value="other">–î—Ä—É–≥–æ–µ</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="customSource"
                    label="–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                    rules={[
                      {
                        required: false,
                        validator: (_, value) => {
                          if (selectedSource === 'other' && (!value || value.trim() === '')) {
                            return Promise.reject(new Error('–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞'));
                          }
                          return Promise.resolve();
                        },
                      },
                    ]}
                    dependencies={['source']}
                  >
                    <Input 
                      placeholder="–£–∫–∞–∂–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞" 
                      disabled={selectedSource !== 'other'}
                    />
                  </Form.Item>
                </Col>
              </Row>

              <Row gutter={24}>
                <Col span={6}>
                  <Form.Item
                    name="deliveryDate"
                    label="–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"
                  >
                    <DatePicker 
                      style={{ width: '100%' }}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                      disabledDate={(current) => current && current < dayjs().startOf('day')}
                    />
                  </Form.Item>
                </Col>
                <Col span={6}>
                  <Form.Item
                    name="priority"
                    label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                  >
                    <Select>
                      <Option value="low">–ù–∏–∑–∫–∏–π</Option>
                      <Option value="normal">–û–±—ã—á–Ω—ã–π</Option>
                      <Option value="high">–í—ã—Å–æ–∫–∏–π</Option>
                      <Option value="urgent">–°—Ä–æ—á–Ω—ã–π</Option>
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={6}>
                  <Form.Item
                    name="managerId"
                    label="–ú–µ–Ω–µ–¥–∂–µ—Ä"
                    initialValue={user?.id}
                  >
                    <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞">
                      {users.map(u => (
                        <Option key={u.id} value={u.id}>
                          {u.fullName || u.username} ({getRoleDisplayName(u.role)})
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={6}>
                  <div style={{ paddingTop: 30 }}>
                    <Button
                      type="dashed"
                      icon={<PlusOutlined />}
                      onClick={() => setProductModalVisible(true)}
                      size="large"
                      style={{ width: '100%' }}
                    >
                      –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </Button>
                  </div>
                </Col>
              </Row>

              <Row>
                <Col span={24}>
                  <Form.Item
                    name="notes"
                    label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É"
                  >
                    <TextArea rows={3} placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..." />
                  </Form.Item>
                </Col>
              </Row>
            </Form>
          </Card>
        </Col>

        {/* Order Items */}
        {orderItems.length > 0 && (
          <Col span={24}>
            <Card title="–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ">
              <Table
                columns={orderItemColumns}
                dataSource={orderItems}
                rowKey="id"
                pagination={false}
                scroll={{ x: 800 }}
              />
              
              <Divider />
              
              {/* Totals */}
              <Row gutter={16}>
                <Col span={6}>
                  <Statistic
                    title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π"
                    value={orderItems.length}
                    valueStyle={{ color: '#1890ff' }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                    value={totals.totalQuantity}
                    suffix="—à—Ç"
                    valueStyle={{ color: '#1890ff' }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="–ú–æ–∂–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å"
                    value={totals.totalCanReserve}
                    suffix="—à—Ç"
                    valueStyle={{ color: '#52c41a' }}
                  />
                </Col>
                <Col span={6}>
                  <Statistic
                    title="–¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
                    value={totals.totalNeedProduction}
                    suffix="—à—Ç"
                    valueStyle={{ color: '#faad14' }}
                  />
                </Col>
              </Row>
              
              <Divider />
              
              <Row justify="space-between" align="middle">
                <Col>
                  <Title level={3} style={{ margin: 0 }}>
                    –û–±—â–∞—è —Å—É–º–º–∞: {formatPriceWithCurrency(totals.totalAmount)}
                  </Title>
                </Col>
                <Col>
                  <Space>
                    <Button onClick={() => navigate('/orders')}>
                      –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button 
                      type="primary" 
                      size="large"
                      onClick={handleSubmit}
                      icon={<CheckOutlined />}
                    >
                      –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                    </Button>
                  </Space>
                </Col>
              </Row>
            </Card>
          </Col>
        )}
      </Row>

      {/* Product Selection Modal */}
      <Modal
        title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"
        open={productModalVisible}
        onCancel={() => {
          setProductModalVisible(false);
          setSearchText('');
          clearSizeFilters();
          setShowSizeFilters(false);
        }}
        footer={null}
        width={1200}
      >
        <Space direction="vertical" size="middle" style={{ width: '100%' }}>
          {/* –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏ */}
          <Row gutter={16} align="middle">
            <Col flex={1}>
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—É..."
                prefix={<SearchOutlined />}
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                onPressEnter={handleSearch}
                allowClear
              />
            </Col>
            <Col>
              <Button 
                type="primary" 
                icon={<SearchOutlined />}
                onClick={handleSearch}
                loading={productsLoading}
              >
                –ù–∞–π—Ç–∏
              </Button>
            </Col>
            <Col>
              <Button 
                icon={<FilterOutlined />}
                onClick={() => setShowSizeFilters(!showSizeFilters)}
                type={showSizeFilters ? 'primary' : 'default'}
              >
                –§–∏–ª—å—Ç—Ä—ã
              </Button>
            </Col>
            {(searchText || hasSizeFilters) && (
              <Col>
                <Button 
                  icon={<ClearOutlined />}
                  onClick={() => {
                    setSearchText('');
                    clearSizeFilters();
                    setFilteredProducts(products);
                  }}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </Col>
            )}
          </Row>

          {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º */}
          {showSizeFilters && (
            <Card size="small" title="–§–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º (–º–º)">
              <Row gutter={16}>
                <Col span={8}>
                  <Text strong>–î–ª–∏–Ω–∞</Text>
                  <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                    <InputNumber
                      placeholder="–û—Ç"
                      value={sizeFilters.lengthMin}
                      onChange={(value) => setSizeFilters(prev => ({ ...prev, lengthMin: value }))}
                      min={0}
                      style={{ width: '100%' }}
                    />
                    <span>‚Äì</span>
                    <InputNumber
                      placeholder="–î–æ"
                      value={sizeFilters.lengthMax}
                      onChange={(value) => setSizeFilters(prev => ({ ...prev, lengthMax: value }))}
                      min={0}
                      style={{ width: '100%' }}
                    />
                  </div>
                </Col>
                
                <Col span={8}>
                  <Text strong>–®–∏—Ä–∏–Ω–∞</Text>
                  <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                    <InputNumber
                      placeholder="–û—Ç"
                      value={sizeFilters.widthMin}
                      onChange={(value) => setSizeFilters(prev => ({ ...prev, widthMin: value }))}
                      min={0}
                      style={{ width: '100%' }}
                    />
                    <span>‚Äì</span>
                    <InputNumber
                      placeholder="–î–æ"
                      value={sizeFilters.widthMax}
                      onChange={(value) => setSizeFilters(prev => ({ ...prev, widthMax: value }))}
                      min={0}
                      style={{ width: '100%' }}
                    />
                  </div>
                </Col>
                
                <Col span={8}>
                  <Text strong>–í—ã—Å–æ—Ç–∞</Text>
                  <div style={{ marginTop: 8, display: 'flex', gap: 8, alignItems: 'center' }}>
                    <InputNumber
                      placeholder="–û—Ç"
                      value={sizeFilters.thicknessMin}
                      onChange={(value) => setSizeFilters(prev => ({ ...prev, thicknessMin: value }))}
                      min={0}
                      style={{ width: '100%' }}
                    />
                    <span>‚Äì</span>
                    <InputNumber
                      placeholder="–î–æ"
                      value={sizeFilters.thicknessMax}
                      onChange={(value) => setSizeFilters(prev => ({ ...prev, thicknessMax: value }))}
                      min={0}
                      style={{ width: '100%' }}
                    />
                  </div>
                </Col>
              </Row>
              
              <div style={{ marginTop: 16, textAlign: 'right' }}>
                <Space>
                  <Button onClick={clearSizeFilters}>
                    –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                  </Button>
                  <Button type="primary" onClick={handleSearch}>
                    –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                  </Button>
                </Space>
              </div>
            </Card>
          )}

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
          {filteredProducts.length === 0 && !productsLoading && (searchText || hasSizeFilters) && (
            <div style={{ textAlign: 'center', padding: '40px 0' }}>
              <Text type="secondary">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º</Text>
            </div>
          )}
          
          <Table
            columns={productColumns}
            dataSource={filteredProducts}
            rowKey="id"
            loading={productsLoading}
            pagination={{ 
              pageSize: 10,
              showSizeChanger: true,
              showQuickJumper: true,
              showTotal: (total) => `–í—Å–µ–≥–æ ${total} —Ç–æ–≤–∞—Ä–æ–≤`
            }}
            scroll={{ x: 600 }}
          />
        </Space>
      </Modal>

      {/* Confirmation Modal */}
      <Modal
        title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"
        open={confirmModalVisible}
        onOk={confirmOrder}
        onCancel={() => setConfirmModalVisible(false)}
        okText="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
        cancelText="–û—Ç–º–µ–Ω–∞"
        confirmLoading={loading}
        width={600}
      >
        <div style={{ padding: '20px 0' }}>
          <Row gutter={16}>
            <Col span={12}>
              <Statistic
                title="–û–±—â–∞—è —Å—É–º–º–∞"
                value={totals.totalAmount.toFixed(2)}
                suffix="‚ÇΩ"
                valueStyle={{ fontSize: '24px', color: '#1890ff' }}
              />
            </Col>
            <Col span={12}>
              <Statistic
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"
                value={totals.totalQuantity}
                suffix="—à—Ç"
                valueStyle={{ fontSize: '24px', color: '#1890ff' }}
              />
            </Col>
          </Row>
          
          <Divider />
          
          <Space direction="vertical" style={{ width: '100%' }}>
            {totals.totalCanReserve > 0 && (
              <Text>
                <CheckOutlined style={{ color: '#52c41a', marginRight: 8 }} />
                –ë—É–¥–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: <strong>{totals.totalCanReserve} —à—Ç</strong>
              </Text>
            )}
            
            {totals.totalNeedProduction > 0 && (
              <Text>
                <ExclamationCircleOutlined style={{ color: '#faad14', marginRight: 8 }} />
                –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: <strong>{totals.totalNeedProduction} —à—Ç</strong>
              </Text>
            )}
          </Space>
        </div>
      </Modal>
    </div>
  );
};

export default CreateOrder; 