import React, { useState, useEffect } from 'react';
import {
  Row, Col, Card, Typography, Tag, Table, Button, Space, Divider, Timeline,
  Form, Input, Modal, Select, Statistic, Descriptions, Badge, Avatar,
  DatePicker, Popconfirm, InputNumber, App
} from 'antd';
import PriceInput from '../components/PriceInput';
import { formatPriceWithCurrency, calculateLineTotal, calculateOrderTotal } from '../utils/priceUtils';
import {
  ArrowLeftOutlined, EditOutlined, MessageOutlined, UserOutlined,
  ShoppingCartOutlined, CalendarOutlined, PhoneOutlined, DollarOutlined,
  CheckCircleOutlined, ExclamationCircleOutlined, ClockCircleOutlined,
  DeleteOutlined, PlusOutlined, SettingOutlined, TruckOutlined
} from '@ant-design/icons';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';
import usePermissions from '../hooks/usePermissions';
import { handleFormError } from '../utils/errorUtils';
import { ordersApi, Order, OrderItem, OrderMessage } from '../services/ordersApi';
import { catalogApi, Product } from '../services/catalogApi';
import { getOrderStatusText, getOrderStatusColor, ORDER_STATUS_LABELS } from '../constants/orderStatuses';
import shipmentsApi from '../services/shipmentsApi';
import ShipmentSelectionModal from '../components/ShipmentSelectionModal';
import dayjs from 'dayjs';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;
const { TextArea } = Input;

interface User {
  id: number;
  username: string;
  fullName?: string;
  role: string;
}

const OrderDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user, token } = useAuthStore();
  const { canEdit, canManage } = usePermissions();

  const getRoleDisplayName = (role: string) => {
    const roleNames: Record<string, string> = {
      'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
      'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä', 
      'production': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      'warehouse': '–°–∫–ª–∞–¥'
    };
    return roleNames[role] || role;
  };
  
  const { message, modal } = App.useApp();
  
  const [order, setOrder] = useState<Order | null>(null);
  const [loading, setLoading] = useState(false);
  const [statusModalVisible, setStatusModalVisible] = useState(false);
  const [messageModalVisible, setMessageModalVisible] = useState(false);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [productModalVisible, setProductModalVisible] = useState(false);
  const [planShipmentModalVisible, setPlanShipmentModalVisible] = useState(false);
  const [shipmentSelectionModalVisible, setShipmentSelectionModalVisible] = useState(false);
  const [users, setUsers] = useState<User[]>([]);
  
  const [statusForm] = Form.useForm();
  const [messageForm] = Form.useForm();
  const [editForm] = Form.useForm();
  
  // For editing
  const [products, setProducts] = useState<Product[]>([]);
  const [editingItems, setEditingItems] = useState<OrderItem[]>([]);
  const [searchText, setSearchText] = useState('');

  // Load order details
  useEffect(() => {
    if (id && token) {
      loadOrder();
      loadProducts();
      loadUsers();
    }
  }, [id, token]);

  const loadOrder = async () => {
    if (!id || !token) return;
    
    setLoading(true);
    try {
      const response = await ordersApi.getOrder(Number(id));
      
      if (response.success) {
        setOrder(response.data);
      } else {
        message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
        navigate('/orders');
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
      handleFormError(error, undefined, { key: 'load-order-error', duration: 4 });
      navigate('/orders');
    } finally {
      setLoading(false);
    }
  };

  const loadProducts = async () => {
    if (!token) return;
    
    try {
      const response = await catalogApi.getProducts({ page: 1, limit: 100 });
      if (response.success) {
        setProducts(response.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    }
  };

  const loadUsers = async () => {
    if (!token) return;
    
    try {
      const response = await catalogApi.getUsers();
      
      if (response.success) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        const availableUsers = response.data.filter(
          (u: User) => canManage('orders') || canEdit('orders')
        );
        setUsers(availableUsers);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  };


  const addOrderToShipment = async (shipmentId: number) => {
    if (!order || !token) return;
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ
      if (order.status !== 'ready') {
        message.error('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –æ—Ç–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ")');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ç–≥—Ä—É–∑–∫—É
      const shipment = await shipmentsApi.getShipment(shipmentId);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞
      if (!shipment.status || !['pending', 'paused'].includes(shipment.status)) {
        message.error('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –æ—Ç–≥—Ä—É–∑–∫—É');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –≤ —ç—Ç—É –æ—Ç–≥—Ä—É–∑–∫—É
      if (shipment.orders?.some(so => so.orderId === order.id)) {
        message.warning('–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç—É –æ—Ç–≥—Ä—É–∑–∫—É');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –≤ –¥—Ä—É–≥—É—é –æ—Ç–≥—Ä—É–∑–∫—É
      const [pendingShipments, pausedShipments] = await Promise.all([
        shipmentsApi.getShipments({ status: 'pending' }),
        shipmentsApi.getShipments({ status: 'paused' })
      ]);
      
      const allOpenShipments = [...pendingShipments, ...pausedShipments];
      const orderInOtherShipment = allOpenShipments.find(s => 
        s.orders?.some(so => so.orderId === order.id)
      );
      
      if (orderInOtherShipment) {
        message.warning(`–ó–∞–∫–∞–∑ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–≥—Ä—É–∑–∫—É ${orderInOtherShipment.shipmentNumber}`);
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
      const updatedOrderIds = [
        ...(shipment.orders?.map(so => so.orderId) || []),
        order.id
      ];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É
      await shipmentsApi.updateShipment(shipmentId, {
        orderIds: updatedOrderIds
      });
      
      message.success(`–ó–∞–∫–∞–∑ ${order.orderNumber} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–≥—Ä—É–∑–∫—É ${shipment.shipmentNumber}`);
      setPlanShipmentModalVisible(false);
      setShipmentSelectionModalVisible(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
      loadOrder();
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç–≥—Ä—É–∑–∫–∏
      navigate(`/shipments/${shipmentId}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–≥—Ä—É–∑–∫—É:', error);
      message.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –æ—Ç–≥—Ä—É–∑–∫—É');
    }
  };

  const handleShipmentSelect = (shipmentId: number) => {
    addOrderToShipment(shipmentId);
  };

  // Handle status change
  const handleStatusChange = async (values: any) => {
    if (!order || !token) return;

    try {
      const response = await ordersApi.updateOrderStatus(
        order.id,
        values.status,
        values.comment
      );

      if (response.success) {
        message.success('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω');
        setStatusModalVisible(false);
        statusForm.resetFields();
        loadOrder(); // Reload order
      } else {
        message.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      handleFormError(error, undefined, { key: 'change-status-error', duration: 4 });
    }
  };

  // Handle add message
  const handleAddMessage = async (values: any) => {
    if (!order || !token) return;

    try {
      const response = await ordersApi.addMessage(order.id, values.message);

      if (response.success) {
        message.success('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        setMessageModalVisible(false);
        messageForm.resetFields();
        loadOrder(); // Reload order
      } else {
        message.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      handleFormError(error, messageForm, { key: 'add-message-error', duration: 4 });
    }
  };

  // Handle edit order
  const handleEditOrder = async (values: any) => {
    if (!order || !token) return;

    try {
      // Prepare order data
      const orderData = {
        customerName: values.customerName,
        customerContact: values.customerContact,
        contractNumber: values.contractNumber, // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
        deliveryDate: values.deliveryDate ? dayjs(values.deliveryDate).toISOString() : null,
        priority: values.priority,
        notes: values.notes,
        managerId: values.managerId, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        items: editingItems.map(item => ({
          productId: item.productId,
          quantity: item.quantity,
          price: item.price
        }))
      };

      const response = await ordersApi.updateOrder(order.id, orderData);

      if (response.success) {
        message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω');
        setEditModalVisible(false);
        editForm.resetFields();
        loadOrder(); // Reload order
      } else {
        message.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
      }
    } catch (error: any) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      handleFormError(error, editForm, { key: 'update-order-error', duration: 4 });
    }
  };

  // Open edit modal
  const openEditModal = () => {
    if (!order) return;
    
    setEditingItems([...(order.items || [])]);
    editForm.setFieldsValue({
      customerName: order.customerName,
      customerContact: order.customerContact,
      contractNumber: order.contractNumber, // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞
      deliveryDate: order.deliveryDate ? dayjs(order.deliveryDate) : null,
      priority: order.priority,
      notes: order.notes,
      managerId: order.managerId // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    });
    setEditModalVisible(true);
  };

  // Add product to editing items
  const addProductToOrder = (product: Product) => {
    const existing = editingItems.find(item => item.productId === product.id);
    if (existing) {
      message.warning('–¢–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑');
      return;
    }

    const newItem: OrderItem = {
      id: Date.now(), // Use number ID
      orderId: order!.id,
      productId: product.id,
      quantity: 1,
      reservedQuantity: 0,
      price: String(Number(product.price) || 0), // Convert to string
      createdAt: new Date().toISOString(),
      product: {
        ...product,
        stock: {
          currentStock: product.stock?.currentStock || 0,
          reservedStock: product.stock?.reservedStock || 0,
          availableStock: (product.stock?.currentStock || 0) - (product.stock?.reservedStock || 0),
          inProductionQuantity: 0
        }
      }
    };

    setEditingItems([...editingItems, newItem]);
    setProductModalVisible(false);
    setSearchText('');
  };

  // Remove product from editing items
  const removeProductFromOrder = (itemId: number) => {
    setEditingItems(editingItems.filter(item => item.id !== itemId));
  };

  // Update item quantity/price
  const updateOrderItem = (itemId: number, field: 'quantity' | 'price', value: number) => {
    setEditingItems(editingItems.map(item => 
      item.id === itemId ? { 
        ...item, 
        [field]: field === 'price' ? String(value) : value 
      } : item
    ));
  };

  // Check if order can be edited
  const canEditOrder = () => {
    if (!order) return false;
            // Can't edit completed or cancelled orders
        const nonEditableStatuses = ['completed', 'cancelled'];
    return !nonEditableStatuses.includes(order.status);
  };

  // Delete order handler
  const handleDeleteOrder = async () => {
    if (!order || !token) return;

    modal.confirm({
      title: '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
      icon: <ExclamationCircleOutlined />,
      content: (
        <div>
          <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ <strong>{order.orderNumber}</strong>?</p>
          <p>–ö–ª–∏–µ–Ω—Ç: <strong>{order.customerName}</strong></p>
          <p style={{ color: '#ff4d4f', marginTop: '8px' }}>
            ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ —Ä–µ–∑–µ—Ä–≤—ã —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥—É—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.
          </p>
        </div>
      ),
      okText: '–£–¥–∞–ª–∏—Ç—å',
      okType: 'danger',
      cancelText: '–û—Ç–º–µ–Ω–∞',
      onOk: async () => {
        try {
          const response = await ordersApi.deleteOrder(order.id);
          
          if (response.success) {
            message.success('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            navigate('/orders'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
          } else {
            message.error(response.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
          }
        } catch (error: any) {
          console.error('üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
          handleFormError(error, undefined, { key: 'delete-order-error', duration: 4 });
        }
      }
    });
  };

  // Get status info
  const getStatusInfo = (status: string) => {
    const statusMap = {
      new: { color: 'blue', text: ORDER_STATUS_LABELS.new, icon: <ClockCircleOutlined /> },
      confirmed: { color: 'cyan', text: ORDER_STATUS_LABELS.confirmed, icon: <CheckCircleOutlined /> },
      in_production: { color: 'orange', text: ORDER_STATUS_LABELS.in_production, icon: <ExclamationCircleOutlined /> },
      ready: { color: 'green', text: ORDER_STATUS_LABELS.ready, icon: <CheckCircleOutlined /> },
      completed: { color: 'success', text: ORDER_STATUS_LABELS.completed, icon: <CheckCircleOutlined /> },
      cancelled: { color: 'red', text: ORDER_STATUS_LABELS.cancelled, icon: <ExclamationCircleOutlined /> }
    };
    return statusMap[status as keyof typeof statusMap] || { color: 'default', text: status, icon: <ClockCircleOutlined /> };
  };

  // Get priority info
  const getPriorityInfo = (priority: string) => {
    const priorityMap = {
      low: { color: 'default', text: '–ù–∏–∑–∫–∏–π' },
      normal: { color: 'blue', text: '–û–±—ã—á–Ω—ã–π' },
      high: { color: 'orange', text: '–í—ã—Å–æ–∫–∏–π' },
      urgent: { color: 'red', text: '–°—Ä–æ—á–Ω—ã–π' }
    };
    return priorityMap[priority as keyof typeof priorityMap] || { color: 'default', text: priority };
  };

  // Calculate order statistics
  const calculateStats = () => {
    if (!order?.items) return { totalQuantity: 0, totalReserved: 0, totalNeedProduction: 0 };

    const totalQuantity = order.items.reduce((sum, item) => sum + item.quantity, 0);
    const totalReserved = order.items.reduce((sum, item) => sum + item.reservedQuantity, 0);
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É = —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
    const totalNeedProduction = order.items.reduce((sum, item) => {
      const availableStock = item.product?.stock?.availableStock || 0;
      const inProduction = item.product?.stock?.inProductionQuantity || 0;
      const needed = Math.max(0, item.quantity - item.reservedQuantity);
      const stillNeed = Math.max(0, needed - inProduction);
      return sum + stillNeed;
    }, 0);

    return { totalQuantity, totalReserved, totalNeedProduction };
  };

  // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
  const getOrderReadinessStatus = () => {
    if (!order?.items) return { status: 'unknown', color: '#d9d9d9', text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };

    let allAvailable = true;
    let anyInProduction = false;
    let anyOutOfStock = false;
    
    for (const item of order.items) {
      const product = item.product;
      if (!product?.stock) continue;

      const { availableStock, inProductionQuantity, currentStock, reservedStock } = product.stock;
      const generallyAvailable = availableStock || (currentStock - Number(reservedStock || 0));
      const inProduction = Number(inProductionQuantity || 0);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –≠–¢–û–ì–û –∑–∞–∫–∞–∑–∞
      const availableForThisOrder = generallyAvailable + (item.reservedQuantity || 0);

      if (availableForThisOrder < item.quantity) {
        allAvailable = false;
        if (inProduction > 0) {
          anyInProduction = true;
        } else {
          anyOutOfStock = true;
        }
      }
    }

    if (allAvailable) {
      return { status: 'ready', color: '#52c41a', text: '‚úÖ ' + ORDER_STATUS_LABELS.ready };
    } else if (anyInProduction) {
      return { status: 'in_production', color: '#faad14', text: 'üè≠ –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ' };
    } else if (anyOutOfStock) {
      return { status: 'need_production', color: '#ff4d4f', text: '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' };
    } else {
      return { status: 'partial', color: '#1890ff', text: 'üîÑ –ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤' };
    }
  };

  // Calculate editing total
  const calculateEditingTotal = () => {
    return editingItems.reduce((sum, item) => sum + (Number(item.price) * item.quantity), 0);
  };

  // Order items table columns
  const itemColumns = [
    {
      title: '–¢–æ–≤–∞—Ä',
      dataIndex: 'product',
      key: 'product',
      render: (product: any) => (
        <div>
          <Text strong>{product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}</Text>
          <br />
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {product?.article} ‚Ä¢ {product?.category?.name}
          </Text>
        </div>
      ),
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      align: 'center' as const,
      render: (quantity: number) => (
        <Text strong>{quantity} —à—Ç</Text>
      ),
    },
    {
      title: '–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞',
      dataIndex: 'product',
      key: 'productStatus',
      align: 'center' as const,
      render: (product: any, record: OrderItem) => {
        if (!product?.stock) {
          return <Tag color="default">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Tag>;
        }

        const { currentStock, reservedStock, availableStock, inProductionQuantity } = product.stock;
        const generallyAvailable = availableStock || (currentStock - Number(reservedStock || 0));
        const inProduction = Number(inProductionQuantity || 0);
        const reserved = Number(reservedStock || 0);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –≠–¢–û–ì–û –∑–∞–∫–∞–∑–∞
        const availableForThisOrder = generallyAvailable + (record.reservedQuantity || 0);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        if (generallyAvailable < 0) {
          return <Tag color="red">‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–∫–∞–∑</Tag>;
        } else if (generallyAvailable === 0 && (record.reservedQuantity || 0) === 0) {
          if (inProduction > 0) {
            return <Tag color="orange">üè≠ –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</Tag>;
          } else {
            return <Tag color="red">‚ùå –ù–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ</Tag>;
          }
        } else if (availableForThisOrder < record.quantity) {
          if (inProduction > 0) {
            return <Tag color="orange">üè≠ –í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</Tag>;
          } else {
            return <Tag color="gold">‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –≤ –Ω–∞–ª–∏—á–∏–∏</Tag>;
          }
        } else {
          return <Tag color="green">‚úÖ –í –Ω–∞–ª–∏—á–∏–∏</Tag>;
        }
      },
    },
    {
      title: '–¶–µ–Ω–∞ –∑–∞ –µ–¥.',
      dataIndex: 'price',
      key: 'price',
      align: 'right' as const,
      render: (price: string) => (
        <Text>{formatPriceWithCurrency(price)}</Text>
      ),
    },
    {
      title: '–°—É–º–º–∞',
      key: 'total',
      align: 'right' as const,
      render: (_: any, record: OrderItem) => (
        <Text strong>{formatPriceWithCurrency(calculateLineTotal(record.price, record.quantity))}</Text>
      ),
    },
  ];

  // Editing items table columns
  const editingItemColumns = [
    {
      title: '–¢–æ–≤–∞—Ä',
      dataIndex: 'product',
      key: 'product',
      render: (product: any) => (
        <div>
          <Text strong>{product?.name}</Text>
          <br />
          <Text type="secondary" style={{ fontSize: '12px' }}>
            {product?.article}
          </Text>
        </div>
      ),
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      key: 'quantity',
      align: 'center' as const,
      render: (_: any, record: OrderItem) => (
        <InputNumber
          min={1}
          value={record.quantity}
          onChange={(value) => updateOrderItem(record.id, 'quantity', value || 1)}
          size="small"
        />
      ),
    },
    {
      title: '–¶–µ–Ω–∞ –∑–∞ –µ–¥.',
      key: 'price',
      align: 'right' as const,
      render: (_: any, record: OrderItem) => (
        <PriceInput
          value={Number(record.price)}
          onChange={(value) => updateOrderItem(record.id, 'price', value || 0)}
          size="small"
        />
      ),
    },
    {
      title: '–°—É–º–º–∞',
      key: 'total',
      align: 'right' as const,
      render: (_: any, record: OrderItem) => (
        <Text strong>{formatPriceWithCurrency(calculateLineTotal(record.price, record.quantity))}</Text>
      ),
    },
    {
      title: '–î–µ–π—Å—Ç–≤–∏—è',
      key: 'actions',
      align: 'center' as const,
      render: (_: any, record: OrderItem) => (
        <Popconfirm
          title="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∑–∞–∫–∞–∑–∞?"
          onConfirm={() => removeProductFromOrder(record.id)}
          okText="–î–∞"
          cancelText="–ù–µ—Ç"
        >
          <Button 
            type="text" 
            danger 
            icon={<DeleteOutlined />}
            size="small"
          />
        </Popconfirm>
      ),
    },
  ];

  // Filter products for modal
  const filteredProducts = products.filter(product =>
    !searchText || 
    product.name.toLowerCase().includes(searchText.toLowerCase()) ||
    product.article?.toLowerCase().includes(searchText.toLowerCase())
  );

  if (loading || !order) {
    return (
      <Card loading={loading}>
        <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...</div>
      </Card>
    );
  }

  const statusInfo = getStatusInfo(order.status);
  const priorityInfo = getPriorityInfo(order.priority);
  const stats = calculateStats();
  const readinessStatus = getOrderReadinessStatus();

  return (
    <div>
      <Row gutter={[0, 24]}>
        {/* Header */}
        <Col span={24}>
          <Row justify="space-between" align="middle">
            <Col>
              <Space style={{ marginBottom: 16 }}>
                <Button 
                  icon={<ArrowLeftOutlined />} 
                  onClick={() => navigate('/orders')}
                >
                  –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º
                </Button>
              </Space>
              
              <Space align="center">
                <ShoppingCartOutlined style={{ fontSize: 24, color: '#1890ff' }} />
                <div>
                  <Title level={2} style={{ margin: 0 }}>
                    –ó–∞–∫–∞–∑ {order.orderNumber}
                  </Title>
                  <Space>
                    <Tag color={statusInfo.color} icon={statusInfo.icon}>
                      {statusInfo.text}
                    </Tag>
                    <Tag color={priorityInfo.color}>
                      {priorityInfo.text}
                    </Tag>
                    <Text type="secondary">
                      –°–æ–∑–¥–∞–Ω {dayjs(order.createdAt).format('DD.MM.YYYY –≤ HH:mm')}
                    </Text>
                  </Space>
                </div>
              </Space>
            </Col>

            <Col>
              <Space>
                <Button 
                  icon={<MessageOutlined />}
                  onClick={() => setMessageModalVisible(true)}
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                </Button>
                {canEditOrder() && (
                  <Button 
                    icon={<SettingOutlined />}
                    onClick={openEditModal}
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑
                  </Button>
                )}
                <Button 
                  type="primary"
                  icon={<EditOutlined />}
                  onClick={() => {
                    setStatusModalVisible(true);
                    statusForm.setFieldsValue({ status: order.status });
                  }}
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                </Button>
                {canEditOrder() && canEdit('orders') && (
                  <Button 
                    danger
                    icon={<DeleteOutlined />}
                    onClick={handleDeleteOrder}
                  >
                    –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
                  </Button>
                )}
                {order?.status === 'ready' && shipmentsApi.canCreate(user?.role || '') && (
                  <Button 
                    type="primary"
                    icon={<TruckOutlined />}
                    onClick={() => setPlanShipmentModalVisible(true)}
                  >
                    –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É
                  </Button>
                )}
              </Space>
            </Col>
          </Row>
        </Col>

        {/* Order Information */}
        <Col span={24}>
          <Card title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ">
            <Row gutter={24}>
              <Col span={12}>
                <Descriptions column={1} bordered size="small">
                  <Descriptions.Item label="–ö–ª–∏–µ–Ω—Ç" span={1}>
                    <Text strong>{order.customerName}</Text>
                  </Descriptions.Item>
                  <Descriptions.Item label="–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞" span={1}>
                    {order.contractNumber ? (
                      <Text>{order.contractNumber}</Text>
                    ) : (
                      <Text type="secondary">–ù–µ —É–∫–∞–∑–∞–Ω</Text>
                    )}
                  </Descriptions.Item>
                  <Descriptions.Item label="–ö–æ–Ω—Ç–∞–∫—Ç" span={1}>
                    {order.customerContact ? (
                      <Space>
                        <PhoneOutlined />
                        <Text>{order.customerContact}</Text>
                      </Space>
                    ) : (
                      <Text type="secondary">–ù–µ —É–∫–∞–∑–∞–Ω</Text>
                    )}
                  </Descriptions.Item>
                  <Descriptions.Item label="–ú–µ–Ω–µ–¥–∂–µ—Ä" span={1}>
                    <Space>
                      <Avatar size="small" icon={<UserOutlined />} />
                      <Text>{order.manager?.fullName || order.manager?.username}</Text>
                    </Space>
                  </Descriptions.Item>
                  <Descriptions.Item label="–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏" span={1}>
                    {order.deliveryDate ? (
                      <Space>
                        <CalendarOutlined />
                        <Text>{dayjs(order.deliveryDate).format('DD.MM.YYYY')}</Text>
                      </Space>
                    ) : (
                      <Text type="secondary">–ù–µ —É–∫–∞–∑–∞–Ω–∞</Text>
                    )}
                  </Descriptions.Item>
                </Descriptions>
              </Col>

              <Col span={12}>
                <Row gutter={16}>
                  <Col span={12}>
                    <Statistic
                      title="–û–±—â–∞—è —Å—É–º–º–∞"
                      value={Number(order.totalAmount)}
                      prefix={<DollarOutlined />}
                      suffix="‚ÇΩ"
                      valueStyle={{ color: '#1890ff' }}
                    />
                  </Col>
                  <Col span={12}>
                    <Statistic
                      title="–ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ"
                      value={order.items?.length || 0}
                      valueStyle={{ color: '#52c41a' }}
                    />
                  </Col>
                </Row>

                <Divider style={{ margin: '16px 0' }} />

                <Row gutter={16}>
                  <Col span={12}>
                    <div style={{ textAlign: 'center' }}>
                      <Text type="secondary">–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</Text>
                      <br />
                      <Text strong style={{ fontSize: '16px' }}>{stats.totalQuantity} —à—Ç</Text>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div style={{ textAlign: 'center' }}>
                      <Text type="secondary">–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</Text>
                      <br />
                      <Tag 
                        color={readinessStatus.color} 
                        style={{ fontSize: '14px', padding: '4px 8px' }}
                      >
                        {readinessStatus.text}
                      </Tag>
                    </div>
                  </Col>
                </Row>
              </Col>
            </Row>

            {order.notes && (
              <>
                <Divider />
                <div>
                  <Text strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</Text>
                  <Paragraph style={{ marginTop: 8, marginBottom: 0 }}>
                    {order.notes}
                  </Paragraph>
                </div>
              </>
            )}
          </Card>
        </Col>

        {/* Order Items */}
        <Col span={24}>
          <Card title="–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ">
            <Table
              columns={itemColumns}
              dataSource={order.items || []}
              rowKey="id"
              pagination={false}
              scroll={{ x: 800 }}
            />
          </Card>
        </Col>

        {/* Order History/Messages */}
        <Col span={24}>
          <Card title="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞">
            {order.messages && order.messages.length > 0 ? (
              <Timeline>
                {order.messages.map((msg: OrderMessage) => (
                  <Timeline.Item key={msg.id}>
                    <div>
                      <Space>
                        <Avatar size="small" icon={<UserOutlined />} />
                        <Text strong>{msg.user?.fullName || msg.user?.username}</Text>
                        <Text type="secondary">
                          {dayjs(msg.createdAt).format('DD.MM.YYYY –≤ HH:mm')}
                        </Text>
                      </Space>
                      <div style={{ marginTop: 8 }}>
                        <Text>{msg.message}</Text>
                      </div>
                    </div>
                  </Timeline.Item>
                ))}
              </Timeline>
            ) : (
              <div style={{ textAlign: 'center', padding: '40px 0' }}>
                <Text type="secondary">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</Text>
              </div>
            )}
          </Card>
        </Col>
      </Row>

      {/* Status Change Modal */}
      <Modal
        title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
        open={statusModalVisible}
        onCancel={() => setStatusModalVisible(false)}
        footer={null}
        width={500}
      >
        <Form
          form={statusForm}
          layout="vertical"
          onFinish={handleStatusChange}
        >
          <Form.Item
            name="status"
            label="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"
            rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å' }]}
          >
            <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å">
              <Option value="new">–ù–æ–≤—ã–π</Option>
              <Option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</Option>
              <Option value="in_production">–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ</Option>
              <Option value="ready">{ORDER_STATUS_LABELS.ready}</Option>
              <Option value="completed">{ORDER_STATUS_LABELS.completed}</Option>
              <Option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="comment"
            label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          >
            <TextArea 
              rows={3} 
              placeholder="–ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞..."
            />
          </Form.Item>

          <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>
            <Space>
              <Button onClick={() => setStatusModalVisible(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="primary" htmlType="submit">
                –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Add Message Modal */}
      <Modal
        title="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É"
        open={messageModalVisible}
        onCancel={() => setMessageModalVisible(false)}
        footer={null}
        width={500}
      >
        <Form
          form={messageForm}
          layout="vertical"
          onFinish={handleAddMessage}
        >
          <Form.Item
            name="message"
            label="–°–æ–æ–±—â–µ–Ω–∏–µ"
            rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' }]}
          >
            <TextArea 
              rows={4} 
              placeholder="–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É..."
            />
          </Form.Item>

          <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>
            <Space>
              <Button onClick={() => setMessageModalVisible(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="primary" htmlType="submit">
                –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Edit Order Modal */}
      <Modal
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
        open={editModalVisible}
        onCancel={() => setEditModalVisible(false)}
        footer={null}
        width={1000}
      >
        <Form
          form={editForm}
          layout="vertical"
          onFinish={handleEditOrder}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="customerName"
                label="–ö–ª–∏–µ–Ω—Ç"
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞' }]}
              >
                <Input placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="customerContact"
                label="–ö–æ–Ω—Ç–∞–∫—Ç"
              >
                <Input placeholder="–¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email" />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={24}>
            <Col span={12}>
              <Form.Item
                name="contractNumber"
                label="–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"
              >
                <Input placeholder="–î–û–ì-2025-001" />
              </Form.Item>
            </Col>
            <Col span={12}>
              {/* –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */}
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="deliveryDate"
                label="–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏"
              >
                <DatePicker style={{ width: '100%' }} placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="priority"
                label="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç">
                  <Option value="low">–ù–∏–∑–∫–∏–π</Option>
                  <Option value="normal">–û–±—ã—á–Ω—ã–π</Option>
                  <Option value="high">–í—ã—Å–æ–∫–∏–π</Option>
                  <Option value="urgent">–°—Ä–æ—á–Ω—ã–π</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="managerId"
                label="–ú–µ–Ω–µ–¥–∂–µ—Ä"
              >
                <Select placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞" disabled={user?.role !== 'director'}>
                  {users.map(u => (
                    <Option key={u.id} value={u.id}>
                      {u.fullName || u.username} ({getRoleDisplayName(u.role)})
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="notes"
            label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
          >
            <TextArea rows={3} placeholder="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É..." />
          </Form.Item>

          <Divider>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ</Divider>

          <div style={{ marginBottom: 16 }}>
            <Button 
              type="dashed" 
              icon={<PlusOutlined />}
              onClick={() => setProductModalVisible(true)}
            >
              –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
            </Button>
            <div style={{ float: 'right' }}>
              <Text strong>
                –û–±—â–∞—è —Å—É–º–º–∞: {calculateEditingTotal().toLocaleString()} ‚ÇΩ
              </Text>
            </div>
          </div>

          <Table
            columns={editingItemColumns}
            dataSource={editingItems}
            rowKey="id"
            pagination={false}
            scroll={{ x: 600 }}
            size="small"
          />

          <Form.Item style={{ marginBottom: 0, textAlign: 'right', marginTop: 24 }}>
            <Space>
              <Button onClick={() => setEditModalVisible(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="primary" htmlType="submit">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>

      {/* Product Selection Modal */}
      <Modal
        title="–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞"
        open={productModalVisible}
        onCancel={() => setProductModalVisible(false)}
        footer={null}
        width={800}
      >
        <Input
          placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞..."
          value={searchText}
          onChange={(e) => setSearchText(e.target.value)}
          style={{ marginBottom: 16 }}
        />

        <div style={{ maxHeight: 400, overflow: 'auto' }}>
          {filteredProducts.map(product => (
            <Card 
              key={product.id}
              size="small"
              style={{ marginBottom: 8 }}
              onClick={() => addProductToOrder(product)}
              hoverable
            >
              <Row align="middle">
                <Col span={16}>
                  <Text strong>{product.name}</Text>
                  <br />
                  <Text type="secondary">{product.article}</Text>
                </Col>
                <Col span={8} style={{ textAlign: 'right' }}>
                  <Text>{formatPriceWithCurrency(product.price)}</Text>
                  <br />
                  <Text type="secondary">
                    –û—Å—Ç–∞—Ç–æ–∫: {product.availableStock || 0} —à—Ç
                  </Text>
                </Col>
              </Row>
            </Card>
          ))}
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ */}
      <Modal
        title="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É"
        open={planShipmentModalVisible}
        onCancel={() => setPlanShipmentModalVisible(false)}
        footer={null}
        width={500}
      >
        <div style={{ textAlign: 'center', padding: '20px 0' }}>
          <TruckOutlined style={{ fontSize: '48px', color: '#1890ff', marginBottom: '16px' }} />
          <Title level={4}>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏</Title>
          <Paragraph type="secondary">
            –ó–∞–∫–∞–∑ <Text strong>{order?.orderNumber}</Text> –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–≥—Ä—É–∑–∫—É
          </Paragraph>
          
          <Space direction="vertical" size="large" style={{ width: '100%', marginTop: '24px' }}>
            <Button 
              type="primary" 
              size="large"
              icon={<PlusOutlined />}
              onClick={() => {
                setPlanShipmentModalVisible(false);
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–µ–¥–≤—ã–±—Ä–∞–Ω–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
                navigate(`/shipments?create=true&orderId=${order?.id}`);
              }}
              style={{ width: '100%', height: '50px' }}
            >
              –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—Ç–≥—Ä—É–∑–∫—É
            </Button>
            
            <Button 
              size="large"
              icon={<EditOutlined />}
              onClick={() => {
                if (order?.status !== 'ready') {
                  message.error('–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –æ—Ç–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã');
                  return;
                }
                setShipmentSelectionModalVisible(true);
              }}
              style={{ width: '100%', height: '50px' }}
            >
              –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ—Ç–≥—Ä—É–∑–∫—É
            </Button>
          </Space>
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ */}
      <ShipmentSelectionModal
        visible={shipmentSelectionModalVisible}
        onCancel={() => setShipmentSelectionModalVisible(false)}
        onSelect={handleShipmentSelect}
        currentOrderNumber={order?.orderNumber}
      />
    </div>
  );
};

export default OrderDetail; 