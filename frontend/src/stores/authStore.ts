import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export interface User {
  id: number;
  username: string;
  role: 'manager' | 'director' | 'production' | 'warehouse';
  fullName?: string;
  phone?: string;
  email?: string;
}

interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoggingOut: boolean; // üî• –ù–û–í–û–ï: –∑–∞—â–∏—Ç–∞ –æ—Ç race conditions
  login: (user: User, token: string) => void;
  logout: () => Promise<void>; // üî• –ù–û–í–û–ï: Promise-based logout
  updateUser: (user: Partial<User>) => void;
}

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      token: null,
      isAuthenticated: false,
      isLoggingOut: false, // üî• –ù–û–í–û–ï: –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      login: (user: User, token: string) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API —Å–µ—Ä–≤–∏—Å–∞–º–∏
        localStorage.setItem('token', token);
        
        set({
          user,
          token,
          isAuthenticated: true,
          isLoggingOut: false, // üî• –ù–û–í–û–ï: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –≤—Ö–æ–¥–µ
        });
      },

      logout: async () => {
        const state = get();
        
        // üî• –ù–û–í–û–ï: –∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if (state.isLoggingOut) {
          console.log('üîí Logout —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
          return;
        }

        console.log('üö™ –ù–∞—á–∏–Ω–∞–µ–º logout –ø—Ä–æ—Ü–µ—Å—Å:', {
          user: state.user?.username,
          timestamp: new Date().toISOString()
        });

        set({ isLoggingOut: true });
        
        try {
          // üî• –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è debugging
          const logoutContext = {
            reason: 'Manual logout or session expired',
            user: state.user?.username,
            timestamp: new Date().toISOString()
          };
          sessionStorage.setItem('lastLogoutContext', JSON.stringify(logoutContext));

          // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
          localStorage.removeItem('token');
          
          console.log('‚úÖ Logout –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
          
          set({
            user: null,
            token: null,
            isAuthenticated: false,
            isLoggingOut: false,
          });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è logout:', error);
          
          // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          localStorage.removeItem('token');
          set({
            user: null,
            token: null,
            isAuthenticated: false,
            isLoggingOut: false,
          });
        }
      },

      updateUser: (userData: Partial<User>) => {
        const currentUser = get().user;
        if (currentUser) {
          set({
            user: { ...currentUser, ...userData },
          });
        }
      },
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({
        user: state.user,
        token: state.token,
        isAuthenticated: state.isAuthenticated,
        // üî• –í–ê–ñ–ù–û: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º isLoggingOut –≤ localStorage
      }),
      onRehydrateStorage: () => (state) => {
        // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–∫–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
        if (state?.token) {
          localStorage.setItem('token', state.token);
        }
      },
    }
  )
); 