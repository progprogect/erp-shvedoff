import React, { useState, useEffect } from 'react';
import { Layout, Menu, Avatar, Dropdown, Space, Typography, Button, Badge, Spin } from 'antd';
import {
  DashboardOutlined,
  AppstoreOutlined,
  InboxOutlined,
  ShoppingCartOutlined,
  ToolOutlined,
  ScissorOutlined,
  TruckOutlined,
  UserOutlined,
  LogoutOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  BellOutlined,
  UsergroupAddOutlined,
  SafetyOutlined,
  HistoryOutlined
} from '@ant-design/icons';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuthStore } from '../../stores/authStore';
import { usePermissions } from '../../hooks/usePermissions';
import { permissionsApi, MenuPermissions } from '../../services/permissionsApi';

const { Header, Sider, Content } = Layout;
const { Text } = Typography;

interface DashboardLayoutProps {
  children: React.ReactNode;
}

const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {
  const [collapsed, setCollapsed] = useState(false);
  const [menuPermissions, setMenuPermissions] = useState<MenuPermissions | null>(null);
  const [permissionsLoading, setPermissionsLoading] = useState(true);
  const { user, logout } = useAuthStore();
  const permissionsHook = usePermissions();
  const navigate = useNavigate();
  const location = useLocation();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const loadPermissions = async () => {
      try {
        setPermissionsLoading(true);
        const permissions = await permissionsApi.getMenuPermissions();
        setMenuPermissions(permissions);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π
        setMenuPermissions(null);
      } finally {
        setPermissionsLoading(false);
      }
    };

    if (user) {
      loadPermissions();
    }
  }, [user]);

  // –ú–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  const getMenuItems = () => {
    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π
    if (!menuPermissions) {
      return getLegacyMenuItems();
    }

    const menuItems = [];

    // –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
    if (menuPermissions.catalog) {
      menuItems.push({
        key: '/catalog',
        icon: <AppstoreOutlined />,
        label: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      });
    }

    // –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
    if (menuPermissions.stock) {
      menuItems.push({
        key: '/stock',
        icon: <InboxOutlined />,
        label: '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ',
      });
    }

    // –ó–∞–∫–∞–∑—ã
    if (menuPermissions.orders) {
      menuItems.push({
        key: '/orders',
        icon: <ShoppingCartOutlined />,
        label: '–ó–∞–∫–∞–∑—ã',
      });
    }

    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    if (menuPermissions.production) {
      menuItems.push({
        key: '/production',
        icon: <ToolOutlined />,
        label: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      });
    }

    // –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–∫–∏
    if (menuPermissions.cutting) {
      menuItems.push({
        key: '/cutting',
        icon: <ScissorOutlined />,
        label: '–û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–∫–∏',
      });
    }

    // –û—Ç–≥—Ä—É–∑–∫–∏
    if (menuPermissions.shipments) {
      menuItems.push({
        key: '/shipments',
        icon: <TruckOutlined />,
        label: '–û—Ç–≥—Ä—É–∑–∫–∏',
      });
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    if (menuPermissions.users) {
      menuItems.push({
        key: '/users',
        icon: <UsergroupAddOutlined />,
        label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      });
    }

    // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
    if (menuPermissions.permissions) {
      menuItems.push({
        key: '/permissions',
        icon: <SafetyOutlined />,
        label: '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è',
      });
    }

    // –ê—É–¥–∏—Ç
    if (menuPermissions.audit) {
      menuItems.push({
        key: '/audit',
        icon: <HistoryOutlined />,
        label: '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π',
      });
    }

    return menuItems;
  };

  // Fallback –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ API)
  const getLegacyMenuItems = () => {
    const baseItems = [
      {
        key: '/catalog',
        icon: <AppstoreOutlined />,
        label: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      },
      {
        key: '/stock',
        icon: <InboxOutlined />,
        label: '–û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ',
      }
    ];

    const managerDirectorItems = [
      {
        key: '/orders',
        icon: <ShoppingCartOutlined />,
        label: '–ó–∞–∫–∞–∑—ã',
      }
    ];

    const productionItems = [
      {
        key: '/production',
        icon: <ToolOutlined />,
        label: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
      },
      {
        key: '/cutting',
        icon: <ScissorOutlined />,
        label: '–û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–∫–∏',
      }
    ];

    const logisticsItems = [
      {
        key: '/shipments',
        icon: <TruckOutlined />,
        label: '–û—Ç–≥—Ä—É–∑–∫–∏',
      }
    ];

    const directorItems = [
      {
        key: '/users',
        icon: <UsergroupAddOutlined />,
        label: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
      },
      {
        key: '/permissions',
        icon: <SafetyOutlined />,
        label: '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è',
      },
      {
        key: '/audit',
        icon: <HistoryOutlined />,
        label: '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π',
      }
    ];

    let menuItems = [...baseItems];

    if (permissionsHook.canEdit('orders') || permissionsHook.canManage('orders')) {
      menuItems = [...menuItems, ...managerDirectorItems];
    }

    if (permissionsHook.canEdit('production') || permissionsHook.canManage('production')) {
      menuItems = [...menuItems, ...productionItems];
    }

    // –û—Ç–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º —Ä–æ–ª—è–º
    menuItems = [...menuItems, ...logisticsItems];

    if (permissionsHook.canManage('users') || permissionsHook.canManage('permissions')) {
      menuItems = [...menuItems, ...directorItems];
    }

    return menuItems;
  };

  const userMenuItems = [
    {
      key: 'profile',
      icon: <UserOutlined />,
      label: '–ü—Ä–æ—Ñ–∏–ª—å',
    },
    {
      type: 'divider' as const,
    },
    {
      key: 'logout',
      icon: <LogoutOutlined />,
      label: '–í—ã–π—Ç–∏',
      onClick: handleLogout,
    },
  ];

  const getRoleDisplayName = (role: string) => {
    const roleNames = {
      director: '–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
      manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º', 
      production: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
      warehouse: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–ª–∞–¥–∞'
    };
    return roleNames[role as keyof typeof roleNames] || role;
  };

  return (
    <Layout style={{ minHeight: '100vh' }}>
      <Sider 
        trigger={null} 
        collapsible 
        collapsed={collapsed}
        style={{
          background: '#fff',
          boxShadow: '2px 0 8px rgba(0,0,0,.15)'
        }}
      >
        <div className="logo">
          {collapsed ? 'üè≠' : 'ERP Shvedoff'}
        </div>
        {permissionsLoading ? (
          <div style={{ textAlign: 'center', padding: '20px' }}>
            <Spin size="small" />
            <div style={{ marginTop: '8px', fontSize: '12px', color: '#999' }}>
              –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...
            </div>
          </div>
        ) : (
          <Menu
            mode="inline"
            selectedKeys={[location.pathname]}
            items={getMenuItems()}
            onClick={({ key }) => navigate(key)}
            style={{ borderRight: 0 }}
          />
        )}
      </Sider>

      <Layout>
        <Header style={{
          background: '#fff',
          padding: '0 24px',
          boxShadow: '0 1px 4px rgba(0,21,41,.08)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <Button
            type="text"
            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
            onClick={() => setCollapsed(!collapsed)}
            style={{
              fontSize: '16px',
              width: 64,
              height: 64,
            }}
          />

          <Space size="large">
            <Badge count={0} showZero={false}>
              <Button 
                type="text" 
                icon={<BellOutlined />} 
                size="large"
                style={{ fontSize: '16px' }}
              />
            </Badge>

            <Dropdown
              menu={{ items: userMenuItems }}
              trigger={['click']}
              placement="bottomRight"
            >
              <Space style={{ cursor: 'pointer' }}>
                <Avatar 
                  style={{ backgroundColor: '#1890ff' }} 
                  icon={<UserOutlined />} 
                />
                <div style={{ textAlign: 'right', lineHeight: '1.3' }}>
                  <div>
                    <Text strong style={{ display: 'block' }}>
                      {user?.fullName || user?.username}
                    </Text>
                  </div>
                  <div>
                    <Text type="secondary" style={{ fontSize: '12px' }}>
                      {user?.role && getRoleDisplayName(user.role)}
                    </Text>
                  </div>
                </div>
              </Space>
            </Dropdown>
          </Space>
        </Header>

        <Content
          style={{
            margin: '24px',
            padding: '24px',
            background: '#fff',
            borderRadius: '8px',
            minHeight: 'calc(100vh - 112px)',
            overflow: 'auto'
          }}
        >
          {children}
        </Content>
      </Layout>
    </Layout>
  );
};

export default DashboardLayout; 