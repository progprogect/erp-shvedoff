import React, { useState, useEffect } from 'react';
import { Modal, Form, Input, Select, InputNumber, Row, Col, Button, Space, Typography, App } from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import PriceInput from './PriceInput';
import { catalogApi, Category, RollCompositionItem } from '../services/catalogApi';
import { normalizeDecimalInput, formatQuantityDisplay, validateQuantity } from '../utils/decimalUtils';
import { surfacesApi, Surface } from '../services/surfacesApi';
import { logosApi, Logo } from '../services/logosApi';
import { materialsApi, Material } from '../services/materialsApi';
import { puzzleTypesApi, PuzzleType } from '../services/puzzleTypesApi';
import { useAuthStore } from '../stores/authStore';
import carpetEdgeTypesApi, { CarpetEdgeType } from '../services/carpetEdgeTypesApi';
import bottomTypesApi, { BottomType } from '../services/bottomTypesApi';

const { Option } = Select;
const { TextArea } = Input;
const { Text, Title } = Typography;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±–ª–æ–∫–∞ —Ñ–æ—Ä–º—ã
const FormBlock: React.FC<{ title: string; icon?: string; children: React.ReactNode }> = ({ title, icon, children }) => (
  <div style={{ 
    backgroundColor: '#fafafa', 
    border: '1px solid #f0f0f0', 
    borderRadius: '8px', 
    padding: '16px', 
    marginBottom: '24px' 
  }}>
    <div style={{ 
      marginBottom: '16px', 
      borderBottom: '1px solid #e8e8e8', 
      paddingBottom: '8px' 
    }}>
      <Text strong style={{ fontSize: '16px', color: '#1890ff' }}>
        {icon && <span style={{ marginRight: '8px' }}>{icon}</span>}
        {title}
      </Text>
    </div>
    {children}
  </div>
);

interface CreateProductModalProps {
  visible: boolean;
  categories: Category[];
  onClose: () => void;
  onSuccess: () => void;
}

const CreateProductModal: React.FC<CreateProductModalProps> = ({
  visible,
  categories,
  onClose,
  onSuccess
}) => {
  const { message } = App.useApp();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [surfaces, setSurfaces] = useState<Surface[]>([]);
  const [logos, setLogos] = useState<Logo[]>([]);
  const [materials, setMaterials] = useState<Material[]>([]);
  const [puzzleTypes, setPuzzleTypes] = useState<PuzzleType[]>([]);
  const [loadingReferences, setLoadingReferences] = useState(false);
  const [newLogoName, setNewLogoName] = useState('');
  const [creatingLogo, setCreatingLogo] = useState(false);
  const [newPuzzleTypeName, setNewPuzzleTypeName] = useState('');
  const [creatingPuzzleType, setCreatingPuzzleType] = useState(false);
  const [selectedSurfaceId, setSelectedSurfaceId] = useState<number | null>(null); // DEPRECATED
  const [selectedSurfaceIds, setSelectedSurfaceIds] = useState<number[]>([]); // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  const [pressType, setPressType] = useState<string>('not_selected'); // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –ø—Ä–µ—Å—Å–∞
  const [previewArticle, setPreviewArticle] = useState<string>(''); // –ø—Ä–µ–≤—å—é –∞—Ä—Ç–∏–∫—É–ª–∞
  const [autoGenerateArticle, setAutoGenerateArticle] = useState<boolean>(true); // —Ñ–ª–∞–≥ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [productType, setProductType] = useState<'carpet' | 'other' | 'pur' | 'roll_covering'>('carpet'); // —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
  const [purNumber, setPurNumber] = useState<number | undefined>(undefined); // –Ω–æ–º–µ—Ä –ü–£–†
  const [rollComposition, setRollComposition] = useState<RollCompositionItem[]>([]); // —Å–æ—Å—Ç–∞–≤ —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
  const [manualOverride, setManualOverride] = useState<boolean>(false); // —Ä–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
  const [carpets, setCarpets] = useState<any[]>([]); // —Å–ø–∏—Å–æ–∫ –∫–æ–≤—Ä–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–∞ —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∫—Ä–∞–µ–≤ –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω
  const isEdgeTypeWithoutSidesSelection = (edgeType: string): boolean => {
    return ['straight_cut', 'straight'].includes(edgeType); // –¢–æ–ª—å–∫–æ –õ–∏—Ç–æ–π –∫—Ä–∞–π –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∫—Ä–∞—è –∫–æ–≤—Ä–∞
  const [carpetEdgeTypes, setCarpetEdgeTypes] = useState<CarpetEdgeType[]>([]);
  const [selectedCarpetEdgeType, setSelectedCarpetEdgeType] = useState<string>('straight_cut');
  const [carpetEdgeSides, setCarpetEdgeSides] = useState<number>(1);
  const [carpetEdgeStrength, setCarpetEdgeStrength] = useState<string>('normal');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∏–∑–∞ –∫–æ–≤—Ä–∞
  const [bottomTypes, setBottomTypes] = useState<BottomType[]>([]);
  const [selectedBottomTypeId, setSelectedBottomTypeId] = useState<number | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const generateArticlePreview = async (overrides = {}) => {
    if ((productType === 'carpet' && !autoGenerateArticle) || (productType === 'roll_covering' && manualOverride)) return;

    try {
      const formValues = form.getFieldsValue();
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
      const previewData = {
        productType: productType,
        name: formValues.name || '',
        dimensions: {
          length: formValues.length,
          width: formValues.width, 
          thickness: formValues.thickness
        },
        materialId: formValues.materialId,
        pressType: pressType,
        surfaceIds: selectedSurfaceIds,
        borderType: formValues.borderType,
        carpetEdgeType: selectedCarpetEdgeType,
        carpetEdgeSides: carpetEdgeSides,
        carpetEdgeStrength: carpetEdgeStrength,
        bottomTypeId: selectedBottomTypeId,
        puzzleTypeId: formValues.puzzleTypeId,
        grade: formValues.grade || 'usual',
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
        composition: productType === 'roll_covering' ? rollComposition : undefined,
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ—Ä—Ö —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        ...overrides
      };

      const response = await catalogApi.previewArticle(previewData);
      if (response.success) {
        setPreviewArticle(response.data.article);
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞
        if ((productType === 'carpet' && autoGenerateArticle) || (productType === 'roll_covering' && !manualOverride)) {
          form.setFieldValue('article', response.data.article);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∞—Ä—Ç–∏–∫—É–ª–∞:', error);
    }
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–æ—â–∞–¥–∏ –º–∞—Ç–∞
  const [calculatedMatArea, setCalculatedMatArea] = useState<number | null>(null);
  const [matAreaOverride, setMatAreaOverride] = useState<string>('');
  const { token } = useAuthStore();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
  useEffect(() => {
    const length = form.getFieldValue('length');
    const width = form.getFieldValue('width');
    
    // –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –º–∞—Ç–∞ (–¥–ª–∏–Ω–∞ √ó —à–∏—Ä–∏–Ω–∞ –≤ –º¬≤) - –¢–û–õ–¨–ö–û –î–õ–Ø –ö–û–í–†–û–í–´–• –ò–ó–î–ï–õ–ò–ô
    if (productType === 'carpet' && length && width) {
      const areaM2 = (length * width) / 1000000; // –º–º¬≤ –≤ –º¬≤
      const roundedArea = Number(areaM2.toFixed(4));
      setCalculatedMatArea(roundedArea);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–ª–æ—â–∞–¥—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—á–µ—Ç–Ω—É—é
      if (!matAreaOverride) {
        form.setFieldsValue({ matArea: roundedArea });
      }
    } else {
      setCalculatedMatArea(null);
      if (!matAreaOverride && productType === 'carpet') {
        form.setFieldsValue({ matArea: undefined });
      }
    }
  }, [form, productType, matAreaOverride]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞

  // –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ handler —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
  const handlePressTypeChange = (value: string) => {
    setPressType(value);
    generateArticlePreview({ pressType: value });
  };

  const handleSurfaceIdsChange = (value: number[]) => {
    setSelectedSurfaceIds(value);
    generateArticlePreview({ surfaceIds: value });
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–æ–º —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
  const addCompositionItem = () => {
    const newItem: RollCompositionItem = {
      carpetId: 0,
      quantity: 1, // üî• –û–ë–ù–û–í–õ–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      sortOrder: rollComposition.length
    };
    setRollComposition([...rollComposition, newItem]);
  };

  const removeCompositionItem = (index: number) => {
    const newComposition = rollComposition.filter((_, i) => i !== index);
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º sortOrder
    const reorderedComposition = newComposition.map((item, i) => ({
      ...item,
      sortOrder: i
    }));
    setRollComposition(reorderedComposition);
    generateArticlePreview({ composition: reorderedComposition });
  };

  const updateCompositionItem = (index: number, field: 'carpetId' | 'quantity', value: number) => {
    let processedValue = value;
    
    // üî• –û–ë–ù–û–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è quantity
    if (field === 'quantity') {
      processedValue = normalizeDecimalInput(value);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const validation = validateQuantity(processedValue);
      if (!validation.isValid) {
        message.error(validation.error);
        return;
      }
    }
    
    const newComposition = rollComposition.map((item, i) => 
      i === index ? { ...item, [field]: processedValue } : item
    );
    setRollComposition(newComposition);
    generateArticlePreview({ composition: newComposition });
  };



  const handleCarpetEdgeTypeChange = (value: string) => {
    setSelectedCarpetEdgeType(value);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –∫—Ä–∞—è
    if (isEdgeTypeWithoutSidesSelection(value)) {
      // –î–ª—è –õ–∏—Ç–æ–≥–æ –∫—Ä–∞—è –æ—á–∏—â–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∏–ø –ø–∞–∑–∑–ª–∞
      form.setFieldsValue({
        carpetEdgeSides: 1,
        puzzleTypeId: undefined
      });
      generateArticlePreview({ 
        carpetEdgeType: value, 
        carpetEdgeSides: 1, 
        puzzleTypeId: null 
      });
    } else if (value !== 'puzzle') {
      // –î–ª—è –Ω–µ-–ø–∞–∑–∑–ª–æ–≤—ã—Ö –∫—Ä–∞–µ–≤ –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø –ø–∞–∑–∑–ª–∞
      form.setFieldsValue({
        puzzleTypeId: undefined
      });
      generateArticlePreview({ 
        carpetEdgeType: value, 
        puzzleTypeId: null 
      });
    } else {
      generateArticlePreview({ carpetEdgeType: value });
    }
  };

  const handleCarpetEdgeSidesChange = (value: number) => {
    setCarpetEdgeSides(value);
    generateArticlePreview({ carpetEdgeSides: value });
  };

  const handleCarpetEdgeStrengthChange = (value: string) => {
    setCarpetEdgeStrength(value);
    generateArticlePreview({ carpetEdgeStrength: value });
  };

  const handleBottomTypeChange = (value: number | null) => {
    setSelectedBottomTypeId(value);
    generateArticlePreview({ bottomTypeId: value });
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π handler –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleFormFieldChange = (field: string, value: any) => {
    generateArticlePreview({ [field]: value });
  };

  // Handler –¥–ª—è —Å–º–µ–Ω—ã —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
  const handleProductTypeChange = (type: 'carpet' | 'other' | 'pur' | 'roll_covering') => {
    setProductType(type);
    
    // –ü—Ä–∏ —Å–º–µ–Ω–µ –Ω–∞ "other" –∏–ª–∏ "pur" –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—Ä—Ç–∏–∫—É–ª–∞
    if (type === 'other' || type === 'pur') {
      setAutoGenerateArticle(false);
      setPreviewArticle('');
      form.setFieldValue('article', ''); // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞
    } else {
      setAutoGenerateArticle(true);
    }
    
    // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –æ—á–∏—â–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
    if (type !== 'pur') {
      setPurNumber(undefined);
      form.setFieldValue('purNumber', undefined);
    }
    
    if (type !== 'roll_covering') {
      setRollComposition([]);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º manual override
    setManualOverride(false);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∞
  useEffect(() => {
    if (visible && token) {
      loadReferences();
    }
  }, [visible, token]);

  // –í useEffect –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∫—Ä–∞—è –∫–æ–≤—Ä–∞
  useEffect(() => {
    const loadCarpetEdgeTypes = async () => {
      try {
        const token = localStorage.getItem('token');
        if (token) {
          const response = await carpetEdgeTypesApi.getCarpetEdgeTypes(token);
          if (response.success) {
            setCarpetEdgeTypes(response.data);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –∫—Ä–∞—è –∫–æ–≤—Ä–∞:', error);
      }
    };

    loadCarpetEdgeTypes();
  }, []);

  const loadReferences = async () => {
    if (!token) return;
    
    setLoadingReferences(true);
    try {
      const [surfacesResponse, logosResponse, materialsResponse, puzzleTypesResponse, bottomTypesResponse, carpetsResponse] = await Promise.all([
        surfacesApi.getSurfaces(token),
        logosApi.getLogos(token),
        materialsApi.getMaterials(token),
        puzzleTypesApi.getPuzzleTypes(token),
        bottomTypesApi.getBottomTypes(token),
        catalogApi.getProducts({ productTypes: ['carpet'] }) // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≤—Ä—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–∞
      ]);

      if (surfacesResponse.success) {
        setSurfaces(surfacesResponse.data);
      }
      if (logosResponse.success) {
        setLogos(logosResponse.data);
      }
      if (materialsResponse.success) {
        setMaterials(materialsResponse.data);
      }
      if (puzzleTypesResponse.success) {
        setPuzzleTypes(puzzleTypesResponse.data);
      }
      if (bottomTypesResponse.success) {
        setBottomTypes(bottomTypesResponse.data);
      }
      if (carpetsResponse.success) {
        setCarpets(carpetsResponse.data);
      }
      
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏–∑ –∫–æ–≤—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      message.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤');
    } finally {
      setLoadingReferences(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
  const createNewLogo = async () => {
    if (!token || !newLogoName.trim()) {
      message.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞');
      return;
    }

    setCreatingLogo(true);
    try {
      const response = await logosApi.createLogo({
        name: newLogoName.trim(),
        description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ª–æ–≥–æ—Ç–∏–ø: ${newLogoName.trim()}`
      }, token);

      if (response.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –≤ —Å–ø–∏—Å–æ–∫
        setLogos(prev => [...prev, response.data]);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ —Ñ–æ—Ä–º–µ
        form.setFieldsValue({ logoId: response.data.id });
        setNewLogoName('');
        message.success('–õ–æ–≥–æ—Ç–∏–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞:', error);
      message.error(error.response?.data?.error?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞');
    } finally {
      setCreatingLogo(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–∞–∑–∑–ª–∞
  const createNewPuzzleType = async () => {
    if (!token || !newPuzzleTypeName.trim()) {
      message.error('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø–∞–∑–∑–ª–∞');
      return;
    }

    setCreatingPuzzleType(true);
    try {
      const response = await puzzleTypesApi.createPuzzleType({
        name: newPuzzleTypeName.trim(),
        description: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–∏–ø –ø–∞–∑–∑–ª–∞: ${newPuzzleTypeName.trim()}`
      }, token);

      if (response.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –≤ —Å–ø–∏—Å–æ–∫
        setPuzzleTypes(prev => [...prev, response.data]);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞–∑–∑–ª–∞
        // setPuzzleOptions(prev => ({ ...prev, type: response.data.code as string })); // –£–¥–∞–ª–µ–Ω–æ
        setNewPuzzleTypeName('');
        message.success('–¢–∏–ø –ø–∞–∑–∑–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–∞–∑–∑–ª–∞:', error);
      message.error(error.response?.data?.error?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –ø–∞–∑–∑–ª–∞');
    } finally {
      setCreatingPuzzleType(false);
    }
  };

  const handleSubmit = async (values: any) => {
    if (!token) return;

    setLoading(true);
    try {
      const productData = {
        name: values.name,
        article: (productType === 'carpet' && autoGenerateArticle) || (productType === 'roll_covering' && !manualOverride) ? previewArticle : values.article || null,
        productType: productType, // –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        purNumber: productType === 'pur' ? purNumber : undefined, // –Ω–æ–º–µ—Ä –ü–£–† —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–£–† —Ç–æ–≤–∞—Ä–æ–≤
        composition: productType === 'roll_covering' ? rollComposition : undefined, // —Å–æ—Å—Ç–∞–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π
        categoryId: values.categoryId,
        surfaceId: values.surfaceId || null, // DEPRECATED: –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        surfaceIds: selectedSurfaceIds, // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–æ–≤–æ–µ –ø–æ–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
        logoId: values.logoId || null,
        materialId: values.materialId || null,
        pressType: pressType as 'not_selected' | 'ukrainian' | 'chinese', // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ —Ç–∏–ø–∞ –ø—Ä–µ—Å—Å–∞
        dimensions: values.length && values.width && values.thickness ? {
          length: Number(values.length),
          width: Number(values.width),
          thickness: Number(values.thickness)
        } : undefined,
        // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∫—Ä–∞—è –∫–æ–≤—Ä–∞
        carpetEdgeType: values.carpetEdgeType || 'straight_cut',
        carpetEdgeSides: values.carpetEdgeSides || 1,
        carpetEdgeStrength: values.carpetEdgeStrength || 'normal',
        // –ü–æ–ª–µ –¥–ª—è –Ω–∏–∑–∞ –∫–æ–≤—Ä–∞
        bottomTypeId: values.bottomTypeId,
        // –ü–æ–ª—è –ø–∞–∑–∑–ª–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–∞–∑–∑–ª–æ–≤—ã–π –∫—Ä–∞–π)
        puzzleTypeId: values.carpetEdgeType === 'puzzle' ? values.puzzleTypeId : null,
        puzzleSides: values.carpetEdgeType === 'puzzle' ? values.carpetEdgeSides : 1,
        matArea: values.matArea ? parseFloat(values.matArea) : undefined,
        weight: values.weight ? parseFloat(values.weight) : undefined,
        grade: values.grade || 'usual',
        borderType: values.borderType || null,
        price: values.price ? parseFloat(values.price) : undefined,
        normStock: values.normStock || 0,
        initialStock: values.initialStock || 0,
        notes: values.notes || null,
        autoGenerateArticle: autoGenerateArticle
      };

      const response = await catalogApi.createProduct(productData);
      
      if (response.success) {
        message.success('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        form.resetFields();
        setSelectedSurfaceId(null);
        setSelectedCarpetEdgeType('straight_cut');
        setCarpetEdgeSides(1);
        setCarpetEdgeStrength('normal');
        setSelectedBottomTypeId(null);
        setCalculatedMatArea(null);
        setMatAreaOverride('');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        form.setFieldsValue({ 
          grade: 'usual',
          carpetEdgeType: 'straight_cut',
          carpetEdgeStrength: 'normal'
        });
        onSuccess();
        onClose();
      } else {
        message.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
      if (error.response?.data?.message?.includes('–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        message.error(error.response.data.message);
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å –æ—à–∏–±–∫–æ–π
        form.setFields([{
          name: 'article',
          errors: [error.response.data.message]
        }]);
      } else {
        message.error(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
      }
    } finally {
      setLoading(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –º–∞—Ç–∞ (–í–°–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã)
  const generateArticle = () => {
    const name = form.getFieldValue('name');
    const length = form.getFieldValue('length');
    const width = form.getFieldValue('width');
    const thickness = form.getFieldValue('thickness');
    const surfaceId = form.getFieldValue('surfaceId');
    const materialId = form.getFieldValue('materialId');
    const logoId = form.getFieldValue('logoId');
    const borderType = form.getFieldValue('borderType');
    const grade = form.getFieldValue('grade');
    const bottomTypeId = form.getFieldValue('bottomTypeId');
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ó–∞–¥–∞—á–µ 7.4 (–ü–û–õ–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ –í–°–ï–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
    if (name) {
      let article = '';
      
      // 1. –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –í–ö–õ–Æ–ß–ê–ï–ú –í–°–ï –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
      const nameWords = name
        .toLowerCase()
        .replace(/[^–∞-—è—ëa-z\s]/gi, '')
        .split(' ')
        .filter((word: string) => word.length > 1) // –ë–µ—Ä–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 1 —Å–∏–º–≤–æ–ª–∞
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏)
      const nameCode = nameWords.map((word: string) => {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ª–æ–≤
        const predefinedCodes: { [key: string]: string } = {
          '–ª–µ–∂–∞–∫': '–õ–ï–ñ–ê–ö',
          '–ª–µ–∂–∞—á–∏–π': '–õ–ï–ñ–ê–ß',
          '—Ä–µ–∑–∏–Ω–æ–≤—ã–π': '–†–ï–ó–ò–ù',
          '—Ä–µ–∑–∏–Ω–∞': '–†–ï–ó–ò–ù',
          '–∫–æ–≤—Ä–∏–∫': '–ö–û–í–†',
          '–∫–æ–≤–µ—Ä': '–ö–û–í–†', 
          '–ø–æ–∫—Ä—ã—Ç–∏–µ': '–ü–û–ö–†',
          '–º–∞—Ç': '–ú–ê–¢',
          '–º–∞—Ç–∞': '–ú–ê–¢',
          '–º–∞—Ç–æ–≤—ã–π': '–ú–ê–¢–û–í',
          '—á–µ—à—Å–∫–∏–π': '–ß–ï–®–°–ö',
          '—á–µ—à—É–π—á–∞—Ç—ã–π': '–ß–ï–®–£–ô',
          '–≥–ª–∞–¥–∫–∏–π': '–ì–õ–ê–î–ö',
          '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π': '–°–¢–ê–ù–î',
          '–æ–±—ã—á–Ω—ã–π': '–û–ë–´–ß–ù',
          '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π': '–°–ü–ï–¶',
          '–±–æ–ª—å—à–æ–π': '–ë–û–õ–¨–®',
          '–º–∞–ª—ã–π': '–ú–ê–õ–´–ô',
          '—Å—Ä–µ–¥–Ω–∏–π': '–°–†–ï–î–ù',
          '–ø–∞–∑–∑–ª': '–ü–ê–ó–õ',
          '–ø–∞–∑–ª': '–ü–ê–ó–õ',
          '—ç–ª–µ–º–µ–Ω—Ç–æ–≤': '–≠–õ–ï–ú',
          '–¥–µ—Ç–∞–ª–µ–π': '–î–ï–¢',
          '—á–∞—Å—Ç–µ–π': '–ß–ê–°–¢',
          '—à—Ç—É–∫': '–®–¢',
          '—Å—Ç–æ—Ä–æ–Ω–∞': '–°–¢',
          '—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π': '–°–¢–û–†',
          '–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π': '2–°–¢',
          '–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π': '1–°–¢',
          '–º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π': '–ú–°–¢–û–†'
        };
        
        if (predefinedCodes[word]) {
          return predefinedCodes[word];
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 –±—É–∫–≤—ã –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        if (word.length <= 4) {
          return word.toUpperCase();
        }
        return word.slice(0, 4).toUpperCase();
      }).join('-');
      
      if (nameCode) {
        article = nameCode;
      }
      
      // 2. –†–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–ª–∏–Ω–∞√ó–®–∏—Ä–∏–Ω–∞√ó–¢–æ–ª—â–∏–Ω–∞ (–í–°–ï —Ä–∞–∑–º–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã)
      if (length && width && thickness) {
        article += `-${length}x${width}x${thickness}`;
      } else if (length && width) {
        article += `-${length}x${width}`;
      }
      
      // 3. –ú–∞—Ç–µ—Ä–∏–∞–ª (–ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥ —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ)
      if (materialId) {
        const material = materials.find(m => m.id === materialId);
        if (material) {
          const materialCodes: { [key: string]: string } = {
            '–ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä': '–ü–†–û–¢',
            '–¥—Ä–æ–±–ª–µ–Ω–∫–∞': '–î–†–û–ë',
            '—Ä–µ–∑–∏–Ω–∞': '–†–ï–ó–ò–ù',
            '–ø–ª–∞—Å—Ç–∏–∫': '–ü–õ–ê–°–¢',
            '–∫–∞—É—á—É–∫': '–ö–ê–£–ß'
          };
          
          const materialName = material.name.toLowerCase();
          let materialCode = '';
          
          // –ò—â–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
          for (const [key, code] of Object.entries(materialCodes)) {
            if (materialName.includes(key)) {
              materialCode = code;
              break;
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 –±—É–∫–≤—ã –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
          if (!materialCode) {
            const firstWord = material.name
              .replace(/[^–∞-—è—ëa-z\s]/gi, '')
              .split(' ')[0];
            materialCode = firstWord.length <= 4 ? firstWord.toUpperCase() : firstWord.slice(0, 4).toUpperCase();
          }
          
          if (materialCode) {
            article += `-${materialCode}`;
          }
        }
      }
      
      // 4. –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (–ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥ —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ)
      if (surfaceId) {
        const surface = surfaces.find(s => s.id === surfaceId);
        if (surface) {
          const surfaceCodes: { [key: string]: string } = {
            '—á–µ—à—É–π–∫–∏': '–ß–ï–®–£–ô',
            '—á–µ—à—É–π–∫–∞': '–ß–ï–®–£–ô', 
            '—á–µ—Ä—Ç–æ—á–∫–∏': '–ß–ï–†–¢',
            '–≥–ª–∞–¥–∫–∞—è': '–ì–õ–ê–î–ö',
            '–∫–æ—Ä–æ–≤–∫–∞': '–ö–û–†–û–í',
            '1 –∫–æ—Ä–æ–≤–∫–∞': '1–ö–û–†',
            '3 –∫–æ—Ä–æ–≤–∫–∏': '3–ö–û–†'
          };
          
          const surfaceName = surface.name.toLowerCase();
          let surfaceCode = '';
          
          // –ò—â–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
          for (const [key, code] of Object.entries(surfaceCodes)) {
            if (surfaceName.includes(key)) {
              surfaceCode = code;
              break;
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 –±—É–∫–≤—ã –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
          if (!surfaceCode) {
            const firstWord = surface.name
              .replace(/[^–∞-—è—ëa-z\s]/gi, '')
              .split(' ')[0];
            surfaceCode = firstWord.length <= 4 ? firstWord.toUpperCase() : firstWord.slice(0, 4).toUpperCase();
          }
          
          if (surfaceCode) {
            article += `-${surfaceCode}`;
          }
        }
      }
      
      // 5. –ù–∞–ª–∏—á–∏–µ –±–æ—Ä—Ç–∞ (–≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
      if (borderType) {
        const borderCode = borderType === 'with_border' ? '–°–ë–û–†–¢' : '–ë–ï–ó–ë–û–†–¢';
        article += `-${borderCode}`;
      }
      
      // 6. –õ–æ–≥–æ—Ç–∏–ø (–ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥ —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ)
      if (logoId) {
        const logo = logos.find(l => l.id === logoId);
        if (logo) {
          const logoCodes: { [key: string]: string } = {
            'gea': 'GEA',
            'maximilk': 'MAXIM',
            'veles': 'VELES',
            '–∞–≥—Ä–æ—Ç–µ–∫': '–ê–ì–†–û–¢',
            '–∞—Ä–Ω—Ç—å–µ–Ω': '–ê–†–ù–¢'
          };
          
          const logoName = logo.name.toLowerCase();
          let logoCode = '';
          
          // –ò—â–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥
          for (const [key, code] of Object.entries(logoCodes)) {
            if (logoName.includes(key)) {
              logoCode = code;
              break;
            }
          }
          
          // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3-4 –±—É–∫–≤—ã –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ—Å—Ç–∏
          if (!logoCode) {
            const firstWord = logo.name
              .replace(/[^–∞-—è—ëa-z\s]/gi, '')
              .split(' ')[0];
            logoCode = firstWord.length <= 4 ? firstWord.toUpperCase() : firstWord.slice(0, 4).toUpperCase();
          }
          
          if (logoCode) {
            article += `-${logoCode}`;
          }
        }
      }
      
      // 7. –ù–∏–∑ –∫–æ–≤—Ä–∞ (–ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥ —á—É—Ç—å –¥–ª–∏–Ω–Ω–µ–µ)
      if (bottomTypeId) {
        const bottomType = bottomTypes.find(bt => bt.id === bottomTypeId);
        if (bottomType) {
          const bottomTypeCodes: { [key: string]: string } = {
            '—à–∏–ø-0': '–®–ò–ü0',
            '—à–∏–ø-2': '–®–ò–ü2',
            '—à–∏–ø-5': '–®–ò–ü5',
            '—à–∏–ø-7': '–®–ò–ü7',
            '—à–∏–ø-11': '–®–ò–ü11',
          };
          
          const bottomTypeName = bottomType.name.toLowerCase();
          let bottomTypeCode = '';
          
          for (const [key, code] of Object.entries(bottomTypeCodes)) {
            if (bottomTypeName.includes(key)) {
              bottomTypeCode = code;
              break;
            }
          }
          
          if (!bottomTypeCode) {
            const firstWord = bottomType.name
              .replace(/[^–∞-—è—ëa-z\s]/gi, '')
              .split(' ')[0];
            bottomTypeCode = firstWord.length <= 4 ? firstWord.toUpperCase() : firstWord.slice(0, 4).toUpperCase();
          }
          
          if (bottomTypeCode) {
            article += `-${bottomTypeCode}`;
          }
        }
      }
      
      // 8. –°–æ—Ä—Ç (–≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
      if (grade && grade !== 'usual') {
        article += `-2–°–û–†–¢`;
      } else if (grade === 'usual') {
        article += `-1–°–û–†–¢`;
      }
      
      form.setFieldsValue({ article });
    }
  };

  const flatCategories = (categories: Category[]): Category[] => {
    let result: Category[] = [];
    categories.forEach(category => {
      result.push(category);
      if (category.children) {
        result = result.concat(flatCategories(category.children));
      }
    });
    return result;
  };

  return (
    <Modal
      title={
        <div>
          <PlusOutlined style={{ color: '#1890ff', marginRight: 8 }} />
          –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        </div>
      }
      open={visible}
      onCancel={onClose}
      footer={null}
      width={800}
      destroyOnHidden
    >
      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
      >
        {/* –ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <FormBlock title="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" icon="üìù">
          {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ */}
          <Row gutter={16}>
            <Col span={24}>
              <Form.Item
                label="–¢–∏–ø —Ç–æ–≤–∞—Ä–∞"
                style={{ marginBottom: 16 }}
              >
                <Select 
                  value={productType}
                  onChange={handleProductTypeChange}
                  size="large"
                  style={{ width: '100%' }}
                >
                  <Option value="carpet">ü™Ñ –ö–æ–≤—Ä–æ–≤–æ–µ –∏–∑–¥–µ–ª–∏–µ</Option>
                  <Option value="other">üì¶ –î—Ä—É–≥–æ–µ</Option>
                  <Option value="pur">üîß –ü–£–†</Option>
                  <Option value="roll_covering">üè≠ –†—É–ª–æ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={24}>
              <Form.Item
                name="name"
                label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
                rules={[
                  { required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' },
                  { min: 2, message: '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞' }
                ]}
              >
                <Input 
                  placeholder={productType === 'carpet' ? "–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ–∂–∞–∫ —Ä–µ–∑–∏–Ω–æ–≤—ã–π —á–µ—à—Å–∫–∏–π" : "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–µ–∑–∫–∏"}
                  onChange={(e) => handleFormFieldChange('name', e.target.value)}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={18}>
              <Form.Item
                name="article"
                label="–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞"
                rules={
                  productType === 'other' 
                    ? [{ required: true, message: '–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ "–î—Ä—É–≥–æ–µ" –∞—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }] 
                    : productType === 'pur'
                    ? [{ required: true, message: '–î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ "–ü–£–†" –∞—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }]
                    : productType === 'roll_covering'
                    ? [{ required: true, message: '–î–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π –∞—Ä—Ç–∏–∫—É–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }]
                    : []
                }
                help={
                  productType === 'other' 
                    ? '–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é' 
                    : productType === 'pur'
                    ? '–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é –¥–ª—è –ü–£–† —Ç–æ–≤–∞—Ä–∞'
                    : productType === 'roll_covering'
                    ? (manualOverride ? '–ê—Ä—Ç–∏–∫—É–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)' : '–ê—Ä—Ç–∏–∫—É–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –†–£–õ-–ù–ê–ó–í–ê–ù–ò–ï-–†–ê–ó–ú–ï–†–´-–ü–û–í–ï–†–•-–ù–ò–ó-–°–û–°–¢–ê–í')
                    : (autoGenerateArticle ? "–ê—Ä—Ç–∏–∫—É–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫" : "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é")
                }
              >
                <TextArea 
                  placeholder={
                    productType === 'other' 
                      ? "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–ù–°–¢–†-001, –ö–õ–ï–ô-–ú–û–ú–ï–ù–¢" 
                      : productType === 'pur'
                      ? "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–£–†-001, –ü–£–†-–ò–ó–û–õ–Ø–¶–ò–Ø"
                      : productType === 'roll_covering'
                      ? (manualOverride ? "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –≤—Ä—É—á–Ω—É—é" : (previewArticle || "–†–£–õ-–ü–û–ö–†-–ß–ï–®–£–ô-–ß–ï–†–¢-–®–ò–ü0"))
                      : (autoGenerateArticle ? (previewArticle || "–ê—Ä—Ç–∏–∫—É–ª –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω...") : "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª")
                  }
                  disabled={(productType === 'carpet' && autoGenerateArticle) || (productType === 'roll_covering' && !manualOverride)}
                  value={(productType === 'carpet' && autoGenerateArticle) || (productType === 'roll_covering' && !manualOverride) ? previewArticle : undefined}
                  onFocus={() => {
                    if (productType === 'roll_covering' && !manualOverride) {
                      setManualOverride(true);
                    }
                  }}
                  autoSize={{ minRows: 1, maxRows: 3 }}
                  style={{ 
                    resize: 'none',
                    wordWrap: 'break-word',
                    whiteSpace: 'pre-wrap'
                  }}
                />
              </Form.Item>
            </Col>
            {(productType === 'carpet' || productType === 'roll_covering') && (
              <Col span={6}>
                <Form.Item label=" " style={{ marginBottom: 0 }}>
                  <Button 
                    type={
                      productType === 'carpet' 
                        ? (autoGenerateArticle ? "primary" : "default")
                        : (!manualOverride ? "primary" : "default")
                    }
                    onClick={() => {
                      if (productType === 'carpet') {
                        const newAutoMode = !autoGenerateArticle;
                        setAutoGenerateArticle(newAutoMode);
                        
                        // –ü—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª–∞
                        if (!newAutoMode) {
                          form.setFieldsValue({ article: '' });
                        }
                      } else if (productType === 'roll_covering') {
                        if (manualOverride) {
                          setManualOverride(false);
                          generateArticlePreview();
                        } else {
                          setManualOverride(true);
                          form.setFieldsValue({ article: '' });
                        }
                      }
                    }}
                    style={{ width: '100%' }}
                  >
                    {productType === 'carpet' 
                      ? (autoGenerateArticle ? "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –í–ö–õ" : "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –í–´–ö–õ")
                      : (manualOverride ? "–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –í–ö–õ" : "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –í–ö–õ")
                    }
                  </Button>
                </Form.Item>
              </Col>
            )}
          </Row>

          <Row gutter={16}>
            <Col span={24}>
              <Form.Item
                name="categoryId"
                label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' }]}
              >
                <Select 
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞"
                  loading={loadingReferences}
                  showSearch
                  optionFilterProp="children"
                  onChange={generateArticlePreview}
                >
                  {flatCategories(categories).map(category => (
                    <Option key={category.id} value={category.id}>
                      üìÅ {category.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          {/* –ü–æ–ª–µ –Ω–æ–º–µ—Ä–∞ –ü–£–† - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ –ü–£–† */}
          {productType === 'pur' && (
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="purNumber"
                  label="–ù–æ–º–µ—Ä –ü–£–†"
                  help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
                >
                  <InputNumber 
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123"
                    style={{ width: '100%' }}
                    min={1}
                    precision={0}
                    value={purNumber}
                    onChange={(value) => setPurNumber(value || undefined)}
                  />
                </Form.Item>
              </Col>
            </Row>
          )}
        </FormBlock>

        {/* –ë–ª–æ–∫ 2: –†–∞–∑–º–µ—Ä—ã (–¥–ª—è –∫–æ–≤—Ä–æ–≤, –ü–£–† –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π) */}
        {(productType === 'carpet' || productType === 'pur' || productType === 'roll_covering') && (
          <FormBlock title={
            productType === 'pur' ? "–†–∞–∑–º–µ—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" : 
            productType === 'roll_covering' ? "–†–∞–∑–º–µ—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)" :
            "–†–∞–∑–º–µ—Ä—ã"
          } icon="üìè">
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="length"
                label="–î–ª–∏–Ω–∞ (–º–º)"
                rules={productType === 'pur' ? [
                  { required: true, message: '–î–ª–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ü–£–† —Ç–æ–≤–∞—Ä–æ–≤' },
                  { type: 'number', min: 1, message: '–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' }
                ] : []}
              >
                <InputNumber 
                  placeholder="1800"
                  style={{ width: '100%' }}
                  min={1}
                  onChange={(value) => {
                    handleFormFieldChange('length', value);
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏
                    setTimeout(() => {
                      const width = form.getFieldValue('width');
                      if (productType === 'carpet' && value && width) {
                        const areaM2 = (value * width) / 1000000;
                        const roundedArea = Number(areaM2.toFixed(4));
                        setCalculatedMatArea(roundedArea);
                        if (!matAreaOverride) {
                          form.setFieldsValue({ matArea: roundedArea });
                        }
                      }
                    }, 0);
                  }}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="width"
                label="–®–∏—Ä–∏–Ω–∞ (–º–º)"
                rules={productType === 'pur' ? [
                  { required: true, message: '–®–∏—Ä–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ü–£–† —Ç–æ–≤–∞—Ä–æ–≤' },
                  { type: 'number', min: 1, message: '–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' }
                ] : []}
              >
                <InputNumber 
                  placeholder="1200"
                  style={{ width: '100%' }}
                  min={1}
                  onChange={(value) => {
                    handleFormFieldChange('width', value);
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏
                    setTimeout(() => {
                      const length = form.getFieldValue('length');
                      if (productType === 'carpet' && value && length) {
                        const areaM2 = (length * value) / 1000000;
                        const roundedArea = Number(areaM2.toFixed(4));
                        setCalculatedMatArea(roundedArea);
                        if (!matAreaOverride) {
                          form.setFieldsValue({ matArea: roundedArea });
                        }
                      }
                    }, 0);
                  }}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="thickness"
                label="–í—ã—Å–æ—Ç–∞ (–º–º)"
                rules={productType === 'pur' ? [
                  { required: true, message: '–í—ã—Å–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –ü–£–† —Ç–æ–≤–∞—Ä–æ–≤' },
                  { type: 'number', min: 1, message: '–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' }
                ] : [
                  { required: false, message: '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É' },
                  { type: 'number', min: 1, message: '–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' }
                ]}
              >
                <InputNumber
                  placeholder="30"
                  style={{ width: '100%' }}
                  min={1}
                  onChange={(value) => handleFormFieldChange('thickness', value)}
                />
              </Form.Item>
            </Col>
          </Row>

          {/* üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–µ –ø–ª–æ—â–∞–¥–∏ –¥–ª—è –∫–æ–≤—Ä–æ–≤—ã—Ö –∏–∑–¥–µ–ª–∏–π, –ü–£–† –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π */}
          {(productType === 'carpet' || productType === 'pur' || productType === 'roll_covering') && (
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="matArea"
                  label={
                    <span>
                      –ü–ª–æ—â–∞–¥—å (–º¬≤)
                      {productType === 'carpet' && calculatedMatArea && (
                        <span style={{ color: '#1890ff', fontWeight: 'normal', marginLeft: 8 }}>
                          (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {calculatedMatArea} –º¬≤)
                        </span>
                      )}
                    </span>
                  }
                  help={
                    productType === 'carpet' ? '–î–ª—è –∫–æ–≤—Ä–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤' :
                    productType === 'pur' ? '–ü–ª–æ—â–∞–¥—å –ü–£–† –∏–∑–¥–µ–ª–∏—è –≤ –º¬≤' :
                    '–ü–ª–æ—â–∞–¥—å —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –≤ –º¬≤'
                  }
                >
                  <InputNumber 
                    placeholder={
                      productType === 'carpet' ? "–†–∞—Å—Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" :
                      productType === 'pur' ? "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ü–£–†" :
                      "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è"
                    }
                    style={{ width: '100%' }}
                    min={0}
                    precision={4}
                    step={0.0001}
                    onChange={(value: number | null) => {
                      // –î–ª—è –∫–æ–≤—Ä–æ–≤ –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏–ª –ø–ª–æ—â–∞–¥—å
                      if (productType === 'carpet') {
                        setMatAreaOverride(value !== null && value !== calculatedMatArea ? 'manual' : '');
                      }
                    }}
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <div style={{ paddingTop: '30px', color: '#666', fontSize: '12px' }}>
                  {productType === 'carpet' && calculatedMatArea ? (
                    <>
                      üìè –†–∞—Å—á–µ—Ç: {form.getFieldValue('length') || 0} √ó {form.getFieldValue('width') || 0} –º–º = {calculatedMatArea} –º¬≤<br/>
                      üí° –ú–æ–∂–µ—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    </>
                  ) : productType === 'carpet' ? (
                    'üìè –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏'
                  ) : productType === 'pur' ? (
                    <>
                      üìè –ü–ª–æ—â–∞–¥—å –ü–£–† –∏–∑–¥–µ–ª–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤<br/>
                      üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é –ø–ª–æ—â–∞–¥—å –≤ –º¬≤
                    </>
                  ) : (
                    <>
                      üìè –ü–ª–æ—â–∞–¥—å —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è —É—á–µ—Ç–∞<br/>
                      üí° –í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –≤ –º¬≤
                    </>
                  )}
                </div>
              </Col>
            </Row>
          )}
        </FormBlock>
        )}

        {/* –ë–ª–æ–∫ 3: –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (–¥–ª—è –∫–æ–≤—Ä–æ–≤ –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π) */}
        {(productType === 'carpet' || productType === 'roll_covering') && (
          <FormBlock title="–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å" icon="üé®">
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                label="–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π"
              >
                <Select 
                  mode="multiple"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
                  loading={loadingReferences}
                  showSearch
                  optionFilterProp="children"
                  allowClear
                  value={selectedSurfaceIds}
                  onChange={handleSurfaceIdsChange}
                  maxTagCount="responsive"
                >
                  {surfaces.map(surface => (
                    <Option key={surface.id} value={surface.id}>
                      üé® {surface.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          <Col span={8}>
            <Form.Item
              name="logoId"
              label="–õ–æ–≥–æ—Ç–∏–ø"
            >
              <Select 
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π"
                loading={loadingReferences}
                showSearch
                optionFilterProp="children"
                allowClear
                onChange={(value) => handleFormFieldChange('logoId', value)}
                popupRender={(menu) => (
                  <>
                    {menu}
                    <div style={{ padding: '8px', borderTop: '1px solid #f0f0f0' }}>
                      <Input
                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞"
                        value={newLogoName}
                        onChange={(e) => setNewLogoName(e.target.value)}
                        onPressEnter={createNewLogo}
                        style={{ marginBottom: 8 }}
                      />
                      <Button
                        type="primary"
                        size="small"
                        icon={<PlusOutlined />}
                        onClick={createNewLogo}
                        loading={creatingLogo}
                        disabled={!newLogoName.trim()}
                        style={{ width: '100%' }}
                      >
                        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø
                      </Button>
                    </div>
                  </>
                )}
              >
                {logos.map(logo => (
                  <Option key={logo.id} value={logo.id}>
                    üìù {logo.name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item
              name="materialId"
              label="–ú–∞—Ç–µ—Ä–∏–∞–ª"
            >
              <Select 
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª"
                loading={loadingReferences}
                showSearch
                optionFilterProp="children"
                allowClear
                onChange={(value) => handleFormFieldChange('materialId', value)}
              >
                {materials.map(material => (
                  <Option key={material.id} value={material.id}>
                    üõ†Ô∏è {material.name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col span={6}>
            <Form.Item
              label="–ü—Ä–µ—Å—Å"
              help="–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ—Å—Å–∞ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            >
              <Select 
                placeholder="–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                value={pressType}
                onChange={handlePressTypeChange}
                allowClear
              >
                <Option value="not_selected">–ù–µ –≤—ã–±—Ä–∞–Ω–æ</Option>
                <Option value="ukrainian">–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π</Option>
                <Option value="chinese">–ö–∏—Ç–∞–π—Å–∫–∏–π</Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>
      </FormBlock>
        )}

        {/* –ë–ª–æ–∫ 6: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ */}
        <FormBlock title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" icon="‚öôÔ∏è">
          <Row gutter={16}>
            {/* –°–æ—Ä—Ç —Ç–æ–≤–∞—Ä–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–≤—Ä–æ–≤ */}
            {productType === 'carpet' && (
              <Col span={8}>
                <Form.Item
                  name="grade"
                  label="–°–æ—Ä—Ç —Ç–æ–≤–∞—Ä–∞"
                  initialValue="usual"
                  help="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω '–û–±—ã—á–Ω—ã–π' —Å–æ—Ä—Ç"
                >
                  <Select 
                    style={{ width: '100%' }}
                    onChange={(value) => handleFormFieldChange('grade', value)}
                  >
                    <Option value="usual">–û–±—ã—á–Ω—ã–π</Option>
                    <Option value="grade_2">2 —Å–æ—Ä—Ç</Option>
                    <Option value="telyatnik">–¢–µ–ª—è—Ç–Ω–∏–∫</Option>
                    <Option value="liber">–õ–∏–±–µ—Ä</Option>
                  </Select>
                </Form.Item>
              </Col>
            )}
            {/* –ù–∞–ª–∏—á–∏–µ –±–æ—Ä—Ç–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–≤—Ä–æ–≤ */}
            {productType === 'carpet' && (
              <Col span={8}>
                <Form.Item
                  name="borderType"
                  label="–ù–∞–ª–∏—á–∏–µ –±–æ—Ä—Ç–∞"
                  initialValue="without_border"
                >
                  <Select 
                    style={{ width: '100%' }} 
                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ä—Ç–∞"
                    onChange={(value) => handleFormFieldChange('borderType', value)}
                  >
                    <Option value="with_border">–° –±–æ—Ä—Ç–æ–º</Option>
                    <Option value="without_border">–ë–µ–∑ –±–æ—Ä—Ç–∞</Option>
                  </Select>
                </Form.Item>
              </Col>
            )}
            <Col span={8}>
              <Form.Item
                name="weight"
                label="–í–µ—Å (–∫–≥)"
              >
                <InputNumber 
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 15.5"
                  style={{ width: '100%' }}
                  min={0}
                  precision={3}
                  step={0.1}
                />
              </Form.Item>
            </Col>
          </Row>
        </FormBlock>

        {/* –ë–ª–æ–∫ 4: –ö—Ä–∞–π –∫–æ–≤—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–≤—Ä–æ–≤) */}
        {productType === 'carpet' && (
          <FormBlock title="–ö—Ä–∞–π –∫–æ–≤—Ä–∞" icon="‚úÇÔ∏è">
          <Row gutter={16}>
            <Col span={8}>
            <Form.Item
              name="carpetEdgeType"
              label="–ö—Ä–∞–π –∫–æ–≤—Ä–∞"
              rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–∞—è' }]}
              initialValue="straight_cut"
              help="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –õ–∏—Ç–æ–π (–Ω–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∞—Ä—Ç–∏–∫—É–ª–µ). –ü—Ä—è–º–æ–π —Ä–µ–∑ - –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω"
            >
              <Select
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–∞—è"
                onChange={handleCarpetEdgeTypeChange}
              >
                {carpetEdgeTypes.map(type => (
                  <Option key={type.code} value={type.code}>
                    {type.name}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          
          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω - –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫—Ä–æ–º–µ –õ–∏—Ç–æ–π */}
          {!isEdgeTypeWithoutSidesSelection(selectedCarpetEdgeType) && (
            <Col span={8}>
              <Form.Item
                name="carpetEdgeSides"
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω' }]}
                initialValue={1}
              >
                <Select 
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ—Ä–æ–Ω"
                  onChange={handleCarpetEdgeSidesChange}
                >
                  <Option value={1}>1 —Å—Ç–æ—Ä–æ–Ω–∞</Option>
                  <Option value={2}>2 —Å—Ç–æ—Ä–æ–Ω—ã</Option>
                  <Option value={3}>3 —Å—Ç–æ—Ä–æ–Ω—ã</Option>
                  <Option value={4}>4 —Å—Ç–æ—Ä–æ–Ω—ã</Option>
                </Select>
              </Form.Item>
            </Col>
          )}
          
          {/* –¢–∏–ø –ø–∞–∑–∑–ª–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞–∑–∑–ª–∞ */}
          {selectedCarpetEdgeType === 'puzzle' && (
            <Col span={8}>
              <Form.Item
                name="puzzleTypeId"
                label="–¢–∏–ø –ø–∞–∑–∑–ª–∞"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–∑–∑–ª–∞' }]}
              >
                <Select 
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞–∑–∑–ª–∞"
                  onChange={(value) => handleFormFieldChange('puzzleTypeId', value)}
                >
                  {puzzleTypes.map(type => (
                    <Option key={type.id} value={type.id}>
                      {type.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          )}
        </Row>

        <Row gutter={16}>
          <Col span={8}>
              <Form.Item
                name="carpetEdgeStrength"
                label="–£—Å–∏–ª–µ–Ω–Ω—ã–π –∫—Ä–∞–π"
                rules={[{ required: true, message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–∏–ª–µ–Ω–∏—è' }]}
                initialValue="normal"
                help="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –£—Å–∏–ª–µ–Ω–Ω—ã–π"
              >
                <Select 
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–∏–ª–µ–Ω–∏—è"
                  onChange={handleCarpetEdgeStrengthChange}
                >
                  <Option value="normal">–£—Å–∏–ª–µ–Ω–Ω—ã–π</Option>
                  <Option value="weak">–ù–µ —É—Å–∏–ª–µ–Ω–Ω—ã–π</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>
        </FormBlock>
        )}

        {/* –ë–ª–æ–∫ 5: –ù–∏–∑ –∫–æ–≤—Ä–∞ (–¥–ª—è –∫–æ–≤—Ä–æ–≤ –∏ —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π) */}
        {(productType === 'carpet' || productType === 'roll_covering') && (
          <FormBlock title="–ù–∏–∑ –∫–æ–≤—Ä–∞" icon="üîΩ">
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="bottomTypeId"
                label="–ù–∏–∑ –∫–æ–≤—Ä–∞"
                help="–ü–æ–ª–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ - –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º"
                initialValue={selectedBottomTypeId}
              >
                <Select 
                  placeholder="–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                  loading={loadingReferences}
                  allowClear
                  onChange={handleBottomTypeChange}
                >
                  <Option value={null}>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</Option>
                  {bottomTypes
                    .filter(type => type.code !== 'not_selected') // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å—å "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
                    .map(type => (
                    <Option key={type.id} value={type.id}>
                      üîΩ {type.name}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>
        </FormBlock>
        )}

        {/* –ë–ª–æ–∫ 6: –°–æ—Å—Ç–∞–≤ —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–ª–æ–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π) */}
        {productType === 'roll_covering' && (
          <FormBlock title="–°–æ—Å—Ç–∞–≤ —Ä—É–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è" icon="üìã">
            <div style={{ marginBottom: 16 }}>
              <Button 
                type="dashed" 
                onClick={addCompositionItem} 
                icon={<PlusOutlined />}
                block
              >
                –î–æ–±–∞–≤–∏—Ç—å –∫–æ–≤–µ—Ä –≤ —Å–æ—Å—Ç–∞–≤
              </Button>
            </div>
            
            {rollComposition.length > 0 && (
              <div>
                <Text strong style={{ display: 'block', marginBottom: 8 }}>
                  –ö–æ–≤—Ä—ã –≤ —Å–æ—Å—Ç–∞–≤–µ:
                </Text>
                {rollComposition.map((item, index) => (
                  <Row key={index} gutter={16} style={{ marginBottom: 8 }}>
                    <Col span={10}>
                      <Select
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≤–µ—Ä"
                        value={item.carpetId || undefined}
                        onChange={(value) => updateCompositionItem(index, 'carpetId', value)}
                        style={{ width: '100%' }}
                        showSearch
                        optionFilterProp="children"
                        filterOption={(input, option) => {
                          const carpet = carpets.find(c => c.id === option?.value);
                          if (!carpet) return false;
                          const searchText = input.toLowerCase();
                          return carpet.article.toLowerCase().includes(searchText) ||
                                 carpet.name.toLowerCase().includes(searchText);
                        }}
                        loading={loadingReferences}
                        dropdownStyle={{ maxHeight: 300 }}
                        optionLabelProp="title"
                      >
                        {carpets.map(carpet => (
                          <Option key={carpet.id} value={carpet.id} title={`${carpet.article} - ${carpet.name}`}>
                            <div style={{ 
                              display: 'flex', 
                              flexDirection: 'column',
                              lineHeight: '1.2'
                            }}>
                              <span style={{ fontWeight: 'bold', fontSize: '11px', color: '#1890ff' }}>
                                ü™Ñ {carpet.article}
                              </span>
                              <span style={{ fontSize: '12px', color: '#666' }}>
                                {carpet.name.length > 30 ? `${carpet.name.substring(0, 30)}...` : carpet.name}
                              </span>
                            </div>
                          </Option>
                        ))}
                      </Select>
                    </Col>
                    <Col span={6}>
                      <InputNumber
                        placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                        min={0.01} // üî• –û–ë–ù–û–í–õ–ï–ù–û: –º–∏–Ω–∏–º—É–º 0.01
                        step={0.01} // üî• –û–ë–ù–û–í–õ–ï–ù–û: —à–∞–≥ 0.01 –¥–ª—è –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        precision={2} // üî• –û–ë–ù–û–í–õ–ï–ù–û: —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        value={item.quantity}
                        onChange={(value) => updateCompositionItem(index, 'quantity', value || 0.01)}
                        style={{ width: '100%' }}
                        formatter={(value) => value ? formatQuantityDisplay(parseFloat(value.toString())) : ''}
                        parser={(value) => normalizeDecimalInput(value)}
                      />
                    </Col>
                    <Col span={6}>
                      <Text type="secondary">
                        –ü–æ–∑–∏—Ü–∏—è {index + 1}
                      </Text>
                    </Col>
                    <Col span={2}>
                      <Button 
                        type="text" 
                        danger 
                        onClick={() => removeCompositionItem(index)}
                        size="small"
                      >
                        ‚úï
                      </Button>
                    </Col>
                  </Row>
                ))}
                <Text type="secondary" style={{ fontSize: '12px' }}>
                  üí° –°–æ—Å—Ç–∞–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–≤—Ä–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ "–°–û–°–¢–ê–í{'{N}'}"
                </Text>
              </div>
            )}
          </FormBlock>
        )}

        {/* –ë–ª–æ–∫ 7: –ó–∞–ø–∞—Å—ã –∏ —Ü–µ–Ω—ã (–¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤) */}
        <FormBlock title="–ó–∞–ø–∞—Å—ã –∏ —Ü–µ–Ω—ã" icon="üí∞">
          <Row gutter={16}>
          <Col span={8}>
            <Form.Item
              name="price"
              label="–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"
            >
              <PriceInput 
                placeholder="15000"
                style={{ width: '100%' }}
              />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item
              name="normStock"
              label="–ù–æ—Ä–º–∞ –æ—Å—Ç–∞—Ç–∫–∞ (—à—Ç)"
            >
              <InputNumber 
                placeholder="10"
                style={{ width: '100%' }}
                min={0}
              />
            </Form.Item>
          </Col>
          <Col span={8}>
            <Form.Item
              name="initialStock"
              label="–ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ (—à—Ç)"
              help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥"
            >
              <InputNumber 
                placeholder="0"
                style={{ width: '100%' }}
                min={0}
              />
            </Form.Item>
          </Col>
        </Row>

        <Row>
          <Col span={24}>
            <Form.Item
              name="notes"
              label="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
            >
              <TextArea 
                rows={3}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ..."
                maxLength={500}
                showCount
              />
            </Form.Item>
          </Col>
        </Row>
      </FormBlock>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>
          <Space>
            <Button onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              icon={<PlusOutlined />}
            >
              –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
            </Button>
          </Space>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default CreateProductModal; 