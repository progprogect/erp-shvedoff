import { useAuthStore } from '../stores/authStore';
import { API_PERMISSIONS_BASE as API_BASE } from '../config/api';

export interface Permission {
  id: number;
  name: string;
  resource: string;
  action: string;
  description?: string;
  createdAt: string;
}

export interface UserPermission {
  id: number;
  name: string;
  resource: string;
  action: string;
  granted: boolean;
  source: 'role' | 'user';
}

export interface UserPermissions {
  role: string;
  permissions: UserPermission[];
}

export interface MenuPermissions {
  catalog: boolean;
  stock: boolean;
  orders: boolean;
  production: boolean;
  cutting: boolean;
  shipments: boolean;
  users: boolean;
  permissions: boolean;
  audit: boolean;
  actions: {
    catalog_create: boolean;
    catalog_edit: boolean;
    catalog_delete: boolean;
    stock_edit: boolean;
    stock_manage: boolean;
    orders_create: boolean;
    orders_edit: boolean;
    orders_delete: boolean;
    production_create: boolean;
    production_manage: boolean;
    cutting_create: boolean;
    cutting_execute: boolean;
    shipments_create: boolean;
    shipments_manage: boolean;
    users_manage: boolean;
  };
}

class PermissionsApi {
  private async fetch(url: string, options: RequestInit = {}) {
    const token = localStorage.getItem('token');
    const fullUrl = `${API_BASE}${url}`;
    
    console.log('üåê PermissionsApi.fetch:', {
      url: fullUrl,
      token: token ? `${token.substring(0, 20)}...` : '–ù–ï–¢ –¢–û–ö–ï–ù–ê',
      API_BASE
    });
    
    try {
      const response = await fetch(fullUrl, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
          ...options.headers,
        },
      });

      console.log('üì° Response status:', response.status, response.statusText);

      if (!response.ok) {
        const error = await response.json().catch(() => ({ message: 'Network error' }));
        console.error('‚ùå API Error:', { status: response.status, error });
        throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      }

      const data = await response.json();
      console.log('‚úÖ API Success:', { url, data });
      return data;
    } catch (error) {
      console.error('‚ùå Fetch Error:', { url: fullUrl, error });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
  async getPermissions(): Promise<{
    permissions: Permission[];
    grouped: Record<string, Permission[]>;
  }> {
    const response = await this.fetch('/');
    return response.data;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
  async getRolePermissions(): Promise<Record<string, Permission[]>> {
    const response = await this.fetch('/roles');
    return response.data;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserPermissions(userId: number): Promise<UserPermissions> {
    const response = await this.fetch(`/users/${userId}`);
    return response.data;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–∏
  async setRolePermissions(role: string, permissionIds: number[]): Promise<void> {
    await this.fetch(`/roles/${role}`, {
      method: 'POST',
      body: JSON.stringify({ permissionIds })
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async setUserPermissions(userId: number, permissions: Array<{ permissionId: number; granted: boolean }>): Promise<void> {
    await this.fetch(`/users/${userId}`, {
      method: 'POST',
      body: JSON.stringify({ permissions })
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
  async initializePermissions(): Promise<void> {
    await this.fetch('/initialize', {
      method: 'POST'
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getMyPermissions(): Promise<UserPermissions> {
    const response = await this.fetch('/check');
    return response.data;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
  async checkPermission(resource: string, action: string): Promise<boolean> {
    const response = await this.fetch('/check-specific', {
      method: 'POST',
      body: JSON.stringify({ resource, action })
    });
    return response.data.granted;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
  async getMenuPermissions(): Promise<MenuPermissions> {
    const response = await this.fetch('/user-menu');
    return response.data;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ó–∞–¥–∞—á–∞ 1: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞)
  async getExportRights(): Promise<{
    catalog: boolean;
    orders: boolean;
    production: boolean;
    cutting: boolean;
    shipments: boolean;
  }> {
    const response = await this.fetch('/export-rights');
    return response.data;
  }
}

export const permissionsApi = new PermissionsApi(); 