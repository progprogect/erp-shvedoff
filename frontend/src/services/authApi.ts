import axios from 'axios';
import { User } from '../stores/authStore';
import { API_BASE_URL } from '../config/api';

export interface LoginResponse {
  success: boolean;
  token: string;
  user: User;
}

export interface ApiError {
  error: {
    message: string;
    statusCode: number;
  };
}

class AuthApi {
  // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨!
  async login(username: string, password: string): Promise<LoginResponse> {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑:', '/api/auth/login');
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      username,
      password
    });
    return response.data;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨!
  async refreshToken(token: string): Promise<LoginResponse> {
    const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {}, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    return response.data;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨!
  async getMe(token: string): Promise<{ success: boolean; user: User }> {
    const response = await axios.get(`${API_BASE_URL}/auth/me`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    return response.data;
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨!
  async logout(token: string): Promise<{ success: boolean; message: string }> {
    const response = await axios.post(`${API_BASE_URL}/auth/logout`, {}, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    return response.data;
  }
}

export const authApi = new AuthApi(); 