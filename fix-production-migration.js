#!/usr/bin/env node

const { Pool } = require('pg');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π DATABASE_URL –¥–ª—è Railway
const DATABASE_URL = 'postgresql://postgres:xeIitZntkaAAeoZSFpsOsfCOKpoORwGA@postgres.railway.internal:5432/railway';

async function fixMigration() {
  const pool = new Pool({
    connectionString: DATABASE_URL,
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 60000,
    max: 5
  });

  try {
    console.log('üîß –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ production –ë–î...');
    const client = await pool.connect();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É products
    const checkTable = await client.query(`
      SELECT table_name FROM information_schema.tables 
      WHERE table_name = 'products' AND table_schema = 'public'
    `);
    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞ products: ${checkTable.rows.length > 0 ? 'EXISTS' : 'NOT FOUND'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É border_type
    const checkColumn = await client.query(`
      SELECT column_name FROM information_schema.columns 
      WHERE table_name = 'products' AND column_name = 'border_type'
    `);
    console.log(`üìä –ü–æ–ª–µ border_type: ${checkColumn.rows.length > 0 ? 'EXISTS' : 'MISSING'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º enum border_type
    const checkEnum = await client.query(`
      SELECT typname FROM pg_type WHERE typname = 'border_type'
    `);
    console.log(`üìä Enum border_type: ${checkEnum.rows.length > 0 ? 'EXISTS' : 'MISSING'}`);
    
    if (checkColumn.rows.length === 0) {
      console.log('üö® –ü–æ–ª–µ border_type –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é...');
      
      try {
        await client.query('BEGIN');
        
        // –°–æ–∑–¥–∞–µ–º enum –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (checkEnum.rows.length === 0) {
          console.log('   üìù –°–æ–∑–¥–∞—é enum border_type...');
          await client.query(`CREATE TYPE border_type AS ENUM ('with_border', 'without_border')`);
          console.log('   ‚úÖ Enum —Å–æ–∑–¥–∞–Ω');
        } else {
          console.log('   ‚úÖ Enum —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        console.log('   üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ border_type...');
        await client.query(`ALTER TABLE products ADD COLUMN border_type border_type`);
        console.log('   ‚úÖ –ü–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        console.log('   üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...');
        await client.query(`COMMENT ON COLUMN products.border_type IS '–ù–∞–ª–∏—á–∏–µ –±–æ—Ä—Ç–∞: with_border (—Å –±–æ—Ä—Ç–æ–º) –∏–ª–∏ without_border (–±–µ–∑ –±–æ—Ä—Ç–∞)'`);
        console.log('   ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        console.log('   üìù –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å...');
        await client.query(`CREATE INDEX IF NOT EXISTS idx_products_border_type ON products(border_type)`);
        console.log('   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
        
        await client.query('COMMIT');
        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è border_type –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
      } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
        throw error;
      }
    } else {
      console.log('‚úÖ –ü–æ–ª–µ border_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalCheck = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'products' AND column_name = 'border_type'
    `);
    
    if (finalCheck.rows.length > 0) {
      console.log('‚úÖ –ü–æ–ª–µ border_type –Ω–∞–π–¥–µ–Ω–æ:', finalCheck.rows[0]);
    } else {
      console.log('‚ùå –ü–æ–ª–µ border_type –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    const countProducts = await client.query('SELECT COUNT(*) FROM products');
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: ${countProducts.rows[0].count}`);
    
    client.release();
    console.log('\nüéØ –ì–û–¢–û–í–û! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('–°—Ç–µ–∫:', error.stack);
  } finally {
    await pool.end();
  }
}

fixMigration();