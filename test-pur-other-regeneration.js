const axios = require('axios');

const API_BASE = 'http://localhost:5001/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ü–£–†
const purProduct = {
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–£–†',
  productType: 'pur',
  purNumber: 12345,
  dimensions: {
    length: 1000,
    width: 800,
    thickness: 5
  },
  price: '1500.00',
  costPrice: '1200.00',
  article: 'PUR-12345' // –†—É—á–Ω–æ–π –∞—Ä—Ç–∏–∫—É–ª
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è "–î—Ä—É–≥–æ–µ"
const otherProduct = {
  name: '–¢–µ—Å—Ç–æ–≤–æ–µ –¥—Ä—É–≥–æ–µ',
  productType: 'other',
  dimensions: {
    length: 500,
    width: 300,
    thickness: 2
  },
  price: '800.00',
  costPrice: '600.00',
  article: 'OTHER-001' // –†—É—á–Ω–æ–π –∞—Ä—Ç–∏–∫—É–ª
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–≤—Ä–∞ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
const carpetProduct = {
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–≤–µ—Ä',
  productType: 'carpet',
  dimensions: {
    length: 1200,
    width: 800,
    thickness: 12
  },
  price: '2000.00',
  costPrice: '1600.00',
  article: 'CARPET-TEST' // –†—É—á–Ω–æ–π –∞—Ä—Ç–∏–∫—É–ª
};

async function createTestProducts() {
  console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...');
  
  const products = [];
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ü–£–†
    const purResponse = await axios.post(`${API_BASE}/catalog/products`, purProduct);
    console.log('‚úÖ –ü–£–† —Å–æ–∑–¥–∞–Ω:', purResponse.data.id, purResponse.data.article);
    products.push(purResponse.data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ü–£–†:', error.response?.data || error.message);
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º "–î—Ä—É–≥–æ–µ"
    const otherResponse = await axios.post(`${API_BASE}/catalog/products`, otherProduct);
    console.log('‚úÖ "–î—Ä—É–≥–æ–µ" —Å–æ–∑–¥–∞–Ω–æ:', otherResponse.data.id, otherResponse.data.article);
    products.push(otherResponse.data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è "–î—Ä—É–≥–æ–µ":', error.response?.data || error.message);
  }
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–≤–µ—Ä
    const carpetResponse = await axios.post(`${API_BASE}/catalog/products`, carpetProduct);
    console.log('‚úÖ –ö–æ–≤–µ—Ä —Å–æ–∑–¥–∞–Ω:', carpetResponse.data.id, carpetResponse.data.article);
    products.push(carpetResponse.data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–≤—Ä–∞:', error.response?.data || error.message);
  }
  
  return products;
}

async function testRegeneration(products) {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
  
  if (products.length === 0) {
    console.log('‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return;
  }
  
  try {
    const productIds = products.map(p => p.id);
    
    // Dry run
    const dryRunResponse = await axios.post(`${API_BASE}/catalog/regenerate/dry-run`, {
      productIds
    });
    
    console.log('‚úÖ Dry run –≤—ã–ø–æ–ª–Ω–µ–Ω:');
    console.log('   –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å:', dryRunResponse.data.canApplyCount);
    console.log('   –ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å:', dryRunResponse.data.cannotApplyCount);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    dryRunResponse.data.results.forEach(result => {
      const product = products.find(p => p.id === result.productId);
      console.log(`\n   üì¶ –¢–æ–≤–∞—Ä: ${product?.name} (${product?.productType})`);
      console.log(`     ID: ${result.productId}`);
      console.log(`     –¢–µ–∫—É—â–∏–π –∞—Ä—Ç–∏–∫—É–ª: ${result.currentSku}`);
      console.log(`     –ù–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª: ${result.newSku}`);
      console.log(`     –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å: ${result.canApply}`);
      console.log(`     –ü—Ä–∏—á–∏–Ω–∞: ${result.reason || '–ù–µ—Ç'}`);
      if (result.details) {
        console.log(`     –î–µ—Ç–∞–ª–∏: ${result.details.join(', ')}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ü–£–†—ã –∏ "–î—Ä—É–≥–æ–µ" –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã
    const purResults = dryRunResponse.data.results.filter(r => {
      const product = products.find(p => p.id === r.productId);
      return product?.productType === 'pur' || product?.productType === 'other';
    });
    
    const carpetResults = dryRunResponse.data.results.filter(r => {
      const product = products.find(p => p.id === r.productId);
      return product?.productType === 'carpet';
    });
    
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log(`   –ü–£–†—ã –∏ "–î—Ä—É–≥–æ–µ": ${purResults.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    purResults.forEach(r => {
      console.log(`     - ${r.canApply ? '‚ùå –û–®–ò–ë–ö–ê: –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å' : '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å'} (${r.reason})`);
    });
    
    console.log(`   –ö–æ–≤—Ä—ã: ${carpetResults.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    carpetResults.forEach(r => {
      console.log(`     - ${r.canApply ? '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å' : '‚ùå –û–®–ò–ë–ö–ê: –Ω–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å'} (${r.reason || '–ù–µ—Ç –ø—Ä–∏—á–∏–Ω—ã'})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.response?.data || error.message);
  }
}

async function cleanup(products) {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  for (const product of products) {
    if (product) {
      try {
        await axios.delete(`${API_BASE}/catalog/products/${product.id}`);
        console.log(`   –£–¥–∞–ª–µ–Ω —Ç–æ–≤–∞—Ä ${product.id}: ${product.name}`);
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error.response?.data?.message || error.message);
      }
    }
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ü–£–†–æ–≤ –∏ "–î—Ä—É–≥–æ–µ"\n');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
  const products = await createTestProducts();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  await testRegeneration(products);
  
  // –û—á–∏—â–∞–µ–º
  await cleanup(products);
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

main().catch(console.error);
